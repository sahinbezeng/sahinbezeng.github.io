{"version":3,"sources":["components/reward/RewarListTable.js","components/reward/RewardSettings.js","pages/RewardList.js","components/HeaderBreadcrumbs.js","utils/mockImages.js"],"names":["TABLE_HEAD","id","label","alignRight","RewardListTable","rewardList","theme","useTheme","Grid","container","spacing","sx","mt","item","xs","Typography","variant","Scrollbar","TableContainer","minWidth","Table","TableHead","TableRow","map","headCell","TableCell","align","TableBody","row","name","location","dispensedWeekly","SettingsSchema","Yup","shape","tokenValue","required","starValueInTokens","keyValueInTokens","boosterValueInTokens","RewardSettings","currentSettings","enqueueSnackbar","useSnackbar","formik","useFormik","enableReinitialize","initialValues","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","error","console","errors","touched","handleSubmit","getFieldProps","isSubmitting","value","noValidate","autoComplete","md","Card","CardHeader","title","CardContent","Stack","direction","sm","TextField","fullWidth","size","InputProps","endAdornment","InputAdornment","position","Boolean","helperText","Box","display","justifyContent","LoadingButton","type","loading","endIcon","Save","RewardList","themeStretch","useSettings","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","reward","list","action","Button","component","RouterLink","to","create","startIcon","icon","PlusFill","height","avatarUrl","mockImgProduct","contents","frequency","numberOfKeys","numberOfCoins","numberOfStars","numberOfBoosters","moreLink","other","mb","alignItems","flexGrow","gutterBottom","flexShrink","isString","target","noWrap","index"],"mappings":"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","file":"static/js/19.6c62eb7d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'location', label: 'Location', alignRight: false },\n  { id: 'dispensedWeekly', label: 'Dispensed Weekly', alignRight: false },\n];\n\nRewardListTable.propTypes = {\n  rewardList: PropTypes.array,\n};\n\nfunction RewardListTable({ rewardList = [] }) {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Reward List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rewardList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.location}</TableCell>\n                    <TableCell>{row.dispensedWeekly}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default RewardListTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack5';\nimport * as Yup from 'yup';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport { Box, Card, CardContent, CardHeader, Grid, InputAdornment, Stack, TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\nimport { Save as SaveIcon } from '@material-ui/icons';\n\nconst SettingsSchema = Yup.object().shape({\n  tokenValue: Yup.number().required('This field is required.'),\n  starValueInTokens: Yup.number().required('This field is required.'),\n  keyValueInTokens: Yup.number().required('This field is required.'),\n  boosterValueInTokens: Yup.number().required('This field is required.'),\n});\n\nconst RewardSettings = ({ currentSettings }) => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      tokenValue: currentSettings?.tokenValue || 5,\n      starValueInTokens: currentSettings?.starValueInTokens || 5,\n      keyValueInTokens: currentSettings?.keyValueInTokens || 5,\n      boosterValueInTokens: currentSettings?.boosterValueInTokens || 5,\n    },\n    validationSchema: SettingsSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar('Update success', { variant: 'success' });\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, touched, handleSubmit, getFieldProps, isSubmitting } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item md={12}>\n            <Card>\n              <CardHeader title=\"Reward Settings\" />\n              <CardContent>\n                <Stack spacing={2}>\n                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Token Value in USD\"\n                      InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">USD</InputAdornment>,\n                      }}\n                      {...getFieldProps('tokenValue')}\n                      error={Boolean(touched.tokenValue && errors.tokenValue)}\n                      helperText={touched.tokenValue && errors.tokenValue}\n                    />\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Star Value in Tokens\"\n                      InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">tokens</InputAdornment>,\n                      }}\n                      {...getFieldProps('starValueInTokens')}\n                      error={Boolean(touched.starValueInTokens && errors.starValueInTokens)}\n                      helperText={touched.starValueInTokens && errors.starValueInTokens}\n                    />\n                  </Stack>\n                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Key Value in Tokens\"\n                      InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">tokens</InputAdornment>,\n                      }}\n                      {...getFieldProps('keyValueInTokens')}\n                      error={Boolean(touched.keyValueInTokens && errors.keyValueInTokens)}\n                      helperText={touched.keyValueInTokens && errors.keyValueInTokens}\n                    />\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Booster Value in Tokens\"\n                      InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">tokens</InputAdornment>,\n                      }}\n                      {...getFieldProps('boosterValueInTokens')}\n                      error={Boolean(touched.boosterValueInTokens && errors.boosterValueInTokens)}\n                      helperText={touched.boosterValueInTokens && errors.boosterValueInTokens}\n                    />\n                  </Stack>\n                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                    <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} endIcon={<SaveIcon />}>\n                      Save\n                    </LoadingButton>\n                  </Box>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n};\n\nRewardSettings.propTypes = {\n  currentSettings: PropTypes.object,\n};\n\nexport default RewardSettings;\n","import { Link as RouterLink } from 'react-router-dom';\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\n// material\nimport { useTheme } from '@material-ui/core/styles';\nimport { Box, Button, Card, CardContent, Container, Stack, Typography } from '@material-ui/core';\n\nimport useSettings from '../hooks/useSettings';\n\nimport { PATH_DASHBOARD } from '../routes/paths';\n\nimport { mockImgProduct } from '../utils/mockImages';\n\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport RewardListTable from '../components/reward/RewarListTable';\nimport RewardSettings from '../components/reward/RewardSettings';\n\n// ----------------------------------------------------------------------\n\nconst RewardList = () => {\n  const { themeStretch } = useSettings();\n  const theme = useTheme();\n\n  return (\n    <Page title=\"Reward: List\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Reward List\"\n          links={[{ name: 'Reward', href: PATH_DASHBOARD.reward.list }, { name: 'List' }]}\n          action={\n            <Button\n              variant=\"contained\"\n              component={RouterLink}\n              to={PATH_DASHBOARD.reward.create}\n              startIcon={<Icon icon={PlusFill} />}\n            >\n              New Reward\n            </Button>\n          }\n        />\n        <RewardSettings\n          currentSettings={{ tokenValue: 10, starValueInTokens: 100, keyValueInTokens: 240, boosterValueInTokens: 120 }}\n        />\n        <Card sx={{ mt: theme.spacing(4) }}>\n          <CardContent>\n            <Stack spacing={1}>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Easter Egg</Typography>\n                <Typography variant=\"body2\">1800 tokens</Typography>\n              </Stack>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Present</Typography>\n                <Typography variant=\"body2\">1750 tokens</Typography>\n              </Stack>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Chest</Typography>\n                <Typography variant=\"body2\">2021 tokens</Typography>\n              </Stack>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Lottery Wheels</Typography>\n                <Typography variant=\"body2\">1907 tokens</Typography>\n              </Stack>\n            </Stack>\n          </CardContent>\n        </Card>\n        <Box sx={{ height: 720 }}>\n          <RewardListTable\n            rewardList={[\n              {\n                avatarUrl: mockImgProduct(1),\n                name: 'Easter Egg',\n                location: 'Default',\n                dispensedWeekly: 2890,\n                contents: [\n                  {\n                    title: 'Basic',\n                    frequency: 30,\n                    numberOfKeys: 5,\n                    numberOfCoins: 5,\n                    numberOfStars: 5,\n                    numberOfBoosters: 5,\n                  },\n                  {\n                    title: 'Rare',\n                    frequency: 30,\n                    numberOfKeys: 10,\n                    numberOfCoins: 15,\n                    numberOfStars: 5,\n                    numberOfBoosters: 10,\n                  },\n                  {\n                    title: 'Epic',\n                    frequency: 20,\n                    numberOfKeys: 20,\n                    numberOfCoins: 30,\n                    numberOfStars: 20,\n                    numberOfBoosters: 25,\n                  },\n                ],\n              },\n            ]}\n          />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default RewardList;\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@material-ui/core';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","// ----------------------------------------------------------------------\n\nexport const mockImgCover = (index) => `/static/mock-images/covers/cover_${index}.jpg`;\nexport const mockImgFeed = (index) => `/static/mock-images/feeds/feed_${index}.jpg`;\nexport const mockImgProduct = (index) => `/static/mock-images/products/product_${index}.jpg`;\nexport const mockImgAvatar = (index) => `/static/mock-images/avatars/avatar_${index}.jpg`;\n"],"sourceRoot":""}