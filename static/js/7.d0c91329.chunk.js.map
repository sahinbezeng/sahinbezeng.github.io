{"version":3,"sources":["components/campaign/validations.js","components/campaign/CampaignTypeForm.js","components/campaign/task/TaskAndRewardsForm.js","components/campaign/task/TaskDetailForm.js","components/campaign/contest/ContestAndRewardsForm.js","components/campaign/contest/ContestDetailForm.js","components/campaign/survey/SurveyAndRewardsForm.js","components/campaign/CampaignNewForm.js","pages/CampaignCreate.js","utils/formatNumber.js","components/HeaderBreadcrumbs.js","utils/constants/regexs.js","components/DynamicFormItem.js","components/upload/UploadMultiFile.js","components/upload/UploadSingleFile.js","components/upload/UploadAvatar.js","components/Steps.js"],"names":["CampaignTypeSchema","Yup","shape","brand","matches","nameRegExp","required","campaignType","TaskAndRewardsSchema","name","taskType","totalBudget","perUser","starPerUser","continueAfterBudget","tier","isPublic","TaskDetailSchema","headerImage","description","doList","of","dontList","igCaptionQuestions","noOfPhotoRequired","noOfVideoRequired","hashtags","mentions","startDate","nullable","endDate","when","schema","min","ContestAndRewardsSchema","contestType","winnerToken","ContestDetailSchema","contestStartDate","contestEndDate","votingStartDate","votingEndDate","winnerDate","SurveyAndRewardsSchema","percentageColor","surveyQuestions","title","options","CAMPAIGN_TYPES","CampaignTypeForm","formik","onCampaignTypeChange","theme","useTheme","errors","values","touched","getFieldProps","setFieldValue","Grid","container","spacing","item","md","Stack","xs","TextField","select","fullWidth","size","label","placeholder","SelectProps","native","error","Boolean","helperText","value","map","option","index","RadioGroup","onChange","e","console","log","target","direction","columns","type","isSelected","Card","variant","sx","border","palette","primary","main","CardMedia","height","image","CardContent","CardActions","FormControlLabel","control","Radio","display","top","margin","width","position","TaskAndRewardsForm","CardHeader","sm","alignItems","justifyContent","Typography","labelPlacement","Switch","checked","mx","LabelStyle","styled","typography","subtitle2","color","text","secondary","marginBottom","TaskDetailForm","handleCoverDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","maxSize","accept","coverUrl","onDrop","FormHelperText","px","Button","Avatar","alt","src","multiline","rows","render","arrHelper","fieldName","DynamicFormItem","fieldProps","getIn","isLastItem","length","onAddClick","push","onRemoveClick","remove","Autocomplete","multiple","freeSolo","event","newValue","renderTags","getTagProps","Chip","renderInput","params","DateTimePicker","inputFormat","date","isValidDate","mb","p","ContestAndRewardsForm","ContestDetailForm","titleTypographyProps","initialQuestion","SurveyAndRewardsForm","questionArrayHelpers","action","startIcon","icon","plusFill","onClick","question","questionIndex","optArrayHelpers","optionIndex","optionFieldName","IconButton","Delete","Add","STEPS","initialSurveyQuestion","CampaignNewForm","isEdit","currentCampaign","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","activeStep","setActiveStep","setCampaignType","VALIDATION_SCHEMAS","Task","Contest","Survey","Campaign","isLastStep","useFormik","enableReinitialize","initialValues","undefined","Date","validationSchema","onSubmit","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","PATH_DASHBOARD","task","list","prev","handleSubmit","isSubmitting","noValidate","autoComplete","Steps","steps","val","Box","mt","mr","LoadingButton","loading","CampaignCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","campaign","all","fShortenNumber","number","replace","numeral","format","fData","moreLink","other","flexGrow","gutterBottom","flexShrink","isString","noWrap","phoneRegExp","addressRegExp","outline","textAlign","flexDirection","padding","borderRadius","backgroundColor","background","neutral","grey","opacity","cursor","breakpoints","up","DropZoneStyle","overflow","transition","transitions","create","UploadSingleFile","useDropzone","getRootProps","getInputProps","isDragActive","isDragReject","fileRejections","ShowRejectionItems","Paper","py","borderColor","bgcolor","alpha","path","my","component","message","code","ml","textDecoration","objectFit","RootStyle","zIndex","PlaceholderStyle","easing","easeInOut","duration","shorter","UploadAvatar","caption","className","Icon","roundAddAPhoto","QontoConnector","withStyles","alternativeLabel","left","right","active","completed","line","borderTopWidth","divider","StepConnector","QontoStepIcon","CheckmarkFill","connector","StepIconComponent"],"mappings":"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","file":"static/js/7.d0c91329.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { nameRegExp } from '../../utils/constants/regexs';\n\nexport const CampaignTypeSchema = Yup.object().shape({\n  brand: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Brand is required'),\n  campaignType: Yup.string(),\n});\n\nexport const TaskAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  taskType: Yup.string(),\n  totalBudget: Yup.number(),\n  perUser: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  tier: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const TaskDetailSchema = Yup.object().shape({\n  headerImage: Yup.mixed(),\n  description: Yup.string(),\n  doList: Yup.array().of(Yup.string()),\n  dontList: Yup.array().of(Yup.string()),\n  igCaptionQuestions: Yup.array().of(Yup.string()),\n  noOfPhotoRequired: Yup.number(),\n  noOfVideoRequired: Yup.number(),\n  hashtags: Yup.array().of(Yup.string()),\n  mentions: Yup.array().of(Yup.string()),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n});\n\nexport const ContestAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  contestType: Yup.string(),\n  totalBudget: Yup.number(),\n  winnerToken: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  tier: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const ContestDetailSchema = Yup.object().shape({\n  headerImage: Yup.mixed(),\n  description: Yup.string(),\n  doList: Yup.array().of(Yup.string()),\n  dontList: Yup.array().of(Yup.string()),\n  igCaptionQuestions: Yup.array().of(Yup.string()),\n  noOfPhotoRequired: Yup.number(),\n  noOfVideoRequired: Yup.number(),\n  hashtags: Yup.array().of(Yup.string()),\n  mentions: Yup.array().of(Yup.string()),\n  contestStartDate: Yup.date().nullable(true),\n  contestEndDate: Yup.date().when('contestStartDate', (contestStartDate, schema) =>\n    contestStartDate ? schema.min(contestStartDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  votingStartDate: Yup.date().nullable(true),\n  votingEndDate: Yup.date().when('votingStartDate', (votingStartDate, schema) =>\n    votingStartDate ? schema.min(votingStartDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  winnerDate: Yup.date().nullable(true),\n});\n\nexport const SurveyAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  description: Yup.string(),\n  percentageColor: Yup.string(),\n  starPerUser: Yup.number(),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  surveyQuestions: Yup.array().of(Yup.object().shape({ title: Yup.string(), options: Yup.array().of(Yup.string()) })),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  FormControlLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  Stack,\n  TextField,\n} from '@material-ui/core';\n\n// ----------------------------------------------------------------------\n\nconst CAMPAIGN_TYPES = ['Task', 'Contest', 'Survey', 'Watch Ad', 'Campaign'];\n\nconst CampaignTypeForm = ({ formik, onCampaignTypeChange }) => {\n  const theme = useTheme();\n  const { errors, values, touched, getFieldProps, setFieldValue } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Grid container>\n            <Grid item xs={12} md={4}>\n              <TextField\n                select\n                fullWidth\n                size=\"small\"\n                label=\"Select Brand\"\n                placeholder=\"Brand\"\n                {...getFieldProps('brand')}\n                SelectProps={{ native: true }}\n                error={Boolean(touched.brand && errors.brand)}\n                helperText={touched.brand && errors.brand}\n              >\n                <option value=\"\" />\n                {['Adidas', 'Nike'].map((option, index) => (\n                  <option key={option + index} value={option}>\n                    {option}\n                  </option>\n                ))}\n              </TextField>\n            </Grid>\n          </Grid>\n\n          <RadioGroup\n            {...getFieldProps('campaignType')}\n            value={values.campaignType}\n            onChange={(e) => {\n              console.log(e.target.value);\n              setFieldValue('campaignType', e.target.value);\n              onCampaignTypeChange(e.target.value);\n            }}\n          >\n            <Grid container spacing={1.5} direction=\"row\" columns={10}>\n              {CAMPAIGN_TYPES.map((type) => {\n                const isSelected = values.campaignType === type;\n                return (\n                  <Grid item xs={5} md={2} key={type}>\n                    <Card\n                      variant={isSelected ? 'elevation' : 'outlined'}\n                      sx={{\n                        ...(isSelected && {\n                          border: `solid 2px ${theme.palette.primary.main}`,\n                        }),\n                      }}\n                    >\n                      <CardMedia\n                        sx={{ height: 140 }}\n                        image=\"/static/mock-images/products/product_1.jpg\"\n                        title=\"Contemplative Reptile\"\n                      />\n                      <CardContent>{type}</CardContent>\n                      <CardActions>\n                        <FormControlLabel\n                          label=\"\"\n                          value={type}\n                          control={<Radio sx={{ display: 'none' }} />}\n                          sx={{\n                            top: 0,\n                            margin: 0,\n                            width: '100%',\n                            height: '100%',\n                            position: 'absolute',\n                          }}\n                        />\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </RadioGroup>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nCampaignTypeForm.propTypes = {\n  formik: PropTypes.object,\n  onCampaignTypeChange: PropTypes.func,\n};\n\nexport default CampaignTypeForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\nconst TaskAndRewardsForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Task Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Type\"\n                  {...getFieldProps('taskType')}\n                  error={Boolean(touched.taskType && errors.taskType)}\n                  helperText={touched.taskType && errors.taskType}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Total Budget\"\n                    type=\"number\"\n                    {...getFieldProps('totalBudget')}\n                    error={Boolean(touched.totalBudget && errors.totalBudget)}\n                    helperText={touched.totalBudget && errors.totalBudget}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Per User\"\n                    {...getFieldProps('perUser')}\n                    error={Boolean(touched.perUser && errors.perUser)}\n                    helperText={touched.perUser && errors.perUser}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Continue After Budget\"\n                    {...getFieldProps('continueAfterBudget')}\n                    error={Boolean(touched.continueAfterBudget && errors.continueAfterBudget)}\n                    helperText={touched.continueAfterBudget && errors.continueAfterBudget}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps('tier')}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                />\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of public, the task goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nTaskAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default TaskAndRewardsForm;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@material-ui/core/styles';\nimport { DateTimePicker } from '@material-ui/lab';\nimport {\n  Autocomplete,\n  Avatar,\n  Button,\n  Card,\n  Chip,\n  FormHelperText,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n// components\nimport { UploadSingleFile } from '../../upload';\nimport DynamicFormItem from '../../DynamicFormItem';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst TaskDetailForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps, setFieldValue } = formik;\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('headerImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Header Image</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"image/*\"\n              file={values.coverUrl}\n              onDrop={handleCoverDrop}\n              error={Boolean(touched.coverUrl && errors.coverUrl)}\n            />\n            {touched.coverUrl && errors.coverUrl && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.coverUrl && errors.coverUrl}\n              </FormHelperText>\n            )}\n          </Stack>\n\n          <Stack>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <LabelStyle>Bonus Reward & Benefits</LabelStyle>\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                <Button variant=\"contained\">Add New</Button>\n                <Button variant=\"contained\">Select More</Button>\n              </Stack>\n            </Stack>\n            <Stack direction=\"row\" spacing={1}>\n              {[1, 2, 3, 4, 5, 6].map((item, index) => (\n                <Avatar\n                  key={item + index}\n                  alt=\"bonus&rewards\"\n                  src=\"/static/mock-images/products/product_1.jpg\"\n                  sx={{ width: 64, height: 64 }}\n                />\n              ))}\n            </Stack>\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"doList\"\n            render={(arrHelper) => {\n              const value = values.doList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `doList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Do ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"dontList\"\n            render={(arrHelper) => {\n              const value = values.dontList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `dontList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Don't ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"igCaptionQuestions\"\n            render={(arrHelper) => {\n              const value = values.igCaptionQuestions;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `igCaptionQuestions.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Instagram Caption Question ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of photo required\"\n              type=\"number\"\n              {...getFieldProps('noOfPhotoRequired')}\n              error={Boolean(touched.noOfPhotoRequired && errors.noOfPhotoRequired)}\n              helperText={touched.noOfPhotoRequired && errors.noOfPhotoRequired}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of video required\"\n              type=\"number\"\n              {...getFieldProps('noOfVideoRequired')}\n              error={Boolean(touched.noOfVideoRequired && errors.noOfVideoRequired)}\n              helperText={touched.noOfVideoRequired && errors.noOfVideoRequired}\n            />\n          </Stack>\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.hashtags}\n            onChange={(event, newValue) => {\n              setFieldValue('hashtags', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n          />\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.mentions}\n            onChange={(event, newValue) => {\n              setFieldValue('mentions', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Mentions\" />}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nTaskDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default TaskDetailForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\nconst ContestAndRewardsForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Contest Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Contest Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Contest Type\"\n                  {...getFieldProps('contestType')}\n                  error={Boolean(touched.contestType && errors.contestType)}\n                  helperText={touched.contestType && errors.contestType}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Total Budget\"\n                    type=\"number\"\n                    {...getFieldProps('totalBudget')}\n                    error={Boolean(touched.totalBudget && errors.totalBudget)}\n                    helperText={touched.totalBudget && errors.totalBudget}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Winner Token\"\n                    {...getFieldProps('winnerToken')}\n                    error={Boolean(touched.winnerToken && errors.winnerToken)}\n                    helperText={touched.winnerToken && errors.winnerToken}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <Grid container>\n                    <Grid item xs={12} md={4}>\n                      <TextField\n                        fullWidth\n                        size=\"small\"\n                        label=\"Continue After Budget\"\n                        {...getFieldProps('continueAfterBudget')}\n                        error={Boolean(touched.continueAfterBudget && errors.continueAfterBudget)}\n                        helperText={touched.continueAfterBudget && errors.continueAfterBudget}\n                      />\n                    </Grid>\n                  </Grid>\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps('tier')}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                />\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of Public, the contest goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nContestAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default ContestAndRewardsForm;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@material-ui/core/styles';\nimport { DateTimePicker } from '@material-ui/lab';\nimport {\n  Autocomplete,\n  Avatar,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  FormHelperText,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n// components\nimport { UploadSingleFile } from '../../upload';\nimport DynamicFormItem from '../../DynamicFormItem';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst ContestDetailForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps, setFieldValue } = formik;\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('headerImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Header Image</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"image/*\"\n              file={values.headerImage}\n              onDrop={handleCoverDrop}\n              error={Boolean(touched.headerImage && errors.headerImage)}\n            />\n            {touched.headerImage && errors.headerImage && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.headerImage && errors.headerImage}\n              </FormHelperText>\n            )}\n          </Stack>\n\n          <Stack>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <LabelStyle>Bonus Reward & Benefits</LabelStyle>\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                <Button variant=\"contained\">Add New</Button>\n                <Button variant=\"contained\">Select More</Button>\n              </Stack>\n            </Stack>\n            <Stack direction=\"row\" spacing={1}>\n              {[1, 2, 3, 4, 5, 6].map((item, index) => (\n                <Avatar\n                  key={item + index}\n                  alt=\"bonus&rewards\"\n                  src=\"/static/mock-images/products/product_1.jpg\"\n                  sx={{ width: 64, height: 64 }}\n                />\n              ))}\n            </Stack>\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"doList\"\n            render={(arrHelper) => {\n              const value = values.doList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `doList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Do ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"dontList\"\n            render={(arrHelper) => {\n              const value = values.dontList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `dontList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Don't ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"igCaptionQuestions\"\n            render={(arrHelper) => {\n              const value = values.igCaptionQuestions;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `igCaptionQuestions.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Instagram Caption Question ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of photo required\"\n              type=\"number\"\n              {...getFieldProps('noOfPhotoRequired')}\n              error={Boolean(touched.noOfPhotoRequired && errors.noOfPhotoRequired)}\n              helperText={touched.noOfPhotoRequired && errors.noOfPhotoRequired}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of video required\"\n              type=\"number\"\n              {...getFieldProps('noOfVideoRequired')}\n              error={Boolean(touched.noOfVideoRequired && errors.noOfVideoRequired)}\n              helperText={touched.noOfVideoRequired && errors.noOfVideoRequired}\n            />\n          </Stack>\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.hashtags}\n            onChange={(event, newValue) => {\n              setFieldValue('hashtags', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n          />\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.mentions}\n            onChange={(event, newValue) => {\n              setFieldValue('mentions', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Mentions\" />}\n          />\n\n          <Card>\n            <CardHeader title=\"Contest Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Start date\"\n                  value={values.contestStartDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('contestStartDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.contestStartDate && errors.contestStartDate)}\n                      helperText={touched.contestStartDate && errors.contestStartDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.contestEndDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('contestEndDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.contestEndDate && errors.contestEndDate)}\n                      helperText={touched.contestEndDate && errors.contestEndDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Voting Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Start date\"\n                  value={values.votingStartDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('votingStartDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.votingStartDate && errors.votingStartDate)}\n                      helperText={touched.votingStartDate && errors.votingStartDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.votingEndDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('votingEndDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.votingEndDate && errors.votingEndDate)}\n                      helperText={touched.votingEndDate && errors.votingEndDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Winner Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Winner date\"\n                  value={values.winnerDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('winnerDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.winnerDate && errors.winnerDate)}\n                      helperText={touched.winnerDate && errors.winnerDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nContestDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default ContestDetailForm;\n","import PropTypes from 'prop-types';\nimport { FieldArray, Form, FormikProvider, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n\nimport { Icon } from '@iconify/react';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@material-ui/icons';\nimport { LoadingButton, DateTimePicker } from '@material-ui/lab';\nimport { Box, Button, Card, CardContent, CardHeader, Grid, IconButton, Stack, TextField } from '@material-ui/core';\n\n// ----------------------------------------------------------------------\n\nconst initialQuestion = {\n  title: '',\n  options: [''],\n};\n\nconst SurveyAndRewardsForm = ({ formik }) => {\n  const { errors, values, touched, setFieldValue, getFieldProps } = formik;\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Name\"\n              {...getFieldProps('name')}\n              error={Boolean(touched.name && errors.name)}\n              helperText={touched.name && errors.name}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Percentage Color\"\n              {...getFieldProps('percentageColor')}\n              error={Boolean(touched.percentageColor && errors.percentageColor)}\n              helperText={touched.percentageColor && errors.percentageColor}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Star Per User\"\n              type=\"number\"\n              {...getFieldProps('starPerUser')}\n              error={Boolean(touched.starPerUser && errors.starPerUser)}\n              helperText={touched.starPerUser && errors.starPerUser}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"surveyQuestions\"\n            render={(questionArrayHelpers) => (\n              <Card>\n                <CardHeader\n                  title=\"Questions\"\n                  action={\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<Icon icon={plusFill} />}\n                      onClick={() => questionArrayHelpers.push(initialQuestion)}\n                    >\n                      Add New\n                    </Button>\n                  }\n                />\n                <CardContent>\n                  <Stack spacing={2}>\n                    {values.surveyQuestions.map((question, questionIndex) => {\n                      console.log('question index: ', questionIndex);\n                      return (\n                        <Card key={questionIndex}>\n                          <CardHeader\n                            title={`Question ${questionIndex + 1}`}\n                            titleTypographyProps={{ variant: 'h8' }}\n                          />\n                          <CardContent>\n                            <Stack spacing={1}>\n                              <TextField\n                                fullWidth\n                                size=\"small\"\n                                label=\"Title\"\n                                {...getFieldProps(`surveyQuestions.${questionIndex}.title`)}\n                                error={Boolean(\n                                  getIn(touched, `surveyQuestions.${questionIndex}.title`) &&\n                                    getIn(errors, `surveyQuestions.${questionIndex}.title`)\n                                )}\n                                helperText={\n                                  getIn(touched, `surveyQuestions.${questionIndex}.title`) &&\n                                  getIn(errors, `surveyQuestions.${questionIndex}.title`)\n                                }\n                              />\n                              <FieldArray\n                                name={`surveyQuestions.${questionIndex}.options`}\n                                render={(optArrayHelpers) => (\n                                  <>\n                                    {values.surveyQuestions[questionIndex].options.map((option, optionIndex) => {\n                                      const optionFieldName = `surveyQuestions.${questionIndex}.options.${optionIndex}`;\n                                      return (\n                                        <Stack key={optionIndex} direction=\"row\" spacing={1}>\n                                          <TextField\n                                            fullWidth\n                                            size=\"small\"\n                                            label={`Option ${optionIndex + 1}`}\n                                            {...getFieldProps(optionFieldName)}\n                                            error={Boolean(\n                                              getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                            )}\n                                            helperText={\n                                              getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                            }\n                                          />\n                                          <IconButton\n                                            color=\"error\"\n                                            aria-label=\"delete\"\n                                            onClick={() => optArrayHelpers.remove(optionIndex)}\n                                          >\n                                            <DeleteIcon />\n                                          </IconButton>\n                                        </Stack>\n                                      );\n                                    })}\n                                    <IconButton\n                                      color=\"primary\"\n                                      aria-label=\"plus\"\n                                      onClick={() => optArrayHelpers.push('')}\n                                    >\n                                      <AddIcon />\n                                    </IconButton>\n                                  </>\n                                )}\n                              />\n                            </Stack>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </Stack>\n                </CardContent>\n              </Card>\n            )}\n          />\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nSurveyAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default SurveyAndRewardsForm;\n","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n\n// material\nimport { LoadingButton } from '@material-ui/lab';\nimport { Box, Card, Grid, Stack, Button } from '@material-ui/core';\n// paths\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// validations\nimport {\n  CampaignTypeSchema,\n  TaskAndRewardsSchema,\n  TaskDetailSchema,\n  ContestAndRewardsSchema,\n  ContestDetailSchema,\n  SurveyAndRewardsSchema,\n} from './validations';\n// components\nimport Steps from '../Steps';\nimport CampaignTypeForm from './CampaignTypeForm';\nimport TaskAndRewardsForm from './task/TaskAndRewardsForm';\nimport TaskDetailForm from './task/TaskDetailForm';\nimport ContestAndRewardsForm from './contest/ContestAndRewardsForm';\nimport ContestDetailForm from './contest/ContestDetailForm';\nimport SurveyAndRewardsForm from './survey/SurveyAndRewardsForm';\n\n// ----------------------------------------------------------------------\n\nconst STEPS = ['Campaign Type', 'Task & Rewards', 'Task Detail'];\nconst initialSurveyQuestion = {\n  title: '',\n  options: [''],\n};\n\nfunction CampaignNewForm({ isEdit, currentCampaign }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n  const [activeStep, setActiveStep] = useState(0);\n  const [campaignType, setCampaignType] = useState('Task');\n\n  // const VALIDATION_SCHEMAS = [CampaignTypeSchema, TaskAndRewardsSchema, TaskDetailSchema];\n\n  const VALIDATION_SCHEMAS = {\n    0: {\n      Task: CampaignTypeSchema,\n      Contest: CampaignTypeSchema,\n      Survey: CampaignTypeSchema,\n      'Watch Ad': CampaignTypeSchema,\n      Campaign: CampaignTypeSchema,\n    },\n    1: {\n      Task: TaskAndRewardsSchema,\n      Contest: ContestAndRewardsSchema,\n      Survey: SurveyAndRewardsSchema,\n      'Watch Ad': Yup.object(),\n      Campaign: Yup.object(),\n    },\n    2: {\n      Task: TaskDetailSchema,\n      Contest: ContestDetailSchema,\n      Survey: Yup.object(),\n      'Watch Ad': Yup.object(),\n      Campaign: Yup.object(),\n    },\n  };\n\n  const isLastStep = () => activeStep === STEPS.length - 1;\n\n  const handlePrevStep = () => setActiveStep((prev) => prev - 1);\n\n  const handleNextStep = () => setActiveStep((prev) => prev + 1);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      brand: currentCampaign?.brand || '',\n      campaignType: currentCampaign?.campaignType || 'Task',\n      name: currentCampaign?.name || '',\n      taskType: currentCampaign?.taskType || '',\n      totalBudget: currentCampaign?.totalBudget || undefined,\n      perUser: currentCampaign?.perUser || '',\n      starPerUser: currentCampaign?.starPerUser || undefined,\n      continueAfterBudget: currentCampaign?.continueAfterBudget || '',\n      tier: currentCampaign?.tier || '',\n      isPublic: currentCampaign?.isPublic || false,\n      headerImage: currentCampaign?.headerImage || undefined,\n      doList: currentCampaign?.doList || [''],\n      dontList: currentCampaign?.dontList || [''],\n      igCaptionQuestions: currentCampaign?.igCaptionQuestions || [''],\n      noOfPhotoRequired: currentCampaign?.noOfPhotoRequired || undefined,\n      noOfVideoRequired: currentCampaign?.noOfVideoRequired || undefined,\n      hashtags: currentCampaign?.hashtags || [],\n      mentions: currentCampaign?.mentions || [],\n      startDate: currentCampaign?.startDate ? new Date(currentCampaign.startDate) : null,\n      endDate: currentCampaign?.endDate ? new Date(currentCampaign.endDate) : null,\n      surveyQuestions: currentCampaign?.surveyQuestions || [initialSurveyQuestion],\n      percentageColor: currentCampaign?.percentageColor || '',\n    },\n    validationSchema: VALIDATION_SCHEMAS[activeStep][campaignType],\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      if (isLastStep()) {\n        try {\n          alert(JSON.stringify(values));\n          resetForm();\n          setSubmitting(false);\n          enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n          navigate(PATH_DASHBOARD.task.list);\n        } catch (error) {\n          console.error(error);\n          setSubmitting(false);\n          setErrors(error);\n        }\n      } else {\n        handleNextStep();\n      }\n    },\n  });\n\n  const { errors, values, handleSubmit, isSubmitting } = formik;\n\n  const renderForm = () => {\n    const forms = {\n      0: {\n        Task: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Contest: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Survey: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        'Watch Ad': <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Campaign: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n      },\n      1: {\n        Task: <TaskAndRewardsForm formik={formik} />,\n        Contest: <ContestAndRewardsForm formik={formik} />,\n        Survey: <SurveyAndRewardsForm formik={formik} />,\n        'Watch Ad': <div>Watch ad Form</div>,\n        Campaign: <div>Campaign Form</div>,\n      },\n      2: {\n        Task: <TaskDetailForm formik={formik} />,\n        Contest: <ContestDetailForm formik={formik} />,\n        Survey: <div>Survey Detail Form</div>,\n        'Watch Ad': <div>Watch ad Form</div>,\n        Campaign: <div>Watch ad Form</div>,\n      },\n    };\n    return forms[activeStep][campaignType];\n  };\n\n  console.log('Active Step: ', activeStep);\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container justifyContent=\"center\">\n          <Grid item xs={12} md={8} sx={{ mb: 5 }}>\n            <Steps steps={STEPS} activeStep={activeStep} />\n          </Grid>\n        </Grid>\n\n        <Card sx={{ p: 3 }}>\n          <Stack spacing={3}>\n            {renderForm()}\n            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n              {activeStep !== 0 && (\n                <Button\n                  sx={{ mr: 2 }}\n                  variant=\"outlined\"\n                  onClick={isLastStep() ? () => console.log('Draft Clicked') : handlePrevStep}\n                >\n                  {isLastStep() ? 'Draft' : 'Back'}\n                </Button>\n              )}\n              <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                {isLastStep() ? 'Setup Complete' : 'Next'}\n              </LoadingButton>\n            </Box>\n          </Stack>\n        </Card>\n      </Form>\n    </FormikProvider>\n  );\n}\n\nCampaignNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentCampaign: PropTypes.object,\n};\n\nexport default CampaignNewForm;\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport CampaignNewForm from '../components/campaign/CampaignNewForm';\n\n// ----------------------------------------------------------------------\n\nfunction CampaignCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  const currentCampaign = {};\n\n  return (\n    <Page title=\"Campaign: Create a new campaign\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Create Campaign' : 'Edit Campaign'}\n          links={[\n            { name: 'Campaign', href: PATH_DASHBOARD.campaign.list.all },\n            { name: !isEdit ? 'Create Campaign' : name },\n          ]}\n        />\n        <CampaignNewForm isEdit={isEdit} currentCampaign={currentCampaign} />\n      </Container>\n    </Page>\n  );\n}\n\nexport default CampaignCreate;\n","import { replace } from 'lodash';\nimport numeral from 'numeral';\n\n// ----------------------------------------------------------------------\n\nexport function fCurrency(number) {\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\n}\n\nexport function fPercent(number) {\n  return numeral(number / 100).format('0.0%');\n}\n\nexport function fNumber(number) {\n  return numeral(number).format();\n}\n\nexport function fShortenNumber(number) {\n  return replace(numeral(number).format('0.00a'), '.00', '');\n}\n\nexport function fData(number) {\n  return numeral(number).format('0.0 b');\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@material-ui/core';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","import PropTypes from 'prop-types';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@material-ui/icons';\nimport { IconButton, Stack, TextField } from '@material-ui/core';\n\nconst DynamicFormItem = ({ label, fieldProps, error, helperText, isLastItem, onAddClick, onRemoveClick }) => (\n  <Stack direction=\"row\" spacing={1}>\n    <TextField fullWidth size=\"small\" label={label} {...fieldProps} error={error} helperText={helperText} />\n    {isLastItem ? (\n      <IconButton color=\"primary\" onClick={onAddClick}>\n        <AddIcon />\n      </IconButton>\n    ) : (\n      <IconButton color=\"error\" onClick={onRemoveClick}>\n        <DeleteIcon />\n      </IconButton>\n    )}\n  </Stack>\n);\n\nDynamicFormItem.propTypes = {\n  label: PropTypes.string,\n  fieldProps: PropTypes.object,\n  error: PropTypes.bool,\n  helperText: PropTypes.string,\n  isLastItem: PropTypes.bool,\n  onAddClick: PropTypes.func,\n  onRemoveClick: PropTypes.func,\n};\n\nexport default DynamicFormItem;\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { useDropzone } from 'react-dropzone';\nimport fileFill from '@iconify/icons-eva/file-fill';\nimport closeFill from '@iconify/icons-eva/close-fill';\nimport { motion, AnimatePresence } from 'framer-motion';\n// material\nimport { alpha, styled } from '@material-ui/core/styles';\nimport {\n  Box,\n  List,\n  Stack,\n  Paper,\n  Button,\n  ListItem,\n  Typography,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n} from '@material-ui/core';\n// utils\nimport { fData } from '../../utils/formatNumber';\n//\nimport { MIconButton } from '../@material-extend';\nimport { varFadeInRight } from '../animate';\nimport { UploadIllustration } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst DropZoneStyle = styled('div')(({ theme }) => ({\n  outline: 'none',\n  display: 'flex',\n  textAlign: 'center',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(5, 1),\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: theme.palette.background.neutral,\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\n  '&:hover': { opacity: 0.72, cursor: 'pointer' },\n  [theme.breakpoints.up('md')]: { textAlign: 'left', flexDirection: 'row' },\n}));\n\n// ----------------------------------------------------------------------\n\nUploadMultiFile.propTypes = {\n  error: PropTypes.bool,\n  showPreview: PropTypes.bool,\n  files: PropTypes.array,\n  onRemove: PropTypes.func,\n  onRemoveAll: PropTypes.func,\n  sx: PropTypes.object,\n};\n\nexport default function UploadMultiFile({ error, showPreview = false, files, onRemove, onRemoveAll, sx, ...other }) {\n  const hasFile = files.length > 0;\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    ...other,\n  });\n\n  const ShowRejectionItems = () => (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        py: 1,\n        px: 2,\n        mt: 3,\n        borderColor: 'error.light',\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n      }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = file;\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {fData(size)}\n            </Typography>\n            {errors.map((e) => (\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\n                - {e.message}\n              </Typography>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <DropZoneStyle\n        {...getRootProps()}\n        sx={{\n          ...(isDragActive && { opacity: 0.72 }),\n          ...((isDragReject || error) && {\n            color: 'error.main',\n            borderColor: 'error.light',\n            bgcolor: 'error.lighter',\n          }),\n        }}\n      >\n        <input {...getInputProps()} />\n\n        <UploadIllustration sx={{ width: 220 }} />\n\n        <Box sx={{ p: 3, ml: { md: 2 } }}>\n          <Typography gutterBottom variant=\"h5\">\n            Drop or Select file\n          </Typography>\n\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n            Drop files here or click&nbsp;\n            <Typography variant=\"body2\" component=\"span\" sx={{ color: 'primary.main', textDecoration: 'underline' }}>\n              browse\n            </Typography>\n            &nbsp;thorough your machine\n          </Typography>\n        </Box>\n      </DropZoneStyle>\n\n      {fileRejections.length > 0 && <ShowRejectionItems />}\n\n      <List disablePadding sx={{ ...(hasFile && { my: 3 }) }}>\n        <AnimatePresence>\n          {files.map((file) => {\n            const { name, size, preview } = file;\n            const key = isString(file) ? file : name;\n\n            if (showPreview) {\n              return (\n                <ListItem\n                  key={key}\n                  component={motion.div}\n                  {...varFadeInRight}\n                  sx={{\n                    p: 0,\n                    m: 0.5,\n                    width: 80,\n                    height: 80,\n                    borderRadius: 1.5,\n                    overflow: 'hidden',\n                    position: 'relative',\n                    display: 'inline-flex',\n                  }}\n                >\n                  <Paper\n                    variant=\"outlined\"\n                    component=\"img\"\n                    src={isString(file) ? file : preview}\n                    sx={{ width: '100%', height: '100%', objectFit: 'cover', position: 'absolute' }}\n                  />\n                  <Box sx={{ top: 6, right: 6, position: 'absolute' }}>\n                    <MIconButton\n                      size=\"small\"\n                      onClick={() => onRemove(file)}\n                      sx={{\n                        p: '2px',\n                        color: 'common.white',\n                        bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72),\n                        '&:hover': {\n                          bgcolor: (theme) => alpha(theme.palette.grey[900], 0.48),\n                        },\n                      }}\n                    >\n                      <Icon icon={closeFill} />\n                    </MIconButton>\n                  </Box>\n                </ListItem>\n              );\n            }\n\n            return (\n              <ListItem\n                key={key}\n                component={motion.div}\n                {...varFadeInRight}\n                sx={{\n                  my: 1,\n                  py: 0.75,\n                  px: 2,\n                  borderRadius: 1,\n                  border: (theme) => `solid 1px ${theme.palette.divider}`,\n                  bgcolor: 'background.paper',\n                }}\n              >\n                <ListItemIcon>\n                  <Icon icon={fileFill} width={28} height={28} />\n                </ListItemIcon>\n                <ListItemText\n                  primary={isString(file) ? file : name}\n                  secondary={isString(file) ? '' : fData(size)}\n                  primaryTypographyProps={{ variant: 'subtitle2' }}\n                  secondaryTypographyProps={{ variant: 'caption' }}\n                />\n                <ListItemSecondaryAction>\n                  <MIconButton edge=\"end\" size=\"small\" onClick={() => onRemove(file)}>\n                    <Icon icon={closeFill} />\n                  </MIconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            );\n          })}\n        </AnimatePresence>\n      </List>\n\n      {hasFile && (\n        <Stack direction=\"row\" justifyContent=\"flex-end\">\n          <Button onClick={onRemoveAll} sx={{ mr: 1.5 }}>\n            Remove all\n          </Button>\n          <Button variant=\"contained\">Upload files</Button>\n        </Stack>\n      )}\n    </Box>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\n// material\nimport { alpha, styled } from '@material-ui/core/styles';\nimport { Paper, Box, Typography } from '@material-ui/core';\n// utils\nimport { fData } from '../../utils/formatNumber';\n//\nimport { UploadIllustration } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst DropZoneStyle = styled('div')(({ theme }) => ({\n  outline: 'none',\n  display: 'flex',\n  overflow: 'hidden',\n  textAlign: 'center',\n  position: 'relative',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(5, 0),\n  borderRadius: theme.shape.borderRadius,\n  transition: theme.transitions.create('padding'),\n  backgroundColor: theme.palette.background.neutral,\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\n  '&:hover': {\n    opacity: 0.72,\n    cursor: 'pointer',\n  },\n  [theme.breakpoints.up('md')]: { textAlign: 'left', flexDirection: 'row' },\n}));\n\n// ----------------------------------------------------------------------\n\nUploadSingleFile.propTypes = {\n  error: PropTypes.bool,\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  sx: PropTypes.object,\n};\n\nexport default function UploadSingleFile({ error, file, sx, ...other }) {\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    multiple: false,\n    ...other,\n  });\n\n  const ShowRejectionItems = () => (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        py: 1,\n        px: 2,\n        mt: 3,\n        borderColor: 'error.light',\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n      }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = file;\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {fData(size)}\n            </Typography>\n            {errors.map((e) => (\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\n                - {e.message}\n              </Typography>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <DropZoneStyle\n        {...getRootProps()}\n        sx={{\n          ...(isDragActive && { opacity: 0.72 }),\n          ...((isDragReject || error) && {\n            color: 'error.main',\n            borderColor: 'error.light',\n            bgcolor: 'error.lighter',\n          }),\n          ...(file && { padding: '12% 0' }),\n        }}\n      >\n        <input {...getInputProps()} />\n\n        <UploadIllustration sx={{ width: 220 }} />\n\n        <Box sx={{ p: 3, ml: { md: 2 } }}>\n          <Typography gutterBottom variant=\"h5\">\n            Drop or Select file\n          </Typography>\n\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n            Drop files here or click&nbsp;\n            <Typography variant=\"body2\" component=\"span\" sx={{ color: 'primary.main', textDecoration: 'underline' }}>\n              browse\n            </Typography>\n            &nbsp;thorough your machine\n          </Typography>\n        </Box>\n\n        {file && (\n          <Box\n            component=\"img\"\n            alt=\"file preview\"\n            src={isString(file) ? file : file.preview}\n            sx={{\n              top: 8,\n              borderRadius: 1,\n              objectFit: 'cover',\n              position: 'absolute',\n              width: 'calc(100% - 16px)',\n              height: 'calc(100% - 16px)',\n            }}\n          />\n        )}\n      </DropZoneStyle>\n\n      {fileRejections.length > 0 && <ShowRejectionItems />}\n    </Box>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { useDropzone } from 'react-dropzone';\nimport roundAddAPhoto from '@iconify/icons-ic/round-add-a-photo';\n// material\nimport { alpha, styled } from '@material-ui/core/styles';\nimport { Box, Typography, Paper } from '@material-ui/core';\n// utils\nimport { fData } from '../../utils/formatNumber';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  width: 144,\n  height: 144,\n  margin: 'auto',\n  borderRadius: '50%',\n  padding: theme.spacing(1),\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\n}));\n\nconst DropZoneStyle = styled('div')({\n  zIndex: 0,\n  width: '100%',\n  height: '100%',\n  outline: 'none',\n  display: 'flex',\n  overflow: 'hidden',\n  borderRadius: '50%',\n  position: 'relative',\n  alignItems: 'center',\n  justifyContent: 'center',\n  '& > *': { width: '100%', height: '100%' },\n  '&:hover': {\n    cursor: 'pointer',\n    '& .placeholder': {\n      zIndex: 9,\n    },\n  },\n});\n\nconst PlaceholderStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  position: 'absolute',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  color: theme.palette.text.secondary,\n  backgroundColor: theme.palette.background.neutral,\n  transition: theme.transitions.create('opacity', {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter,\n  }),\n  '&:hover': { opacity: 0.72 },\n}));\n\n// ----------------------------------------------------------------------\n\nUploadAvatar.propTypes = {\n  error: PropTypes.bool,\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  caption: PropTypes.node,\n  sx: PropTypes.object,\n};\n\nexport default function UploadAvatar({ error, file, caption, sx, ...other }) {\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    multiple: false,\n    ...other,\n  });\n\n  const ShowRejectionItems = () => (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        py: 1,\n        px: 2,\n        my: 2,\n        borderColor: 'error.light',\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n      }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = file;\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {fData(size)}\n            </Typography>\n            {errors.map((e) => (\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\n                - {e.message}\n              </Typography>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n\n  return (\n    <>\n      <RootStyle sx={sx}>\n        <DropZoneStyle\n          {...getRootProps()}\n          sx={{\n            ...(isDragActive && { opacity: 0.72 }),\n            ...((isDragReject || error) && {\n              color: 'error.main',\n              borderColor: 'error.light',\n              bgcolor: 'error.lighter',\n            }),\n          }}\n        >\n          <input {...getInputProps()} />\n\n          {file && (\n            <Box\n              component=\"img\"\n              alt=\"avatar\"\n              src={isString(file) ? file : file.preview}\n              sx={{ zIndex: 8, objectFit: 'cover' }}\n            />\n          )}\n\n          <PlaceholderStyle\n            className=\"placeholder\"\n            sx={{\n              ...(file && {\n                opacity: 0,\n                color: 'common.white',\n                bgcolor: 'grey.900',\n                '&:hover': { opacity: 0.72 },\n              }),\n            }}\n          >\n            <Box component={Icon} icon={roundAddAPhoto} sx={{ width: 24, height: 24, mb: 1 }} />\n            <Typography variant=\"caption\">{file ? 'Update photo' : 'Upload photo'}</Typography>\n          </PlaceholderStyle>\n        </DropZoneStyle>\n      </RootStyle>\n\n      {caption}\n\n      {fileRejections.length > 0 && <ShowRejectionItems />}\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport CheckmarkFill from '@iconify/icons-eva/checkmark-fill';\nimport { withStyles } from '@material-ui/styles';\nimport { Box, Step, StepConnector, StepLabel, Stepper } from '@material-ui/core';\n\nconst QontoConnector = withStyles((theme) => ({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 20px)',\n    right: 'calc(50% + 20px)',\n  },\n  active: {\n    '& $line': { borderColor: theme.palette.primary.main },\n  },\n  completed: {\n    '& $line': { borderColor: theme.palette.primary.main },\n  },\n  line: {\n    borderTopWidth: 2,\n    borderColor: theme.palette.divider,\n  },\n}))(StepConnector);\n\nfunction QontoStepIcon({ active, completed }) {\n  return (\n    <Box\n      sx={{\n        zIndex: 9,\n        width: 24,\n        height: 24,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: active ? 'primary.main' : 'divider',\n        bgcolor: 'background.default',\n      }}\n    >\n      {completed ? (\n        <Box component={Icon} icon={CheckmarkFill} sx={{ zIndex: 1, width: 20, height: 20, color: 'primary.main' }} />\n      ) : (\n        <Box\n          sx={{\n            width: 8,\n            height: 8,\n            borderRadius: '50%',\n            backgroundColor: 'currentColor',\n          }}\n        />\n      )}\n    </Box>\n  );\n}\n\nQontoStepIcon.propTypes = {\n  active: PropTypes.bool,\n  completed: PropTypes.bool,\n};\n\nconst Steps = ({ steps, activeStep }) => (\n  <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\n    {steps.map((label) => (\n      <Step key={label}>\n        <StepLabel\n          StepIconComponent={QontoStepIcon}\n          sx={{\n            '& .MuiStepLabel-label': {\n              typography: 'subtitle2',\n              color: 'text.disabled',\n            },\n          }}\n        >\n          {label}\n        </StepLabel>\n      </Step>\n    ))}\n  </Stepper>\n);\n\nSteps.propTypes = {\n  steps: PropTypes.array,\n  activeStep: PropTypes.number,\n};\n\nexport default Steps;\n"],"sourceRoot":""}