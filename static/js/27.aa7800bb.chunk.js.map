{"version":3,"sources":["components/bonus/BonusParticipantsTable.js","components/bonus/BonusSetTicketRules.js","pages/BonusSetView.js","components/HeaderBreadcrumbs.js","components/bonus/BonusWinnersTable.js","components/bonus/BonusListTable.js","components/bonus/BonusSetListTable.js"],"names":["TABLE_HEAD","id","label","alignRight","winnerList","Array","map","_","index","userId","name","faker","internet","userName","tickets","datatype","number","min","max","precision","bonusWon","acceptanceState","sample","BonusWinnersTable","theme","useTheme","Grid","container","spacing","sx","mt","item","xs","Typography","variant","Scrollbar","TableContainer","minWidth","Table","TableHead","TableRow","headCell","TableCell","align","TableBody","row","BonusSetTicketRules","useState","ticketRules","setTicketRules","Autocomplete","fullWidth","multiple","disableCloseOnSelect","size","value","onChange","event","newValue","options","renderInput","params","TextField","BonusSetView","themeStretch","useSettings","useParams","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","bonus","listBonusSet","BonusSetListTable","bonusList","brand","bonuses","endDate","Date","toDateString","averageValueOfSingleBonus","valueOfAllBonuses","winnerNumber","bonusTasksCompleted","numberOfParticipants","numberOfTickets","averageNumberOfUserTickets","Box","mb","sm","md","lg","Card","CardHeader","titleTypographyProps","textAlign","CardContent","Stack","direction","justifyContent","height","BonusListTable","availableQuantity","BonusParticipantsTable","action","moreLink","other","alignItems","flexGrow","gutterBottom","flexShrink","isString","target","noWrap","display","bonusName","length"],"mappings":"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","file":"static/js/27.aa7800bb.chunk.js","sourcesContent":["import faker from 'faker';\nimport { sample } from 'lodash';\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'userId', label: 'User Id', alignRight: false },\n  { id: 'tickets', label: '# of tickets', alignRight: false },\n  { id: 'bonusWon', label: 'Bonus Won', alignRight: false },\n  { id: 'acceptanceState', label: 'Acceptance State', alignRight: false },\n];\n\nconst winnerList = [...Array(10)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    userId: `id ${setIndex}`,\n    name: faker.internet.userName(),\n    tickets: faker.datatype.number({ min: 1000, max: 10000, precision: 1 }),\n    bonusWon: '100 shoes',\n    acceptanceState: sample([\n      'accepted bonus ',\n      'not accepted bonus',\n      'accepted task not completed',\n      'accepted task completed',\n    ]),\n  };\n});\n\nconst BonusWinnersTable = () => {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Participant List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {winnerList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.userId}</TableCell>\n                    <TableCell>{row.tickets}</TableCell>\n                    <TableCell>{row.bonusWon}</TableCell>\n                    <TableCell>{row.acceptanceState}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BonusWinnersTable;\n","import React, { useState } from 'react';\n// material\nimport { TextField, Autocomplete } from '@mui/material';\n\nexport default function BonusSetTicketRules() {\n  const [ticketRules, setTicketRules] = useState(['Default Followers', 'Default Social']);\n\n  return (\n    <Autocomplete\n      fullWidth\n      multiple\n      disableCloseOnSelect\n      size=\"small\"\n      value={ticketRules}\n      onChange={(event, newValue) => {\n        setTicketRules(newValue);\n      }}\n      options={['Default Historical Data', 'Default App Level', 'Default Followers', 'Default Social', 'Historical V2']}\n      renderInput={(params) => <TextField {...params} />}\n    />\n  );\n}\n","import { useParams } from 'react-router-dom';\n// material\nimport { Box, Card, CardContent, CardHeader, Container, Grid, Stack, Typography } from '@mui/material';\n\nimport { PATH_DASHBOARD } from '../routes/paths';\n\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport BonusSetListTable from '../components/bonus/BonusSetListTable';\nimport BonusWinnersTable from '../components/bonus/BonusWinnersTable';\nimport BonusParticipantsTable from '../components/bonus/BonusParticipantsTable';\nimport BonusListTable from '../components/bonus/BonusListTable';\nimport BonusSetTicketRules from '../components/bonus/BonusSetTicketRules';\n\nexport default function BonusSetView() {\n  const { themeStretch } = useSettings();\n  const { name } = useParams();\n\n  // TODO: will be updated with bonusSet\n  // const currentBonusSet = {};\n\n  return (\n    <Page title=\"Bonus Set: View Bonus Set\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={name}\n          links={[{ name: 'Bonus Set', href: PATH_DASHBOARD.bonus.listBonusSet }, { name }]}\n        />\n\n        <BonusSetListTable\n          bonusList={[\n            {\n              name: 'Set 1',\n              brand: 'Riddim',\n              bonuses: ['Bonus 1', 'Bonus 2', 'Bonus 3'],\n              endDate: new Date().toDateString(),\n              ticketRules: ['Default Historical Data', 'Default Followers'],\n              averageValueOfSingleBonus: 200,\n              valueOfAllBonuses: 2000,\n              winnerNumber: 10,\n              bonusTasksCompleted: 60,\n              numberOfParticipants: 200,\n              numberOfTickets: 2000,\n              averageNumberOfUserTickets: 150,\n            },\n          ]}\n        />\n        <Box sx={{ mb: (theme) => theme.spacing(8), mt: (theme) => theme.spacing(8) }}>\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>\n            Ticket Rules\n          </Typography>\n          <BonusSetTicketRules />\n        </Box>\n\n        <Grid container spacing={2}>\n          <Grid item sm={12} md={4} lg={3}>\n            <Card>\n              <CardHeader title=\"Followers on Riddim\" titleTypographyProps={{ textAlign: 'center' }} />\n              <CardContent>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>100-5k</Typography>\n                  <Typography>x1 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>5k-50k</Typography>\n                  <Typography>x2 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>50k-500k</Typography>\n                  <Typography>x3 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>500k-2mil</Typography>\n                  <Typography>x4 tickets</Typography>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item sm={12} md={4} lg={3}>\n            <Card>\n              <CardHeader title=\"App Level\" titleTypographyProps={{ textAlign: 'center' }} />\n              <CardContent>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 0-5</Typography>\n                  <Typography>x1 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 6-10</Typography>\n                  <Typography>x2 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 11-20</Typography>\n                  <Typography>x3 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 21-25</Typography>\n                  <Typography>x4 tickets</Typography>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ height: 720, mt: (theme) => theme.spacing(8) }}>\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>\n            Bonuses of this set\n          </Typography>\n          <BonusListTable\n            bonusList={[\n              {\n                name: 'Bonus 1',\n                availableQuantity: 200,\n                brand: 'Riddim',\n                value: '100',\n              },\n              {\n                name: 'Bonus 2',\n                availableQuantity: 15,\n                brand: 'Riddim',\n                value: '250',\n              },\n              {\n                name: 'Bonus 3',\n                availableQuantity: 100,\n                brand: 'Riddim',\n                value: '75',\n              },\n            ]}\n          />\n        </Box>\n\n        <Box sx={{ height: 720, mt: (theme) => theme.spacing(8) }}>\n          <BonusParticipantsTable />\n        </Box>\n\n        <Box sx={{ height: 720, mt: (theme) => theme.spacing(8) }}>\n          <BonusWinnersTable />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","import faker from 'faker';\nimport { sample } from 'lodash';\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'userId', label: 'User Id', alignRight: false },\n  { id: 'tickets', label: '# of tickets', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'bonusName', label: 'Bonus Name', alignRight: false },\n  { id: 'acceptanceState', label: 'Acceptance State', alignRight: false },\n];\n\nconst winnerList = [...Array(3)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    userId: `id ${setIndex}`,\n    name: faker.internet.userName(),\n    tickets: faker.datatype.number({ min: 1000, max: 10000, precision: 1 }),\n    brand: 'Brand 1',\n    bonusName: '100 shoes',\n    acceptanceState: sample([\n      'accepted bonus ',\n      'not accepted bonus',\n      'accepted task not completed',\n      'accepted task completed',\n    ]),\n  };\n});\n\nconst BonusWinnersTable = () => {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Winner List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {winnerList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.userId}</TableCell>\n                    <TableCell>{row.tickets}</TableCell>\n                    <TableCell>{row.brand}</TableCell>\n                    <TableCell>{row.bonusName}</TableCell>\n                    <TableCell>{row.acceptanceState}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BonusWinnersTable;\n","import PropTypes from 'prop-types';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'availableQuantity', label: 'Available Quantity', alignRight: false },\n  { id: 'value', label: 'Value ($)', alignRight: false },\n];\n\nBonusListTable.propTypes = {\n  bonusList: PropTypes.array,\n};\n\nfunction BonusListTable({ bonusList = [] }) {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800 }}>\n        <Table aria-label=\"bonus table\">\n          <TableHead>\n            <TableRow>\n              {TABLE_HEAD.map((headCell) => (\n                <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                  {headCell.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {bonusList.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.brand}</TableCell>\n                <TableCell>{row.availableQuantity}</TableCell>\n                <TableCell>{row.value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n\nexport default BonusListTable;\n","import PropTypes from 'prop-types';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'endDate', label: 'End Date', alignRight: false },\n  { id: 'numberOfBonuses', label: 'Number of bonuses', alignRight: false },\n  { id: 'averageValueOfSingleBonus', label: 'Average $ of a single bonus', alignRight: false },\n  { id: 'valueOfAllBonuses', label: 'Value of all bonuses', alignRight: false },\n  { id: 'winnerNumber', label: 'Winner Number', alignRight: false },\n  { id: 'bonusTasksCompleted', label: 'Bonus Tasks Completed (%)', alignRight: false },\n  { id: 'numberOfParticipants', label: '# of participants', alignRight: false },\n  { id: 'numberOfTickets', label: '# of tickets', alignRight: false },\n  { id: 'averageNumberOfUserTickets', label: 'Average # of user tickets', alignRight: false },\n];\n\nBonusSetListTable.propTypes = {\n  bonusList: PropTypes.array,\n};\n\nfunction BonusSetListTable({ bonusList = [] }) {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800 }}>\n        <Table aria-label=\"bonus table\">\n          <TableHead>\n            <TableRow>\n              {TABLE_HEAD.map((headCell) => (\n                <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                  {headCell.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {bonusList.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.brand}</TableCell>\n                <TableCell>{row.endDate}</TableCell>\n                <TableCell>{row.bonuses.length}</TableCell>\n                <TableCell>{row.averageValueOfSingleBonus}</TableCell>\n                <TableCell>{row.valueOfAllBonuses}</TableCell>\n                <TableCell>{row.winnerNumber}</TableCell>\n                <TableCell>{row.bonusTasksCompleted}</TableCell>\n                <TableCell>{row.numberOfParticipants}</TableCell>\n                <TableCell>{row.numberOfTickets}</TableCell>\n                <TableCell>{row.averageNumberOfUserTickets}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n\nexport default BonusSetListTable;\n"],"sourceRoot":""}