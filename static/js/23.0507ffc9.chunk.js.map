{"version":3,"sources":["utils/constants/regexs.js","components/bonus/BonusSetNewForm.js","pages/BonusSetCreate.js"],"names":["phoneRegExp","addressRegExp","nameRegExp","NewBonusSetSchema","Yup","shape","name","matches","required","brand","bonuses","startDate","nullable","duration","min","ticketRules","BonusSetNewForm","isEdit","currentBonusSet","navigate","useNavigate","enqueueSnackbar","useSnackbar","formik","useFormik","enableReinitialize","initialValues","Date","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","variant","PATH_DASHBOARD","bonus","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","log","value","noValidate","autoComplete","Card","CardContent","Stack","spacing","direction","xs","sm","TextField","fullWidth","size","label","Boolean","helperText","select","placeholder","SelectProps","native","map","option","index","DateTimePicker","addDays","inputFormat","onChange","date","isValidDate","renderInput","params","sx","mb","type","InputProps","endAdornment","InputAdornment","position","Autocomplete","multiple","disableCloseOnSelect","event","newValue","options","quantity","quantityToAssign","isRiddimBonus","isOptionEqualToValue","renderTags","getTagProps","Chip","getOptionLabel","renderOption","props","Box","component","fontSize","mr","length","render","CardHeader","title","subheader","reduce","acc","fieldName","getIn","mt","display","justifyContent","LoadingButton","loading","endIcon","Save","BonusSetCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","root"],"mappings":"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","file":"static/js/23.0507ffc9.chunk.js","sourcesContent":["export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","import React from 'react';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { isValid as isValidDate, addDays } from 'date-fns';\nimport { FieldArray, Form, FormikProvider, getIn, useFormik } from 'formik';\n// material\nimport { Save as SaveIcon } from '@mui/icons-material';\nimport { DateTimePicker, LoadingButton } from '@mui/lab';\nimport {\n  Box,\n  Card,\n  Stack,\n  TextField,\n  CardContent,\n  Autocomplete,\n  Chip,\n  CardHeader,\n  InputAdornment,\n} from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// utils\nimport { nameRegExp } from '../../utils/constants/regexs';\n\n// ----------------------------------------------------------------------\n\nconst NewBonusSetSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  brand: Yup.string().required('Brand is required'),\n  bonuses: Yup.array(),\n  startDate: Yup.date().nullable(true),\n  duration: Yup.number().min(1).required('This field is required.'),\n  ticketRules: Yup.array(),\n});\n\nBonusSetNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentBonusSet: PropTypes.object,\n};\n\nexport default function BonusSetNewForm({ isEdit, currentBonusSet }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: currentBonusSet?.name || '',\n      brand: currentBonusSet?.brand || 'Adidas',\n      bonuses: currentBonusSet?.bonuses || [],\n      startDate: currentBonusSet?.startDate ? new Date(currentBonusSet.startDate) : null,\n      duration: currentBonusSet?.duration || 45,\n      ticketRules: currentBonusSet?.ticketRules || [],\n    },\n    validationSchema: NewBonusSetSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.bonus.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Card>\n          <CardContent>\n            <Stack spacing={3}>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Brand\"\n                  placeholder=\"Brand\"\n                  {...getFieldProps('brand')}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.brand && errors.brand)}\n                  helperText={touched.brand && errors.brand}\n                >\n                  {['Adidas', 'Nike'].map((option, index) => (\n                    <option key={option + index} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n                <DateTimePicker\n                  label=\"Start Date\"\n                  value={values.startDate ? values.startDate : setFieldValue('startDate', addDays(new Date(), 45))}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.startDate && errors.startDate)}\n                      helperText={touched.startDate && errors.startDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <TextField\n                  fullWidth\n                  type=\"number\"\n                  size=\"small\"\n                  label=\"Duration\"\n                  InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">days</InputAdornment>,\n                  }}\n                  {...getFieldProps('duration')}\n                  error={Boolean(touched.duration && errors.duration)}\n                  helperText={touched.duration && errors.duration}\n                />\n              </Stack>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <Autocomplete\n                  fullWidth\n                  multiple\n                  disableCloseOnSelect\n                  size=\"small\"\n                  value={values.bonuses}\n                  onChange={(event, newValue) => {\n                    console.log(newValue);\n                    setFieldValue('bonuses', newValue);\n                  }}\n                  options={[\n                    { name: 'Bonus 1', quantity: 100, quantityToAssign: 0, value: 20 },\n                    { name: 'Bonus 2', quantity: 50, quantityToAssign: 0, value: 40, isRiddimBonus: true },\n                    { name: 'Bonus 3', quantity: 200, quantityToAssign: 0, value: 30 },\n                    { name: 'Bonus 4', quantity: 40, quantityToAssign: 0, value: 15, isRiddimBonus: true },\n                    { name: 'Bonus 5', quantity: 120, quantityToAssign: 0, value: 25 },\n                  ]}\n                  isOptionEqualToValue={(option, value) => option.name === value.name}\n                  renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                      <Chip\n                        key={index}\n                        label={`${option.name} ${option.isRiddimBonus ? '(Riddim)' : ''}`}\n                        {...getTagProps({ index })}\n                      />\n                    ))\n                  }\n                  getOptionLabel={(option) => option.name}\n                  renderOption={(props, option) => (\n                    <Box component=\"li\" sx={{ fontSize: 15, '& > span': { mr: '10px', fontSize: 18 } }} {...props}>\n                      {`${option.name} Qty: ${option.quantity} ${option.isRiddimBonus ? '(Riddim)' : ''}`}\n                    </Box>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Bonuses\"\n                      error={Boolean(touched.bonuses && errors.bonuses)}\n                      helperText={touched.bonuses && errors.bonuses}\n                    />\n                  )}\n                />\n                <Autocomplete\n                  fullWidth\n                  multiple\n                  disableCloseOnSelect\n                  size=\"small\"\n                  value={values.ticketRules}\n                  onChange={(event, newValue) => {\n                    setFieldValue('ticketRules', newValue);\n                  }}\n                  options={[\n                    'Default Historical Data',\n                    'Default App Level',\n                    'Default Followers',\n                    'Default Social',\n                    'Historical V2',\n                  ]}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Ticket Rules\"\n                      error={Boolean(touched.ticketRules && errors.ticketRules)}\n                      helperText={touched.ticketRules && errors.ticketRules}\n                    />\n                  )}\n                />\n              </Stack>\n\n              {values.bonuses.length > 0 && (\n                <FieldArray\n                  name=\"bonuses\"\n                  render={() => (\n                    <Card>\n                      <CardHeader\n                        title=\"Set Bonus Quantities for this set\"\n                        subheader={`Total value of this bonus set: ${values.bonuses.reduce(\n                          (acc, bonus) => acc + bonus.quantityToAssign * bonus.value,\n                          0\n                        )}`}\n                      />\n                      <CardContent>\n                        <Stack spacing={3}>\n                          {values.bonuses.map((bonus, index) => {\n                            const fieldName = `bonuses.${index}`;\n                            return (\n                              <TextField\n                                key={index}\n                                type=\"number\"\n                                fullWidth\n                                size=\"small\"\n                                label={`${bonus.name} quantity (available ${bonus.quantity})`}\n                                {...getFieldProps(`${fieldName}.quantityToAssign`)}\n                                error={Boolean(\n                                  getIn(touched, `${fieldName}.quantityToAssign`) &&\n                                    getIn(errors, `${fieldName}.quantityToAssign`)\n                                )}\n                                helperText={\n                                  (getIn(touched, `${fieldName}.quantityToAssign`) &&\n                                    getIn(errors, `${fieldName}.quantityToAssign`)) ||\n                                  `Bonus Value: ${bonus.value} Total Value: ${bonus.value * bonus.quantityToAssign}`\n                                }\n                              />\n                            );\n                          })}\n                        </Stack>\n                      </CardContent>\n                    </Card>\n                  )}\n                />\n              )}\n\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} endIcon={<SaveIcon />}>\n                  Save\n                </LoadingButton>\n              </Box>\n            </Stack>\n          </CardContent>\n        </Card>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport BonusSetNewForm from '../components/bonus/BonusSetNewForm';\n\n// ----------------------------------------------------------------------\n\nexport default function BonusSetCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  // TODO: will be updated with bonus\n  const currentBonusSet = isEdit\n    ? {\n        name: 'Set 1',\n        brand: 'Nike',\n        bonuses: ['Bonus 1', 'Bonus 2', 'Bonus 3'],\n        startDate: new Date(),\n        duration: 20,\n        ticketRules: ['Default Historical Data', 'Default Followers'],\n      }\n    : {};\n\n  return (\n    <Page title=\"BonusSet: Create a new bonus\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Add Bonus Set' : 'Edit Bonus Set'}\n          links={[{ name: 'Bonus Set', href: PATH_DASHBOARD.root }, { name: !isEdit ? 'Add BonusSet' : name }]}\n        />\n        <BonusSetNewForm isEdit={isEdit} currentBonusSet={currentBonusSet} />\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}