{"version":3,"sources":["components/bonus/BonusSetNewForm.js","pages/BonusSetCreate.js","components/HeaderBreadcrumbs.js","utils/constants/regexs.js","utils/mockImages.js","../node_modules/@material-ui/icons/esm/Save.js","../node_modules/@material-ui/core/CardContent/cardContentClasses.js","../node_modules/@material-ui/core/CardContent/CardContent.js"],"names":["NewBonusSetSchema","Yup","shape","name","matches","nameRegExp","required","brand","bonuses","endDate","nullable","ticketRules","BonusNewForm","isEdit","currentBonusSet","navigate","useNavigate","enqueueSnackbar","useSnackbar","formik","useFormik","enableReinitialize","initialValues","Date","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","variant","PATH_DASHBOARD","bonus","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","log","value","noValidate","autoComplete","Card","CardContent","Stack","spacing","direction","xs","sm","TextField","fullWidth","size","label","Boolean","helperText","select","placeholder","SelectProps","native","map","option","index","DateTimePicker","addDays","inputFormat","onChange","date","isValidDate","renderInput","params","sx","mb","Autocomplete","multiple","disableCloseOnSelect","event","newValue","options","quantity","isOptionEqualToValue","renderTags","getTagProps","Chip","getOptionLabel","renderOption","props","Box","component","fontSize","mr","reduce","acc","mt","display","justifyContent","LoadingButton","type","loading","endIcon","Save","BonusSetCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","root","action","moreLink","other","alignItems","flexGrow","gutterBottom","flexShrink","isString","target","noWrap","phoneRegExp","addressRegExp","mockImgProduct","createSvgIcon","_jsx","d","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","styles","padding","paddingBottom","React","inProps","ref","useThemeProps","className","_objectWithoutPropertiesLoose","styleProps","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"mappings":"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","file":"static/js/21.1bd6ee4c.chunk.js","sourcesContent":["import React from 'react';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { isValid as isValidDate, addDays } from 'date-fns';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { Save as SaveIcon } from '@material-ui/icons';\nimport { DateTimePicker, LoadingButton } from '@material-ui/lab';\nimport { Box, Card, Stack, TextField, CardContent, Autocomplete, Chip } from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// utils\nimport { nameRegExp } from '../../utils/constants/regexs';\n\n// ----------------------------------------------------------------------\n\nconst NewBonusSetSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  brand: Yup.string().required('Brand is required'),\n  bonuses: Yup.array(),\n  endDate: Yup.date().nullable(true),\n  ticketRules: Yup.array(),\n});\n\nBonusNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentBonusSet: PropTypes.object,\n};\n\nexport default function BonusNewForm({ isEdit, currentBonusSet }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: currentBonusSet?.name || '',\n      brand: currentBonusSet?.brand || 'Adidas',\n      bonuses: currentBonusSet?.bonuses || [],\n      endDate: currentBonusSet?.endDate ? new Date(currentBonusSet.endDate) : null,\n      ticketRules: currentBonusSet?.ticketRules || [],\n    },\n    validationSchema: NewBonusSetSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.bonus.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Card>\n          <CardContent>\n            <Stack spacing={3}>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Brand\"\n                  placeholder=\"Brand\"\n                  {...getFieldProps('brand')}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.brand && errors.brand)}\n                  helperText={touched.brand && errors.brand}\n                >\n                  {['Adidas', 'Nike'].map((option, index) => (\n                    <option key={option + index} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.endDate ? values.endDate : setFieldValue('endDate', addDays(new Date(), 45))}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.endDate && errors.endDate)}\n                      helperText={touched.endDate && errors.endDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <Autocomplete\n                  fullWidth\n                  multiple\n                  disableCloseOnSelect\n                  size=\"small\"\n                  value={values.bonuses}\n                  onChange={(event, newValue) => {\n                    console.log(newValue);\n                    setFieldValue('bonuses', newValue);\n                  }}\n                  options={[\n                    { name: 'Bonus 1', quantity: 100 },\n                    { name: 'Bonus 2', quantity: 50 },\n                    { name: 'Bonus 3', quantity: 200 },\n                    { name: 'Bonus 4', quantity: 40 },\n                    { name: 'Bonus 5', quantity: 120 },\n                  ]}\n                  isOptionEqualToValue={(option, value) => option.name === value.name}\n                  renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                      <Chip key={index} label={`${option.name} Qty: ${option.quantity}`} {...getTagProps({ index })} />\n                    ))\n                  }\n                  getOptionLabel={(option) => option.name}\n                  renderOption={(props, option) => (\n                    <Box component=\"li\" sx={{ fontSize: 15, '& > span': { mr: '10px', fontSize: 18 } }} {...props}>\n                      {option.name} Qty: {option.quantity}\n                    </Box>\n                  )}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Bonuses\"\n                      error={Boolean(touched.bonuses && errors.bonuses)}\n                      helperText={\n                        (touched.bonuses && errors.bonuses) ||\n                        `Total value of this bonus set: ${values.bonuses.reduce(\n                          (acc, bonus) => acc + bonus.quantity * 5,\n                          0\n                        )}`\n                      }\n                    />\n                  )}\n                />\n                <Autocomplete\n                  fullWidth\n                  multiple\n                  disableCloseOnSelect\n                  size=\"small\"\n                  value={values.ticketRules}\n                  onChange={(event, newValue) => {\n                    setFieldValue('ticketRules', newValue);\n                  }}\n                  options={[\n                    'Default Historical Data',\n                    'Default App Level',\n                    'Default Followers',\n                    'Default Social',\n                    'Historical V2',\n                  ]}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Ticket Rules\"\n                      error={Boolean(touched.ticketRules && errors.ticketRules)}\n                      helperText={touched.ticketRules && errors.ticketRules}\n                    />\n                  )}\n                />\n              </Stack>\n\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} endIcon={<SaveIcon />}>\n                  Save\n                </LoadingButton>\n              </Box>\n            </Stack>\n          </CardContent>\n        </Card>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport BonusSetNewForm from '../components/bonus/BonusSetNewForm';\nimport { mockImgProduct } from '../utils/mockImages';\n\n// ----------------------------------------------------------------------\n\nexport default function BonusSetCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  // TODO: will be updated with bonus\n  const currentBonusSet = isEdit\n    ? {\n        name: 'Set 1',\n        brand: 'Nike',\n        bonuses: ['Bonus 1', 'Bonus 2', 'Bonus 3'],\n        endDate: new Date(),\n        ticketRules: ['Default Historical Data', 'Default Followers'],\n      }\n    : {};\n\n  return (\n    <Page title=\"BonusSet: Create a new bonus\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Add Bonus Set' : 'Edit Bonus Set'}\n          links={[{ name: 'Bonus Set', href: PATH_DASHBOARD.root }, { name: !isEdit ? 'Add BonusSet' : name }]}\n        />\n        <BonusSetNewForm isEdit={isEdit} currentBonusSet={currentBonusSet} />\n      </Container>\n    </Page>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@material-ui/core';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","// ----------------------------------------------------------------------\n\nexport const mockImgCover = (index) => `/static/mock-images/covers/cover_${index}.jpg`;\nexport const mockImgFeed = (index) => `/static/mock-images/feeds/feed_${index}.jpg`;\nexport const mockImgProduct = (index) => `/static/mock-images/products/product_${index}.jpg`;\nexport const mockImgAvatar = (index) => `/static/mock-images/avatars/avatar_${index}.jpg`;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const styleProps = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardContent;"],"sourceRoot":""}