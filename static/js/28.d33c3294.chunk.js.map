{"version":3,"sources":["components/bonus/BonusParticipantsTable.js","pages/BonusSetView.js","components/HeaderBreadcrumbs.js","components/bonus/BonusSetListTable.js","components/bonus/BonusListTable.js","components/bonus/BonusWinnersTable.js"],"names":["TABLE_HEAD","id","label","alignRight","winnerList","Array","map","_","index","userId","name","faker","internet","userName","tickets","datatype","number","min","max","precision","bonusWon","acceptanceState","sample","BonusWinnersTable","theme","useTheme","Grid","container","spacing","sx","mt","item","xs","Typography","variant","Scrollbar","TableContainer","minWidth","Table","TableHead","TableRow","headCell","TableCell","align","TableBody","row","BonusSetView","themeStretch","useSettings","useParams","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","bonus","listBonusSet","BonusSetListTable","bonusList","brand","bonuses","endDate","Date","toDateString","ticketRules","averageValueOfSingleBonus","valueOfAllBonuses","winnerNumber","bonusTasksCompleted","numberOfParticipants","numberOfTickets","averageNumberOfUserTickets","Card","my","CardHeader","action","Button","size","startIcon","icon","EditFill","component","RouterLink","to","editTicketRule","CardContent","sm","md","lg","titleTypographyProps","textAlign","Stack","direction","justifyContent","Box","maxHeight","mb","BonusListTable","availableQuantity","value","BonusParticipantsTable","moreLink","other","alignItems","flexGrow","gutterBottom","flexShrink","isString","target","noWrap","display","length","bonusName"],"mappings":"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","file":"static/js/28.d33c3294.chunk.js","sourcesContent":["import faker from 'faker';\nimport { sample } from 'lodash';\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'userId', label: 'User Id', alignRight: false },\n  { id: 'tickets', label: '# of tickets', alignRight: false },\n  { id: 'bonusWon', label: 'Bonus Won', alignRight: false },\n  { id: 'acceptanceState', label: 'Acceptance State', alignRight: false },\n];\n\nconst winnerList = [...Array(10)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    userId: `id ${setIndex}`,\n    name: faker.internet.userName(),\n    tickets: faker.datatype.number({ min: 1000, max: 10000, precision: 1 }),\n    bonusWon: '100 shoes',\n    acceptanceState: sample([\n      'accepted bonus ',\n      'not accepted bonus',\n      'accepted task not completed',\n      'accepted task completed',\n    ]),\n  };\n});\n\nconst BonusWinnersTable = () => {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Participant List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {winnerList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.userId}</TableCell>\n                    <TableCell>{row.tickets}</TableCell>\n                    <TableCell>{row.bonusWon}</TableCell>\n                    <TableCell>{row.acceptanceState}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BonusWinnersTable;\n","import { Link as RouterLink, useParams } from 'react-router-dom';\n\nimport { Icon } from '@iconify/react';\nimport EditFill from '@iconify/icons-eva/edit-fill';\n// material\nimport { Box, Button, Card, CardContent, CardHeader, Container, Grid, Stack, Typography } from '@mui/material';\n\nimport { PATH_DASHBOARD } from '../routes/paths';\n\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport BonusSetListTable from '../components/bonus/BonusSetListTable';\nimport BonusWinnersTable from '../components/bonus/BonusWinnersTable';\nimport BonusParticipantsTable from '../components/bonus/BonusParticipantsTable';\nimport BonusListTable from '../components/bonus/BonusListTable';\n\nexport default function BonusSetView() {\n  const { themeStretch } = useSettings();\n  const { name } = useParams();\n\n  // TODO: will be updated with bonusSet\n  // const currentBonusSet = {};\n\n  return (\n    <Page title=\"Bonus Set: View Bonus Set\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={name}\n          links={[{ name: 'Bonus Set', href: PATH_DASHBOARD.bonus.listBonusSet }, { name }]}\n        />\n\n        <BonusSetListTable\n          bonusList={[\n            {\n              name: 'Set 1',\n              brand: 'Riddim',\n              bonuses: ['Bonus 1', 'Bonus 2', 'Bonus 3'],\n              endDate: new Date().toDateString(),\n              ticketRules: ['Default Historical Data', 'Default Followers'],\n              averageValueOfSingleBonus: 200,\n              valueOfAllBonuses: 2000,\n              winnerNumber: 10,\n              bonusTasksCompleted: 60,\n              numberOfParticipants: 200,\n              numberOfTickets: 2000,\n              averageNumberOfUserTickets: 150,\n            },\n          ]}\n        />\n\n        {/* Ticket Rule */}\n        <Card sx={{ my: 4 }}>\n          <CardHeader\n            title={`Ticket Rule: ${'Rule Group 1'}`}\n            action={\n              <Button\n                size=\"small\"\n                variant=\"outlined\"\n                startIcon={<Icon icon={EditFill} />}\n                component={RouterLink}\n                to={PATH_DASHBOARD.bonus.editTicketRule}\n              >\n                Edit Rule\n              </Button>\n            }\n          />\n          <CardContent>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6} md={4} lg={3}>\n                <Card>\n                  <CardHeader\n                    title=\"Followers on Riddim\"\n                    titleTypographyProps={{ variant: 'subtitle2', textAlign: 'center' }}\n                  />\n                  <CardContent>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">100-5k</Typography>\n                      <Typography variant=\"caption\">x1 tickets</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">5k-50k</Typography>\n                      <Typography variant=\"caption\">x2 tickets</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">50k-500k</Typography>\n                      <Typography variant=\"caption\">x3 tickets</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">500k-2mil</Typography>\n                      <Typography variant=\"caption\">x4 tickets</Typography>\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} sm={6} md={4} lg={3}>\n                <Card>\n                  <CardHeader title=\"App Level\" titleTypographyProps={{ variant: 'subtitle2', textAlign: 'center' }} />\n                  <CardContent>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">Level 0-5</Typography>\n                      <Typography variant=\"caption\">x1 tickets</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">Level 6-10</Typography>\n                      <Typography variant=\"caption\">x2 tickets</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">Level 11-20</Typography>\n                      <Typography variant=\"caption\">x3 tickets</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                      <Typography variant=\"caption\">Level 21-25</Typography>\n                      <Typography variant=\"caption\">x4 tickets</Typography>\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n\n        <Box sx={{ maxHeight: 720, mt: (theme) => theme.spacing(8) }}>\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>\n            Bonuses of this set\n          </Typography>\n          <BonusListTable\n            bonusList={[\n              {\n                name: 'Bonus 1',\n                availableQuantity: 200,\n                brand: 'Riddim',\n                value: '100',\n              },\n              {\n                name: 'Bonus 2',\n                availableQuantity: 15,\n                brand: 'Riddim',\n                value: '250',\n              },\n              {\n                name: 'Bonus 3',\n                availableQuantity: 100,\n                brand: 'Riddim',\n                value: '75',\n              },\n            ]}\n          />\n        </Box>\n\n        <Box sx={{ maxHeight: 720, mt: (theme) => theme.spacing(8) }}>\n          <BonusParticipantsTable />\n        </Box>\n\n        <Box sx={{ maxHeight: 720, mt: (theme) => theme.spacing(8) }}>\n          <BonusWinnersTable />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","import PropTypes from 'prop-types';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'endDate', label: 'End Date', alignRight: false },\n  { id: 'numberOfBonuses', label: 'Number of bonuses', alignRight: false },\n  { id: 'averageValueOfSingleBonus', label: 'Average $ of a single bonus', alignRight: false },\n  { id: 'valueOfAllBonuses', label: 'Value of all bonuses', alignRight: false },\n  { id: 'winnerNumber', label: 'Winner Number', alignRight: false },\n  { id: 'bonusTasksCompleted', label: 'Bonus Tasks Completed (%)', alignRight: false },\n  { id: 'numberOfParticipants', label: '# of participants', alignRight: false },\n  { id: 'numberOfTickets', label: '# of tickets', alignRight: false },\n  { id: 'averageNumberOfUserTickets', label: 'Average # of user tickets', alignRight: false },\n];\n\nBonusSetListTable.propTypes = {\n  bonusList: PropTypes.array,\n};\n\nfunction BonusSetListTable({ bonusList = [] }) {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800 }}>\n        <Table aria-label=\"bonus table\">\n          <TableHead>\n            <TableRow>\n              {TABLE_HEAD.map((headCell) => (\n                <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                  {headCell.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {bonusList.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.brand}</TableCell>\n                <TableCell>{row.endDate}</TableCell>\n                <TableCell>{row.bonuses.length}</TableCell>\n                <TableCell>{row.averageValueOfSingleBonus}</TableCell>\n                <TableCell>{row.valueOfAllBonuses}</TableCell>\n                <TableCell>{row.winnerNumber}</TableCell>\n                <TableCell>{row.bonusTasksCompleted}</TableCell>\n                <TableCell>{row.numberOfParticipants}</TableCell>\n                <TableCell>{row.numberOfTickets}</TableCell>\n                <TableCell>{row.averageNumberOfUserTickets}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n\nexport default BonusSetListTable;\n","import PropTypes from 'prop-types';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'availableQuantity', label: 'Available Quantity', alignRight: false },\n  { id: 'value', label: 'Value ($)', alignRight: false },\n];\n\nBonusListTable.propTypes = {\n  bonusList: PropTypes.array,\n};\n\nfunction BonusListTable({ bonusList = [] }) {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800 }}>\n        <Table aria-label=\"bonus table\">\n          <TableHead>\n            <TableRow>\n              {TABLE_HEAD.map((headCell) => (\n                <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                  {headCell.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {bonusList.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.brand}</TableCell>\n                <TableCell>{row.availableQuantity}</TableCell>\n                <TableCell>{row.value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n\nexport default BonusListTable;\n","import faker from 'faker';\nimport { sample } from 'lodash';\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'userId', label: 'User Id', alignRight: false },\n  { id: 'tickets', label: '# of tickets', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'bonusName', label: 'Bonus Name', alignRight: false },\n  { id: 'acceptanceState', label: 'Acceptance State', alignRight: false },\n];\n\nconst winnerList = [...Array(3)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    userId: `id ${setIndex}`,\n    name: faker.internet.userName(),\n    tickets: faker.datatype.number({ min: 1000, max: 10000, precision: 1 }),\n    brand: 'Brand 1',\n    bonusName: '100 shoes',\n    acceptanceState: sample([\n      'accepted bonus ',\n      'not accepted bonus',\n      'accepted task not completed',\n      'accepted task completed',\n    ]),\n  };\n});\n\nconst BonusWinnersTable = () => {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Winner List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {winnerList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.userId}</TableCell>\n                    <TableCell>{row.tickets}</TableCell>\n                    <TableCell>{row.brand}</TableCell>\n                    <TableCell>{row.bonusName}</TableCell>\n                    <TableCell>{row.acceptanceState}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BonusWinnersTable;\n"],"sourceRoot":""}