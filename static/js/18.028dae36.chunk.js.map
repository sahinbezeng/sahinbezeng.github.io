{"version":3,"sources":["components/bonus/TicketRuleNewForm.js","pages/TicketRuleCreate.js","components/HeaderBreadcrumbs.js","../node_modules/@iconify/icons-eva/plus-fill.js","../node_modules/@material-ui/core/CardHeader/cardHeaderClasses.js","../node_modules/@material-ui/core/CardHeader/CardHeader.js","../node_modules/@material-ui/icons/esm/Save.js","../node_modules/@material-ui/core/CardContent/cardContentClasses.js","../node_modules/@material-ui/core/CardContent/CardContent.js"],"names":["initialFromToObject","from","to","tickets","initialSocialRuleObject","socialNetworkCount","HistoricalDataRules","formik","errors","values","touched","getFieldProps","name","render","historicalDataArrayHelpers","Card","CardHeader","title","titleTypographyProps","variant","action","Button","size","startIcon","icon","PlusFill","onClick","push","CardContent","Stack","spacing","historicalDataRules","map","rule","index","fieldNamePrefix","Grid","container","justifyContent","item","sm","md","Typography","direction","TextField","type","fullWidth","error","Boolean","getIn","helperText","AppLevelRules","appLevelArrayHelpers","appLevelRules","FollowerRules","followerArrayHelpers","followerRules","SocialNetworkRules","setFieldValue","socialNetworkArrayHelpers","Autocomplete","multiple","value","socialNetworks","onChange","event","newValue","options","renderInput","params","label","socialNetworkRules","NewTicketRuleSchema","Yup","shape","required","TicketRuleNewForm","isEdit","currentTicketRule","navigate","useNavigate","enqueueSnackbar","useSnackbar","useFormik","enableReinitialize","initialValues","validationSchema","onSubmit","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","PATH_DASHBOARD","bonus","createTicketRule","console","handleSubmit","isSubmitting","log","noValidate","autoComplete","xs","select","SelectProps","native","option","Box","sx","mt","display","LoadingButton","loading","endIcon","Save","TicketRuleCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","root","moreLink","other","mb","alignItems","flexGrow","gutterBottom","flexShrink","isString","target","noWrap","exports","__esModule","default","getCardHeaderUtilityClass","slot","generateUtilityClass","cardHeaderClasses","generateUtilityClasses","_excluded","CardHeaderRoot","styled","overridesResolver","props","styles","_extends","subheader","padding","CardHeaderAvatar","avatar","flex","marginRight","CardHeaderAction","alignSelf","marginTop","marginBottom","CardHeaderContent","content","React","inProps","ref","useThemeProps","className","component","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","_objectWithoutPropertiesLoose","styleProps","classes","composeClasses","useUtilityClasses","_jsx","children","color","_jsxs","clsx","as","createSvgIcon","d","getCardContentUtilityClass","CardContentRoot","paddingBottom"],"mappings":"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","file":"static/js/18.028dae36.chunk.js","sourcesContent":["import React from 'react';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { FieldArray, Form, FormikProvider, getIn, useFormik } from 'formik';\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\n// material\nimport { Save as SaveIcon } from '@material-ui/icons';\nimport { LoadingButton } from '@material-ui/lab';\nimport {\n  Box,\n  Card,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n  CardHeader,\n  CardContent,\n  Button,\n  Autocomplete,\n} from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// components\n\n// ----------------------------------------------------------------------\n\nconst initialFromToObject = {\n  from: 1,\n  to: 5,\n  tickets: 2,\n};\n\nconst initialSocialRuleObject = { socialNetworkCount: 3, tickets: 1 };\n\nconst HistoricalDataRules = ({ formik }) => {\n  const { errors, values, touched, getFieldProps } = formik;\n  return (\n    <FieldArray\n      name=\"historicalDataRules\"\n      render={(historicalDataArrayHelpers) => (\n        <Card>\n          <CardHeader\n            title=\"Historical Data Rules\"\n            titleTypographyProps={{ variant: 'subtitle1' }}\n            action={\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                startIcon={<Icon icon={PlusFill} />}\n                onClick={() => historicalDataArrayHelpers.push({ ...initialFromToObject })}\n              >\n                Add Rule\n              </Button>\n            }\n          />\n          <CardContent>\n            <Stack spacing={2}>\n              {values.historicalDataRules.map((rule, index) => {\n                const fieldNamePrefix = `historicalDataRules.${index}`;\n                return (\n                  <Grid container key={index} justifyContent=\"space-between\">\n                    <Grid item sm={12} md={6}>\n                      <Grid container spacing={1}>\n                        <Grid item sm={12} md={2}>\n                          <Typography>did not win</Typography>\n                        </Grid>\n                        <Grid item sm={12} md={4}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <TextField\n                              type=\"number\"\n                              fullWidth\n                              variant=\"standard\"\n                              size=\"small\"\n                              {...getFieldProps(`${fieldNamePrefix}.from`)}\n                              error={Boolean(\n                                getIn(touched, `${fieldNamePrefix}.from`) && getIn(errors, `${fieldNamePrefix}.from`)\n                              )}\n                              helperText={\n                                getIn(touched, `${fieldNamePrefix}.from`) && getIn(errors, `${fieldNamePrefix}.from`)\n                              }\n                            />\n                            <Typography>to</Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12} md={4}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <TextField\n                              type=\"number\"\n                              fullWidth\n                              variant=\"standard\"\n                              size=\"small\"\n                              {...getFieldProps(`${fieldNamePrefix}.to`)}\n                              error={Boolean(\n                                getIn(touched, `${fieldNamePrefix}.to`) && getIn(errors, `${fieldNamePrefix}.to`)\n                              )}\n                              helperText={\n                                getIn(touched, `${fieldNamePrefix}.to`) && getIn(errors, `${fieldNamePrefix}.to`)\n                              }\n                            />\n                            <Typography>times</Typography>\n                          </Stack>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item sm={12} md={4}>\n                      <Stack direction=\"row\">\n                        <TextField\n                          type=\"number\"\n                          fullWidth\n                          variant=\"standard\"\n                          size=\"small\"\n                          {...getFieldProps(`${fieldNamePrefix}.tickets`)}\n                          error={Boolean(\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          )}\n                          helperText={\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          }\n                        />\n                        <Typography>tickets</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Stack>\n          </CardContent>\n        </Card>\n      )}\n    />\n  );\n};\n\nconst AppLevelRules = ({ formik }) => {\n  const { errors, values, touched, getFieldProps } = formik;\n  return (\n    <FieldArray\n      name=\"appLevelRules\"\n      render={(appLevelArrayHelpers) => (\n        <Card>\n          <CardHeader\n            title=\"App Level Rules\"\n            titleTypographyProps={{ variant: 'subtitle1' }}\n            action={\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                startIcon={<Icon icon={PlusFill} />}\n                onClick={() => appLevelArrayHelpers.push({ ...initialFromToObject })}\n              >\n                Add Rule\n              </Button>\n            }\n          />\n          <CardContent>\n            <Stack spacing={2}>\n              {values.appLevelRules.map((rule, index) => {\n                const fieldNamePrefix = `appLevelRules.${index}`;\n                return (\n                  <Grid container key={index} justifyContent=\"space-between\">\n                    <Grid item sm={12} md={6}>\n                      <Grid container spacing={1}>\n                        <Grid item sm={12} md={2}>\n                          <Typography>App Level</Typography>\n                        </Grid>\n                        <Grid item sm={12} md={4}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <TextField\n                              type=\"number\"\n                              fullWidth\n                              variant=\"standard\"\n                              size=\"small\"\n                              {...getFieldProps(`${fieldNamePrefix}.from`)}\n                              error={Boolean(\n                                getIn(touched, `${fieldNamePrefix}.from`) && getIn(errors, `${fieldNamePrefix}.from`)\n                              )}\n                              helperText={\n                                getIn(touched, `${fieldNamePrefix}.from`) && getIn(errors, `${fieldNamePrefix}.from`)\n                              }\n                            />\n                            <Typography>to</Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12} md={4}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <TextField\n                              type=\"number\"\n                              fullWidth\n                              variant=\"standard\"\n                              size=\"small\"\n                              {...getFieldProps(`${fieldNamePrefix}.to`)}\n                              error={Boolean(\n                                getIn(touched, `${fieldNamePrefix}.to`) && getIn(errors, `${fieldNamePrefix}.to`)\n                              )}\n                              helperText={\n                                getIn(touched, `${fieldNamePrefix}.to`) && getIn(errors, `${fieldNamePrefix}.to`)\n                              }\n                            />\n                            <Typography>times</Typography>\n                          </Stack>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item sm={12} md={4}>\n                      <Stack direction=\"row\">\n                        <TextField\n                          type=\"number\"\n                          fullWidth\n                          variant=\"standard\"\n                          size=\"small\"\n                          {...getFieldProps(`${fieldNamePrefix}.tickets`)}\n                          error={Boolean(\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          )}\n                          helperText={\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          }\n                        />\n                        <Typography>tickets</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Stack>\n          </CardContent>\n        </Card>\n      )}\n    />\n  );\n};\n\nconst FollowerRules = ({ formik }) => {\n  const { errors, values, touched, getFieldProps } = formik;\n  return (\n    <FieldArray\n      name=\"followerRules\"\n      render={(followerArrayHelpers) => (\n        <Card>\n          <CardHeader\n            title=\"Follower Rules\"\n            titleTypographyProps={{ variant: 'subtitle1' }}\n            action={\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                startIcon={<Icon icon={PlusFill} />}\n                onClick={() => followerArrayHelpers.push({ ...initialFromToObject })}\n              >\n                Add Rule\n              </Button>\n            }\n          />\n          <CardContent>\n            <Stack spacing={2}>\n              {values.followerRules.map((rule, index) => {\n                const fieldNamePrefix = `followerRules.${index}`;\n                return (\n                  <Grid container key={index} justifyContent=\"space-between\">\n                    <Grid item sm={12} md={6}>\n                      <Grid container spacing={1}>\n                        <Grid item sm={12} md={2}>\n                          <Typography>Follower</Typography>\n                        </Grid>\n                        <Grid item sm={12} md={4}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <TextField\n                              type=\"number\"\n                              fullWidth\n                              variant=\"standard\"\n                              size=\"small\"\n                              {...getFieldProps(`${fieldNamePrefix}.from`)}\n                              error={Boolean(\n                                getIn(touched, `${fieldNamePrefix}.from`) && getIn(errors, `${fieldNamePrefix}.from`)\n                              )}\n                              helperText={\n                                getIn(touched, `${fieldNamePrefix}.from`) && getIn(errors, `${fieldNamePrefix}.from`)\n                              }\n                            />\n                            <Typography>to</Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12} md={4}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <TextField\n                              type=\"number\"\n                              fullWidth\n                              variant=\"standard\"\n                              size=\"small\"\n                              {...getFieldProps(`${fieldNamePrefix}.to`)}\n                              error={Boolean(\n                                getIn(touched, `${fieldNamePrefix}.to`) && getIn(errors, `${fieldNamePrefix}.to`)\n                              )}\n                              helperText={\n                                getIn(touched, `${fieldNamePrefix}.to`) && getIn(errors, `${fieldNamePrefix}.to`)\n                              }\n                            />\n                            <Typography>times</Typography>\n                          </Stack>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item sm={12} md={4}>\n                      <Stack direction=\"row\">\n                        <TextField\n                          type=\"number\"\n                          fullWidth\n                          variant=\"standard\"\n                          size=\"small\"\n                          {...getFieldProps(`${fieldNamePrefix}.tickets`)}\n                          error={Boolean(\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          )}\n                          helperText={\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          }\n                        />\n                        <Typography>tickets</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Stack>\n          </CardContent>\n        </Card>\n      )}\n    />\n  );\n};\n\nconst SocialNetworkRules = ({ formik }) => {\n  const { errors, values, touched, getFieldProps, setFieldValue } = formik;\n  return (\n    <FieldArray\n      name=\"socialNetworkRules\"\n      render={(socialNetworkArrayHelpers) => (\n        <Card>\n          <CardHeader\n            title=\"Social Network Rules\"\n            titleTypographyProps={{ variant: 'subtitle1' }}\n            action={\n              <Button\n                size=\"small\"\n                variant=\"contained\"\n                startIcon={<Icon icon={PlusFill} />}\n                onClick={() => socialNetworkArrayHelpers.push({ ...initialSocialRuleObject })}\n              >\n                Add Rule\n              </Button>\n            }\n          />\n          <CardContent>\n            <Stack spacing={2}>\n              <Autocomplete\n                multiple\n                size=\"small\"\n                value={values.socialNetworks}\n                onChange={(event, newValue) => {\n                  setFieldValue('socialNetworks', newValue);\n                }}\n                options={['Facebook', 'Instagram', 'Twitter', 'Pinterest', 'Snapchat', 'Tiktok']}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Social Networks\"\n                    error={Boolean(touched.socialNetworks && errors.socialNetworks)}\n                    helperText={touched.socialNetworks && errors.socialNetworks}\n                  />\n                )}\n              />\n              {values.socialNetworkRules.map((rule, index) => {\n                const fieldNamePrefix = `socialNetworkRules.${index}`;\n                return (\n                  <Grid container key={index} justifyContent=\"center\">\n                    <Grid item sm={12} md={4}>\n                      <Stack direction=\"row\" spacing={1} justifyContent=\"center\">\n                        <TextField\n                          type=\"number\"\n                          variant=\"standard\"\n                          size=\"small\"\n                          {...getFieldProps(`${fieldNamePrefix}.socialNetworkCount`)}\n                          error={Boolean(\n                            getIn(touched, `${fieldNamePrefix}.socialNetworkCount`) &&\n                              getIn(errors, `${fieldNamePrefix}.socialNetworkCount`)\n                          )}\n                          helperText={\n                            getIn(touched, `${fieldNamePrefix}.socialNetworkCount`) &&\n                            getIn(errors, `${fieldNamePrefix}.socialNetworkCount`)\n                          }\n                        />\n                        <Typography>Social Networks</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item sm={12} md={4}>\n                      <Stack direction=\"row\" justifyContent=\"center\">\n                        <TextField\n                          type=\"number\"\n                          variant=\"standard\"\n                          size=\"small\"\n                          {...getFieldProps(`${fieldNamePrefix}.tickets`)}\n                          error={Boolean(\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          )}\n                          helperText={\n                            getIn(touched, `${fieldNamePrefix}.tickets`) && getIn(errors, `${fieldNamePrefix}.tickets`)\n                          }\n                        />\n                        <Typography>tickets</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Stack>\n          </CardContent>\n        </Card>\n      )}\n    />\n  );\n};\n\nconst NewTicketRuleSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  type: Yup.string(),\n  historicalDataRules: Yup.array(),\n  appLevelRules: Yup.array(),\n  followerRules: Yup.array(),\n  socialNetworks: Yup.array(),\n  socialNetworkRules: Yup.array(),\n});\n\nconst TicketRuleNewForm = ({ isEdit, currentTicketRule }) => {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: currentTicketRule?.name || '',\n      type: currentTicketRule?.type || 'Historical Data',\n      historicalDataRules: currentTicketRule?.historicalDataRules || [{ ...initialFromToObject }],\n      appLevelRules: currentTicketRule?.appLevelRules || [{ ...initialFromToObject }],\n      followerRules: currentTicketRule?.followerRules || [{ ...initialFromToObject }],\n      socialNetworks: currentTicketRule?.socialNetworks || [],\n      socialNetworkRules: currentTicketRule?.socialNetworkRules || [{ ...initialSocialRuleObject }],\n    },\n    validationSchema: NewTicketRuleSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.bonus.createTicketRule);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Stack spacing={3}>\n                  <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      label=\"Name\"\n                      {...getFieldProps('name')}\n                      error={Boolean(touched.name && errors.name)}\n                      helperText={touched.name && errors.name}\n                    />\n                    <TextField\n                      select\n                      fullWidth\n                      size=\"small\"\n                      label=\"Type\"\n                      {...getFieldProps(`type`)}\n                      SelectProps={{ native: true }}\n                      error={Boolean(touched.type && errors.type)}\n                      helperText={touched.type && errors.type}\n                    >\n                      {['Historical Data', 'App Level', 'Followers', 'Social'].map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </TextField>\n                  </Stack>\n\n                  {values.type === 'Historical Data' && <HistoricalDataRules formik={formik} />}\n                  {values.type === 'App Level' && <AppLevelRules formik={formik} />}\n                  {values.type === 'Followers' && <FollowerRules formik={formik} />}\n                  {values.type === 'Social' && <SocialNetworkRules formik={formik} />}\n\n                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                    <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} endIcon={<SaveIcon />}>\n                      Save\n                    </LoadingButton>\n                  </Box>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n};\n\nHistoricalDataRules.propTypes = {\n  formik: PropTypes.object,\n};\nAppLevelRules.propTypes = {\n  formik: PropTypes.object,\n};\nFollowerRules.propTypes = {\n  formik: PropTypes.object,\n};\nSocialNetworkRules.propTypes = {\n  formik: PropTypes.object,\n};\n\nTicketRuleNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentTicketRule: PropTypes.object,\n};\n\nexport default TicketRuleNewForm;\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport TicketRuleNewForm from '../components/bonus/TicketRuleNewForm';\n\n// ----------------------------------------------------------------------\n\nexport default function TicketRuleCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  // TODO: will be updated with Ticket Rule\n  const currentTicketRule = {};\n\n  return (\n    <Page title=\"TicketRule: Create a new bonus\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Add Ticket Rule' : 'Edit Ticket Rule'}\n          links={[{ name: 'TicketRule', href: PATH_DASHBOARD.root }, { name: !isEdit ? 'Add Ticket Rule' : name }]}\n        />\n        <TicketRuleNewForm isEdit={isEdit} currentTicketRule={currentTicketRule} />\n      </Container>\n    </Page>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@material-ui/core';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","var data = {\n\t\"body\": \"<path fill=\\\"currentColor\\\" d=\\\"M19 11h-6V5a1 1 0 0 0-2 0v6H5a1 1 0 0 0 0 2h6v6a1 1 0 0 0 2 0v-6h6a1 1 0 0 0 0-2z\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getCardHeaderUtilityClass(slot) {\n  return generateUtilityClass('MuiCardHeader', slot);\n}\nconst cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);\nexport default cardHeaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\n\nconst CardHeaderRoot = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => _extends({\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root)\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Avatar',\n  overridesResolver: (props, styles) => styles.avatar\n})({\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})({\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n\n  const {\n    action,\n    avatar,\n    className,\n    component = 'div',\n    disableTypography = false,\n    subheader: subheaderProp,\n    subheaderTypographyProps,\n    title: titleProp,\n    titleTypographyProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const styleProps = _extends({}, props, {\n    component,\n    disableTypography\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  let title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n\n  let subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    styleProps: styleProps\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      styleProps: styleProps,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      styleProps: styleProps,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      styleProps: styleProps,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z\"\n}), 'Save');","import { generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const styleProps = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardContent;"],"sourceRoot":""}