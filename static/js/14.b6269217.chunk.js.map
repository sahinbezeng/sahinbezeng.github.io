{"version":3,"sources":["../node_modules/@iconify/icons-eva/plus-fill.js","utils/constants/regexs.js","components/DynamicFormItem.js","../node_modules/@mui/icons-material/esm/Delete.js","components/Steps.js","../node_modules/@mui/icons-material/esm/Add.js","components/campaign/validations.js","../node_modules/@mui/material/CardMedia/cardMediaClasses.js","../node_modules/@mui/material/CardMedia/CardMedia.js","../node_modules/@mui/material/CardActions/cardActionsClasses.js","../node_modules/@mui/material/CardActions/CardActions.js","components/campaign/CampaignTypeForm.js","components/campaign/task/TaskAndRewardsForm.js","components/campaign/task/TaskDetailForm.js","components/campaign/contest/ContestAndRewardsForm.js","components/campaign/contest/ContestDetailForm.js","utils/constants/colors.js","components/campaign/survey/SurveyAndRewardsForm.js","components/campaign/watch-ad/WatchAdForm.js","components/campaign/watch-ad/WatchAdDetailForm.js","components/campaign/CampaignNewForm.js","pages/CampaignCreate.js"],"names":["exports","__esModule","default","phoneRegExp","addressRegExp","nameRegExp","DynamicFormItem","label","fieldProps","error","helperText","isLastItem","onAddClick","onRemoveClick","direction","spacing","fullWidth","size","color","onClick","createSvgIcon","_jsx","d","QontoConnector","withStyles","theme","alternativeLabel","top","left","right","active","borderColor","palette","primary","main","completed","line","borderTopWidth","divider","StepConnector","QontoStepIcon","sx","zIndex","width","height","display","alignItems","justifyContent","bgcolor","component","Icon","icon","CheckmarkFill","borderRadius","backgroundColor","Steps","steps","activeStep","connector","map","StepIconComponent","typography","CampaignTypeSchema","Yup","shape","brand","matches","required","campaignType","TaskAndRewardsSchema","name","taskType","tier","associatedBonus","isPublic","TaskDetailSchema","headerImage","description","totalBudget","perUser","starPerUser","continueAfterBudget","doList","of","dontList","igCaptionQuestions","noOfPhotoRequired","noOfVideoRequired","hashtags","mentions","startDate","nullable","endDate","when","schema","min","ContestAndRewardsSchema","contestType","ContestDetailSchema","winnerToken","contestStartDate","contestEndDate","votingStartDate","votingEndDate","winnerDate","SurveyAndRewardsSchema","percentageColor","surveyQuestions","title","options","WatchAdSchema","WatchAdDetailSchema","adVideo","adVideoThumbnail","getCardMediaUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardMediaRoot","styled","overridesResolver","props","styles","ownerState","isMediaComponent","isImageComponent","root","media","img","_extends","backgroundSize","backgroundRepeat","backgroundPosition","objectFit","MEDIA_COMPONENTS","IMAGE_COMPONENTS","CardMedia","React","inProps","ref","useThemeProps","children","className","image","src","style","other","_objectWithoutPropertiesLoose","indexOf","composedStyle","backgroundImage","classes","slots","composeClasses","useUtilityClasses","clsx","as","role","undefined","getCardActionsUtilityClass","CardActionsRoot","disableSpacing","padding","marginLeft","CardActions","CAMPAIGN_TYPES","CampaignTypeForm","formik","onCampaignTypeChange","useTheme","errors","values","touched","getFieldProps","setFieldValue","Grid","container","item","md","Stack","xs","TextField","select","placeholder","SelectProps","native","Boolean","value","option","index","RadioGroup","onChange","e","console","log","target","columns","type","isSelected","Card","variant","border","CardContent","FormControlLabel","control","Radio","margin","position","TaskAndRewardsForm","CardHeader","sm","Typography","labelPlacement","Switch","checked","mx","LabelStyle","subtitle2","text","secondary","marginBottom","TaskDetailForm","handleCoverDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","maxSize","accept","coverUrl","onDrop","FormHelperText","px","Number","isNaN","Button","RouterLink","to","PATH_DASHBOARD","reward","create","Avatar","alt","multiline","rows","render","arrHelper","fieldName","getIn","length","push","remove","Autocomplete","multiple","freeSolo","event","newValue","renderTags","getTagProps","Chip","renderInput","params","DateTimePicker","inputFormat","date","isValidDate","mb","p","ContestAndRewardsForm","ContestDetailForm","titleTypographyProps","colors","initialQuestion","SurveyAndRewardsForm","questionArrayHelpers","action","startIcon","PlusFill","question","questionIndex","optArrayHelpers","optionIndex","optionFieldName","IconButton","Delete","Add","WatchAdForm","WatchAdDetailForm","handleVideoDrop","handleThumbnailDrop","caption","mt","textAlign","fData","STEPS","initialSurveyQuestion","CampaignNewForm","isEdit","currentCampaign","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","setActiveStep","setCampaignType","VALIDATION_SCHEMAS","Task","Contest","Survey","Campaign","isLastStep","useFormik","enableReinitialize","initialValues","Date","validationSchema","onSubmit","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","campaign","list","all","prev","handleSubmit","isSubmitting","noValidate","autoComplete","val","Box","mr","LoadingButton","loading","CampaignCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href"],"mappings":"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","file":"static/js/14.b6269217.chunk.js","sourcesContent":["var data = {\n\t\"body\": \"<path fill=\\\"currentColor\\\" d=\\\"M19 11h-6V5a1 1 0 0 0-2 0v6H5a1 1 0 0 0 0 2h6v6a1 1 0 0 0 2 0v-6h6a1 1 0 0 0 0-2z\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","import PropTypes from 'prop-types';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport { IconButton, Stack, TextField } from '@mui/material';\n\nconst DynamicFormItem = ({ label, fieldProps, error, helperText, isLastItem, onAddClick, onRemoveClick }) => (\n  <Stack direction=\"row\" spacing={1}>\n    <TextField fullWidth size=\"small\" label={label} {...fieldProps} error={error} helperText={helperText} />\n    {isLastItem ? (\n      <IconButton color=\"primary\" onClick={onAddClick}>\n        <AddIcon />\n      </IconButton>\n    ) : (\n      <IconButton color=\"error\" onClick={onRemoveClick}>\n        <DeleteIcon />\n      </IconButton>\n    )}\n  </Stack>\n);\n\nDynamicFormItem.propTypes = {\n  label: PropTypes.string,\n  fieldProps: PropTypes.object,\n  error: PropTypes.bool,\n  helperText: PropTypes.string,\n  isLastItem: PropTypes.bool,\n  onAddClick: PropTypes.func,\n  onRemoveClick: PropTypes.func,\n};\n\nexport default DynamicFormItem;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport CheckmarkFill from '@iconify/icons-eva/checkmark-fill';\nimport { withStyles } from '@mui/styles';\nimport { Box, Step, StepConnector, StepLabel, Stepper } from '@mui/material';\n\nconst QontoConnector = withStyles((theme) => ({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 20px)',\n    right: 'calc(50% + 20px)',\n  },\n  active: {\n    '& $line': { borderColor: theme.palette.primary.main },\n  },\n  completed: {\n    '& $line': { borderColor: theme.palette.primary.main },\n  },\n  line: {\n    borderTopWidth: 2,\n    borderColor: theme.palette.divider,\n  },\n}))(StepConnector);\n\nfunction QontoStepIcon({ active, completed }) {\n  return (\n    <Box\n      sx={{\n        zIndex: 9,\n        width: 24,\n        height: 24,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: active ? 'primary.main' : 'divider',\n        bgcolor: 'background.default',\n      }}\n    >\n      {completed ? (\n        <Box component={Icon} icon={CheckmarkFill} sx={{ zIndex: 1, width: 20, height: 20, color: 'primary.main' }} />\n      ) : (\n        <Box\n          sx={{\n            width: 8,\n            height: 8,\n            borderRadius: '50%',\n            backgroundColor: 'currentColor',\n          }}\n        />\n      )}\n    </Box>\n  );\n}\n\nQontoStepIcon.propTypes = {\n  active: PropTypes.bool,\n  completed: PropTypes.bool,\n};\n\nconst Steps = ({ steps, activeStep }) => (\n  <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\n    {steps.map((label) => (\n      <Step key={label}>\n        <StepLabel\n          StepIconComponent={QontoStepIcon}\n          sx={{\n            '& .MuiStepLabel-label': {\n              typography: 'subtitle2',\n              color: 'text.disabled',\n            },\n          }}\n        >\n          {label}\n        </StepLabel>\n      </Step>\n    ))}\n  </Stepper>\n);\n\nSteps.propTypes = {\n  steps: PropTypes.array,\n  activeStep: PropTypes.number,\n};\n\nexport default Steps;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import * as Yup from 'yup';\nimport { nameRegExp } from '../../utils/constants/regexs';\n\nexport const CampaignTypeSchema = Yup.object().shape({\n  brand: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Brand is required'),\n  campaignType: Yup.string(),\n});\n\nexport const TaskAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  taskType: Yup.string(),\n  tier: Yup.string(),\n  associatedBonus: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const TaskDetailSchema = Yup.object().shape({\n  headerImage: Yup.mixed(),\n  description: Yup.string(),\n  totalBudget: Yup.number(),\n  perUser: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  doList: Yup.array().of(Yup.string()),\n  dontList: Yup.array().of(Yup.string()),\n  igCaptionQuestions: Yup.array().of(Yup.string()),\n  noOfPhotoRequired: Yup.number(),\n  noOfVideoRequired: Yup.number(),\n  hashtags: Yup.array().of(Yup.string()),\n  mentions: Yup.array().of(Yup.string()),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n});\n\nexport const ContestAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  contestType: Yup.string(),\n  tier: Yup.string(),\n  associatedBonus: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const ContestDetailSchema = Yup.object().shape({\n  headerImage: Yup.mixed(),\n  description: Yup.string(),\n  totalBudget: Yup.number(),\n  winnerToken: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  doList: Yup.array().of(Yup.string()),\n  dontList: Yup.array().of(Yup.string()),\n  igCaptionQuestions: Yup.array().of(Yup.string()),\n  noOfPhotoRequired: Yup.number(),\n  noOfVideoRequired: Yup.number(),\n  hashtags: Yup.array().of(Yup.string()),\n  mentions: Yup.array().of(Yup.string()),\n  contestStartDate: Yup.date().nullable(true),\n  contestEndDate: Yup.date().when('contestStartDate', (contestStartDate, schema) =>\n    contestStartDate ? schema.min(contestStartDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  votingStartDate: Yup.date().nullable(true),\n  votingEndDate: Yup.date().when('votingStartDate', (votingStartDate, schema) =>\n    votingStartDate ? schema.min(votingStartDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  winnerDate: Yup.date().nullable(true),\n});\n\nexport const SurveyAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  description: Yup.string(),\n  percentageColor: Yup.string(),\n  starPerUser: Yup.number(),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  surveyQuestions: Yup.array().of(Yup.object().shape({ title: Yup.string(), options: Yup.array().of(Yup.string()) })),\n});\n\nexport const WatchAdSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  taskType: Yup.string(),\n  totalBudget: Yup.number(),\n  perUser: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  tier: Yup.string(),\n  associatedBonus: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const WatchAdDetailSchema = Yup.object().shape({\n  adVideo: Yup.mixed().required('Ad Video is required'),\n  adVideoThumbnail: Yup.mixed().required('Thumbnail is required'),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n});\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardMediaUtilityClass(slot) {\n  return generateUtilityClass('MuiCardMedia', slot);\n}\nconst cardMediaClasses = generateUtilityClasses('MuiCardMedia', ['root', 'media', 'img']);\nexport default cardMediaClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"image\", \"src\", \"style\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getCardMediaUtilityClass } from './cardMediaClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    isMediaComponent,\n    isImageComponent\n  } = ownerState;\n  const slots = {\n    root: ['root', isMediaComponent && 'media', isImageComponent && 'img']\n  };\n  return composeClasses(slots, getCardMediaUtilityClass, classes);\n};\n\nconst CardMediaRoot = styled('div', {\n  name: 'MuiCardMedia',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      isMediaComponent,\n      isImageComponent\n    } = ownerState;\n    return [styles.root, isMediaComponent && styles.media, isImageComponent && styles.img];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'block',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  backgroundPosition: 'center'\n}, ownerState.isMediaComponent && {\n  width: '100%'\n}, ownerState.isImageComponent && {\n  // ⚠️ object-fit is not supported by IE11.\n  objectFit: 'cover'\n}));\nconst MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];\nconst IMAGE_COMPONENTS = ['picture', 'img'];\nconst CardMedia = /*#__PURE__*/React.forwardRef(function CardMedia(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardMedia'\n  });\n\n  const {\n    children,\n    className,\n    component = 'div',\n    image,\n    src,\n    style\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;\n  const composedStyle = !isMediaComponent && image ? _extends({\n    backgroundImage: `url(\"${image}\")`\n  }, style) : style;\n\n  const ownerState = _extends({}, props, {\n    component,\n    isMediaComponent,\n    isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardMediaRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    role: !isMediaComponent && image ? 'image' : undefined,\n    ref: ref,\n    style: composedStyle,\n    ownerState: ownerState,\n    src: isMediaComponent ? image || src : undefined\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardMedia.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    if (!props.children && !props.image && !props.src && !props.component) {\n      return new Error('MUI: Either `children`, `image`, `src` or `component` prop must be specified.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image: PropTypes.string,\n\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardMedia;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\n\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !ownerState.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n\n  const {\n    disableSpacing = false,\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardActions;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  FormControlLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  Stack,\n  TextField,\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst CAMPAIGN_TYPES = ['Task', 'Contest', 'Survey', 'Watch Ad', 'Campaign'];\n\nconst CampaignTypeForm = ({ formik, onCampaignTypeChange }) => {\n  const theme = useTheme();\n  const { errors, values, touched, getFieldProps, setFieldValue } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Grid container>\n            <Grid item xs={12} md={4}>\n              <TextField\n                select\n                fullWidth\n                size=\"small\"\n                label=\"Select Brand\"\n                placeholder=\"Brand\"\n                {...getFieldProps('brand')}\n                SelectProps={{ native: true }}\n                error={Boolean(touched.brand && errors.brand)}\n                helperText={touched.brand && errors.brand}\n              >\n                <option value=\"\" />\n                {['Adidas', 'Nike'].map((option, index) => (\n                  <option key={option + index} value={option}>\n                    {option}\n                  </option>\n                ))}\n              </TextField>\n            </Grid>\n          </Grid>\n\n          <RadioGroup\n            {...getFieldProps('campaignType')}\n            value={values.campaignType}\n            onChange={(e) => {\n              console.log(e.target.value);\n              setFieldValue('campaignType', e.target.value);\n              onCampaignTypeChange(e.target.value);\n            }}\n          >\n            <Grid container spacing={1.5} direction=\"row\" columns={10}>\n              {CAMPAIGN_TYPES.map((type) => {\n                const isSelected = values.campaignType === type;\n                return (\n                  <Grid item xs={5} md={2} key={type}>\n                    <Card\n                      variant={isSelected ? 'elevation' : 'outlined'}\n                      sx={{\n                        ...(isSelected && {\n                          border: `solid 2px ${theme.palette.primary.main}`,\n                        }),\n                      }}\n                    >\n                      <CardMedia\n                        sx={{ height: 140 }}\n                        image=\"/static/mock-images/products/product_1.jpg\"\n                        title=\"Contemplative Reptile\"\n                      />\n                      <CardContent>{type}</CardContent>\n                      <CardActions>\n                        <FormControlLabel\n                          label=\"\"\n                          value={type}\n                          control={<Radio sx={{ display: 'none' }} />}\n                          sx={{\n                            top: 0,\n                            margin: 0,\n                            width: '100%',\n                            height: '100%',\n                            position: 'absolute',\n                          }}\n                        />\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </RadioGroup>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nCampaignTypeForm.propTypes = {\n  formik: PropTypes.object,\n  onCampaignTypeChange: PropTypes.func,\n};\n\nexport default CampaignTypeForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nconst TaskAndRewardsForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Task Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Type\"\n                  {...getFieldProps(`taskType`)}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.taskType && errors.taskType)}\n                  helperText={touched.taskType && errors.taskType}\n                >\n                  {['Video', 'Video With Sound', 'Photo'].map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps(`tier`)}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                >\n                  {['Public', 'Specific Group', 'Level2', 'Level3', 'Bonus Winner Task'].map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n                {values.tier === 'Bonus Winner Task' && (\n                  <TextField\n                    select\n                    fullWidth\n                    size=\"small\"\n                    label=\"Associated Bonus\"\n                    {...getFieldProps(`associatedBonus`)}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.associatedBonus && errors.associatedBonus)}\n                    helperText={touched.associatedBonus && errors.associatedBonus}\n                  >\n                    {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                  </TextField>\n                )}\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of public, the task goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nTaskAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default TaskAndRewardsForm;\n","import React, { useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@mui/material/styles';\nimport { DateTimePicker } from '@mui/lab';\nimport {\n  Autocomplete,\n  Avatar,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  FormHelperText,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material';\n// components\nimport { UploadSingleFile } from '../../upload';\nimport DynamicFormItem from '../../DynamicFormItem';\n\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst TaskDetailForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps, setFieldValue } = formik;\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('headerImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Header Image</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"image/*\"\n              file={values.coverUrl}\n              onDrop={handleCoverDrop}\n              error={Boolean(touched.coverUrl && errors.coverUrl)}\n            />\n            {touched.coverUrl && errors.coverUrl && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.coverUrl && errors.coverUrl}\n              </FormHelperText>\n            )}\n          </Stack>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Total Budget\"\n                    type=\"number\"\n                    {...getFieldProps('totalBudget')}\n                    error={Boolean(touched.totalBudget && errors.totalBudget)}\n                    helperText={(touched.totalBudget && errors.totalBudget) || '50000 tokens available - View Detail'}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Per User\"\n                    {...getFieldProps('perUser')}\n                    error={Boolean(touched.perUser && errors.perUser)}\n                    helperText={\n                      (touched.perUser && errors.perUser) ||\n                      `Estimated user number: budget/tokenPerUser = ${\n                        Number.isNaN(values.totalBudget / values.perUser) ? 0 : values.totalBudget / values.perUser\n                      } users`\n                    }\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Continue After Budget\"\n                    {...getFieldProps('continueAfterBudget')}\n                    error={Boolean(touched.continueAfterBudget && errors.continueAfterBudget)}\n                    helperText={touched.continueAfterBudget && errors.continueAfterBudget}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Stack>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <LabelStyle>Bonus Reward & Benefits</LabelStyle>\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                <Button size=\"small\" variant=\"contained\" component={RouterLink} to={PATH_DASHBOARD.reward.create}>\n                  Add New\n                </Button>\n                <Button variant=\"contained\">Select More</Button>\n              </Stack>\n            </Stack>\n            <Stack direction=\"row\" spacing={1}>\n              {[1, 2, 3, 4, 5, 6].map((item, index) => (\n                <Avatar\n                  key={item + index}\n                  alt=\"bonus&rewards\"\n                  src=\"/static/mock-images/products/product_1.jpg\"\n                  sx={{ width: 64, height: 64 }}\n                />\n              ))}\n            </Stack>\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"doList\"\n            render={(arrHelper) => {\n              const value = values.doList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `doList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Do ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"dontList\"\n            render={(arrHelper) => {\n              const value = values.dontList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `dontList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Don't ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"igCaptionQuestions\"\n            render={(arrHelper) => {\n              const value = values.igCaptionQuestions;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `igCaptionQuestions.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Instagram Caption Question ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of photo required\"\n              type=\"number\"\n              {...getFieldProps('noOfPhotoRequired')}\n              error={Boolean(touched.noOfPhotoRequired && errors.noOfPhotoRequired)}\n              helperText={touched.noOfPhotoRequired && errors.noOfPhotoRequired}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of video required\"\n              type=\"number\"\n              {...getFieldProps('noOfVideoRequired')}\n              error={Boolean(touched.noOfVideoRequired && errors.noOfVideoRequired)}\n              helperText={touched.noOfVideoRequired && errors.noOfVideoRequired}\n            />\n          </Stack>\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.hashtags}\n            onChange={(event, newValue) => {\n              setFieldValue('hashtags', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n          />\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.mentions}\n            onChange={(event, newValue) => {\n              setFieldValue('mentions', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Mentions\" />}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nTaskDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default TaskDetailForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nconst ContestAndRewardsForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Contest Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Contest Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Type\"\n                  {...getFieldProps(`taskType`)}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.taskType && errors.taskType)}\n                  helperText={touched.taskType && errors.taskType}\n                >\n                  {['Video', 'Video With Sound', 'Photo'].map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps(`tier`)}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                >\n                  {['Public', 'Specific Group', 'Level2', 'Level3', 'Bonus Winner Task'].map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n                {values.tier === 'Bonus Winner Task' && (\n                  <TextField\n                    select\n                    fullWidth\n                    size=\"small\"\n                    label=\"Associated Bonus\"\n                    {...getFieldProps(`associatedBonus`)}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.associatedBonus && errors.associatedBonus)}\n                    helperText={touched.associatedBonus && errors.associatedBonus}\n                  >\n                    {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                  </TextField>\n                )}\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of Public, the contest goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nContestAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default ContestAndRewardsForm;\n","import React, { useCallback } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@mui/material/styles';\nimport { DateTimePicker } from '@mui/lab';\nimport {\n  Autocomplete,\n  Avatar,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  FormHelperText,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material';\n// components\nimport { UploadSingleFile } from '../../upload';\nimport DynamicFormItem from '../../DynamicFormItem';\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst ContestDetailForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps, setFieldValue } = formik;\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('headerImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Header Image</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"image/*\"\n              file={values.headerImage}\n              onDrop={handleCoverDrop}\n              error={Boolean(touched.headerImage && errors.headerImage)}\n            />\n            {touched.headerImage && errors.headerImage && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.headerImage && errors.headerImage}\n              </FormHelperText>\n            )}\n          </Stack>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Total Budget\"\n                    type=\"number\"\n                    {...getFieldProps('totalBudget')}\n                    error={Boolean(touched.totalBudget && errors.totalBudget)}\n                    helperText={touched.totalBudget && errors.totalBudget}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Winner Token\"\n                    {...getFieldProps('winnerToken')}\n                    error={Boolean(touched.winnerToken && errors.winnerToken)}\n                    helperText={(touched.winnerToken && errors.winnerToken) || '50000 tokens available - View Detail'}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <Grid container>\n                    <Grid item xs={12} md={4}>\n                      <TextField\n                        fullWidth\n                        size=\"small\"\n                        label=\"Continue After Budget\"\n                        {...getFieldProps('continueAfterBudget')}\n                        error={Boolean(touched.continueAfterBudget && errors.continueAfterBudget)}\n                        helperText={touched.continueAfterBudget && errors.continueAfterBudget}\n                      />\n                    </Grid>\n                  </Grid>\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Stack>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <LabelStyle>Bonus Reward & Benefits</LabelStyle>\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                <Button size=\"small\" variant=\"contained\" component={RouterLink} to={PATH_DASHBOARD.reward.create}>\n                  Add New\n                </Button>\n                <Button variant=\"contained\">Select More</Button>\n              </Stack>\n            </Stack>\n            <Stack direction=\"row\" spacing={1}>\n              {[1, 2, 3, 4, 5, 6].map((item, index) => (\n                <Avatar\n                  key={item + index}\n                  alt=\"bonus&rewards\"\n                  src=\"/static/mock-images/products/product_1.jpg\"\n                  sx={{ width: 64, height: 64 }}\n                />\n              ))}\n            </Stack>\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"doList\"\n            render={(arrHelper) => {\n              const value = values.doList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `doList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Do ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"dontList\"\n            render={(arrHelper) => {\n              const value = values.dontList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `dontList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Don't ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"igCaptionQuestions\"\n            render={(arrHelper) => {\n              const value = values.igCaptionQuestions;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `igCaptionQuestions.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Instagram Caption Question ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of photo required\"\n              type=\"number\"\n              {...getFieldProps('noOfPhotoRequired')}\n              error={Boolean(touched.noOfPhotoRequired && errors.noOfPhotoRequired)}\n              helperText={touched.noOfPhotoRequired && errors.noOfPhotoRequired}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of video required\"\n              type=\"number\"\n              {...getFieldProps('noOfVideoRequired')}\n              error={Boolean(touched.noOfVideoRequired && errors.noOfVideoRequired)}\n              helperText={touched.noOfVideoRequired && errors.noOfVideoRequired}\n            />\n          </Stack>\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.hashtags}\n            onChange={(event, newValue) => {\n              setFieldValue('hashtags', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n          />\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.mentions}\n            onChange={(event, newValue) => {\n              setFieldValue('mentions', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Mentions\" />}\n          />\n\n          <Card>\n            <CardHeader title=\"Contest Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Start date\"\n                  value={values.contestStartDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('contestStartDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.contestStartDate && errors.contestStartDate)}\n                      helperText={touched.contestStartDate && errors.contestStartDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.contestEndDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('contestEndDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.contestEndDate && errors.contestEndDate)}\n                      helperText={touched.contestEndDate && errors.contestEndDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Voting Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Start date\"\n                  value={values.votingStartDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('votingStartDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.votingStartDate && errors.votingStartDate)}\n                      helperText={touched.votingStartDate && errors.votingStartDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.votingEndDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('votingEndDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.votingEndDate && errors.votingEndDate)}\n                      helperText={touched.votingEndDate && errors.votingEndDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Winner Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Winner date\"\n                  value={values.winnerDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('winnerDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.winnerDate && errors.winnerDate)}\n                      helperText={touched.winnerDate && errors.winnerDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nContestDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default ContestDetailForm;\n","const colors = [\n  { value: 'blue', label: 'Blue' },\n  { value: 'red', label: 'Red' },\n  { value: 'green', label: 'Green' },\n  { value: 'purple', label: 'Purple' },\n];\n\nexport default colors;\n","import PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport { DateTimePicker } from '@mui/lab';\nimport { Button, Card, CardContent, CardHeader, Grid, IconButton, Stack, TextField } from '@mui/material';\n\n// utils\nimport colors from '../../../utils/constants/colors';\n// ----------------------------------------------------------------------\n\nconst initialQuestion = {\n  title: '',\n  options: [''],\n};\n\nconst SurveyAndRewardsForm = ({ formik }) => {\n  const { errors, values, touched, setFieldValue, getFieldProps } = formik;\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Name\"\n              {...getFieldProps('name')}\n              error={Boolean(touched.name && errors.name)}\n              helperText={touched.name && errors.name}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              select\n              size=\"small\"\n              label=\"Percentage Color\"\n              {...getFieldProps('percentageColor')}\n              SelectProps={{ native: true }}\n              error={Boolean(touched.percentageColor && errors.percentageColor)}\n              helperText={touched.percentageColor && errors.percentageColor}\n            >\n              <option value=\"\" />\n              {colors.map((color) => (\n                <option value={color.value} key={color.value}>\n                  {color.label}\n                </option>\n              ))}\n            </TextField>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Star Per User\"\n              type=\"number\"\n              {...getFieldProps('starPerUser')}\n              error={Boolean(touched.starPerUser && errors.starPerUser)}\n              helperText={touched.starPerUser && errors.starPerUser}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"surveyQuestions\"\n            render={(questionArrayHelpers) => (\n              <Card>\n                <CardHeader\n                  title=\"Questions\"\n                  action={\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<Icon icon={PlusFill} />}\n                      onClick={() => questionArrayHelpers.push(initialQuestion)}\n                    >\n                      Add New\n                    </Button>\n                  }\n                />\n                <CardContent>\n                  <Stack spacing={2}>\n                    {values.surveyQuestions.map((question, questionIndex) => {\n                      console.log('question index: ', questionIndex);\n                      return (\n                        <Card key={questionIndex}>\n                          <CardHeader\n                            title={`Question ${questionIndex + 1}`}\n                            titleTypographyProps={{ variant: 'h8' }}\n                          />\n                          <CardContent>\n                            <Stack spacing={1}>\n                              <TextField\n                                fullWidth\n                                size=\"small\"\n                                label=\"Title\"\n                                {...getFieldProps(`surveyQuestions.${questionIndex}.title`)}\n                                error={Boolean(\n                                  getIn(touched, `surveyQuestions.${questionIndex}.title`) &&\n                                    getIn(errors, `surveyQuestions.${questionIndex}.title`)\n                                )}\n                                helperText={\n                                  getIn(touched, `surveyQuestions.${questionIndex}.title`) &&\n                                  getIn(errors, `surveyQuestions.${questionIndex}.title`)\n                                }\n                              />\n                              <FieldArray\n                                name={`surveyQuestions.${questionIndex}.options`}\n                                render={(optArrayHelpers) => (\n                                  <>\n                                    {values.surveyQuestions[questionIndex].options.map((option, optionIndex) => {\n                                      const optionFieldName = `surveyQuestions.${questionIndex}.options.${optionIndex}`;\n                                      return (\n                                        <Stack key={optionIndex} direction=\"row\" spacing={1}>\n                                          <TextField\n                                            fullWidth\n                                            size=\"small\"\n                                            label={`Option ${optionIndex + 1}`}\n                                            {...getFieldProps(optionFieldName)}\n                                            error={Boolean(\n                                              getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                            )}\n                                            helperText={\n                                              getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                            }\n                                          />\n                                          <IconButton\n                                            color=\"error\"\n                                            aria-label=\"delete\"\n                                            onClick={() => optArrayHelpers.remove(optionIndex)}\n                                          >\n                                            <DeleteIcon />\n                                          </IconButton>\n                                        </Stack>\n                                      );\n                                    })}\n                                    <IconButton\n                                      color=\"primary\"\n                                      aria-label=\"plus\"\n                                      onClick={() => optArrayHelpers.push('')}\n                                    >\n                                      <AddIcon />\n                                    </IconButton>\n                                  </>\n                                )}\n                              />\n                            </Stack>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </Stack>\n                </CardContent>\n              </Card>\n            )}\n          />\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nSurveyAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default SurveyAndRewardsForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nconst WatchAdForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Task Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  // fullWidth\n                  size=\"small\"\n                  label=\"Task Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                {/* <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Type\"\n                  {...getFieldProps(`taskType`)}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.taskType && errors.taskType)}\n                  helperText={touched.taskType && errors.taskType}\n                >\n                  {['Video', 'Video With Sound'].map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField> */}\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  size=\"small\"\n                  label=\"Total Budget\"\n                  type=\"number\"\n                  {...getFieldProps('totalBudget')}\n                  error={Boolean(touched.totalBudget && errors.totalBudget)}\n                  helperText={(touched.totalBudget && errors.totalBudget) || '50000 tokens available - View Detail'}\n                />\n                <TextField\n                  size=\"small\"\n                  label=\"Per User\"\n                  {...getFieldProps('perUser')}\n                  error={Boolean(touched.perUser && errors.perUser)}\n                  helperText={\n                    (touched.perUser && errors.perUser) ||\n                    `Estimated user number: budget/tokenPerUser = ${\n                      Number.isNaN(values.totalBudget / values.perUser) ? 0 : values.totalBudget / values.perUser\n                    } users`\n                  }\n                />\n                <TextField\n                  size=\"small\"\n                  label=\"Star Per User\"\n                  type=\"number\"\n                  {...getFieldProps('starPerUser')}\n                  error={Boolean(touched.starPerUser && errors.starPerUser)}\n                  helperText={touched.starPerUser && errors.starPerUser}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps(`tier`)}\n                  SelectProps={{ native: true }}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                >\n                  {['Public', 'Specific Group', 'Level2', 'Level3', 'Bonus Winner Task'].map((option) => (\n                    <option key={option} value={option}>\n                      {option}\n                    </option>\n                  ))}\n                </TextField>\n                {values.tier === 'Bonus Winner Task' && (\n                  <TextField\n                    select\n                    fullWidth\n                    size=\"small\"\n                    label=\"Associated Bonus\"\n                    {...getFieldProps(`associatedBonus`)}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.associatedBonus && errors.associatedBonus)}\n                    helperText={touched.associatedBonus && errors.associatedBonus}\n                  >\n                    {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                      <option key={option} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                  </TextField>\n                )}\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of public, the task goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nWatchAdForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default WatchAdForm;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@mui/material/styles';\nimport { DateTimePicker } from '@mui/lab';\nimport { Card, FormHelperText, Grid, Stack, TextField, Typography } from '@mui/material';\n// components\nimport { UploadAvatar, UploadSingleFile } from '../../upload';\n\nimport { fData } from '../../../utils/formatNumber';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst WatchAdDetailForm = ({ formik }) => {\n  const { values, errors, touched, setFieldValue } = formik;\n\n  const handleVideoDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('adVideo', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  const handleThumbnailDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('adVideoThumbnail', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Upload Ad Video</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"video/*\"\n              file={values.adVideo}\n              onDrop={handleVideoDrop}\n              error={Boolean(touched.adVideo && errors.adVideo)}\n            />\n            {touched.adVideo && errors.adVideo && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.adVideo && errors.adVideo}\n              </FormHelperText>\n            )}\n          </Stack>\n          <Stack>\n            <LabelStyle>Video Thumbnail</LabelStyle>\n            <UploadAvatar\n              accept=\"image/*\"\n              file={values.adVideoThumbnail}\n              maxSize={3145728}\n              onDrop={handleThumbnailDrop}\n              error={Boolean(touched.adVideoThumbnail && errors.adVideoThumbnail)}\n              caption={\n                <Typography\n                  variant=\"caption\"\n                  sx={{\n                    mt: 2,\n                    mx: 'auto',\n                    display: 'block',\n                    textAlign: 'center',\n                    color: 'text.secondary',\n                  }}\n                >\n                  Allowed *.jpeg, *.jpg, *.png, *.gif\n                  <br /> max size of {fData(3145728)}\n                </Typography>\n              }\n            />\n            <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n              {touched.adVideoThumbnail && errors.adVideoThumbnail}\n            </FormHelperText>\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nWatchAdDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default WatchAdDetailForm;\n","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n\n// material\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Card, Grid, Stack, Button } from '@mui/material';\n// paths\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// validations\nimport {\n  CampaignTypeSchema,\n  TaskAndRewardsSchema,\n  TaskDetailSchema,\n  ContestAndRewardsSchema,\n  ContestDetailSchema,\n  SurveyAndRewardsSchema,\n  WatchAdSchema,\n  WatchAdDetailSchema,\n} from './validations';\n// components\nimport Steps from '../Steps';\nimport CampaignTypeForm from './CampaignTypeForm';\nimport TaskAndRewardsForm from './task/TaskAndRewardsForm';\nimport TaskDetailForm from './task/TaskDetailForm';\nimport ContestAndRewardsForm from './contest/ContestAndRewardsForm';\nimport ContestDetailForm from './contest/ContestDetailForm';\nimport SurveyAndRewardsForm from './survey/SurveyAndRewardsForm';\nimport WatchAdForm from './watch-ad/WatchAdForm';\nimport WatchAdDetailForm from './watch-ad/WatchAdDetailForm';\n\n// ----------------------------------------------------------------------\n\nconst STEPS = ['Campaign Type', 'Task & Rewards', 'Task Detail'];\nconst initialSurveyQuestion = {\n  title: '',\n  options: [''],\n};\n\nfunction CampaignNewForm({ isEdit, currentCampaign }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n  const [activeStep, setActiveStep] = useState(0);\n  const [campaignType, setCampaignType] = useState('Task');\n\n  // const VALIDATION_SCHEMAS = [CampaignTypeSchema, TaskAndRewardsSchema, TaskDetailSchema];\n\n  const VALIDATION_SCHEMAS = {\n    0: {\n      Task: CampaignTypeSchema,\n      Contest: CampaignTypeSchema,\n      Survey: CampaignTypeSchema,\n      'Watch Ad': CampaignTypeSchema,\n      Campaign: CampaignTypeSchema,\n    },\n    1: {\n      Task: TaskAndRewardsSchema,\n      Contest: ContestAndRewardsSchema,\n      Survey: SurveyAndRewardsSchema,\n      'Watch Ad': WatchAdSchema,\n      Campaign: Yup.object(),\n    },\n    2: {\n      Task: TaskDetailSchema,\n      Contest: ContestDetailSchema,\n      Survey: Yup.object(),\n      'Watch Ad': WatchAdDetailSchema,\n      Campaign: Yup.object(),\n    },\n  };\n\n  const isLastStep = () => activeStep === STEPS.length - 1;\n\n  const handlePrevStep = () => setActiveStep((prev) => prev - 1);\n\n  const handleNextStep = () => setActiveStep((prev) => prev + 1);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      brand: currentCampaign?.brand || '',\n      campaignType: currentCampaign?.campaignType || 'Task',\n      name: currentCampaign?.name || '',\n      taskType: currentCampaign?.taskType || 'Video',\n      totalBudget: currentCampaign?.totalBudget || undefined,\n      perUser: currentCampaign?.perUser || '',\n      starPerUser: currentCampaign?.starPerUser || undefined,\n      continueAfterBudget: currentCampaign?.continueAfterBudget || '',\n      tier: currentCampaign?.tier || 'Public',\n      associatedBonus: currentCampaign?.associatedBonus || 'Bonus 1',\n      isPublic: currentCampaign?.isPublic || false,\n      headerImage: currentCampaign?.headerImage || undefined,\n      doList: currentCampaign?.doList || [''],\n      dontList: currentCampaign?.dontList || [''],\n      igCaptionQuestions: currentCampaign?.igCaptionQuestions || [''],\n      noOfPhotoRequired: currentCampaign?.noOfPhotoRequired || undefined,\n      noOfVideoRequired: currentCampaign?.noOfVideoRequired || undefined,\n      hashtags: currentCampaign?.hashtags || [],\n      mentions: currentCampaign?.mentions || [],\n      startDate: currentCampaign?.startDate ? new Date(currentCampaign.startDate) : null,\n      endDate: currentCampaign?.endDate ? new Date(currentCampaign.endDate) : null,\n      surveyQuestions: currentCampaign?.surveyQuestions || [initialSurveyQuestion],\n      percentageColor: currentCampaign?.percentageColor || '',\n      adVideo: currentCampaign?.adVideo || null,\n      adVideoThumbnail: currentCampaign?.adVideoThumbnail || null,\n    },\n    validationSchema: VALIDATION_SCHEMAS[activeStep][campaignType],\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      if (isLastStep()) {\n        try {\n          alert(JSON.stringify(values));\n          resetForm();\n          setSubmitting(false);\n          enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n          navigate(PATH_DASHBOARD.campaign.list.all);\n        } catch (error) {\n          console.error(error);\n          setSubmitting(false);\n          setErrors(error);\n        }\n      } else {\n        handleNextStep();\n      }\n    },\n  });\n\n  const { errors, values, handleSubmit, isSubmitting } = formik;\n\n  const renderForm = () => {\n    const forms = {\n      0: {\n        Task: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Contest: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Survey: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        'Watch Ad': <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Campaign: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n      },\n      1: {\n        Task: <TaskAndRewardsForm formik={formik} />,\n        Contest: <ContestAndRewardsForm formik={formik} />,\n        Survey: <SurveyAndRewardsForm formik={formik} />,\n        'Watch Ad': <WatchAdForm formik={formik} />,\n        Campaign: <div>Campaign Form</div>,\n      },\n      2: {\n        Task: <TaskDetailForm formik={formik} />,\n        Contest: <ContestDetailForm formik={formik} />,\n        Survey: <div>Survey Detail Form</div>,\n        'Watch Ad': <WatchAdDetailForm formik={formik} />,\n        Campaign: <div>Campaign Form</div>,\n      },\n    };\n    return forms[activeStep][campaignType];\n  };\n\n  console.log('Active Step: ', activeStep);\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container justifyContent=\"center\">\n          <Grid item xs={12} md={8} sx={{ mb: 5 }}>\n            <Steps steps={STEPS} activeStep={activeStep} />\n          </Grid>\n        </Grid>\n\n        <Card sx={{ p: 3 }}>\n          <Stack spacing={3}>\n            {renderForm()}\n            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n              {activeStep !== 0 && (\n                <Button\n                  sx={{ mr: 2 }}\n                  variant=\"outlined\"\n                  onClick={isLastStep() ? () => console.log('Draft Clicked') : handlePrevStep}\n                >\n                  {isLastStep() ? 'Draft' : 'Back'}\n                </Button>\n              )}\n              <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                {isLastStep() ? 'Setup Complete' : 'Next'}\n              </LoadingButton>\n            </Box>\n          </Stack>\n        </Card>\n      </Form>\n    </FormikProvider>\n  );\n}\n\nCampaignNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentCampaign: PropTypes.object,\n};\n\nexport default CampaignNewForm;\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport CampaignNewForm from '../components/campaign/CampaignNewForm';\n\n// ----------------------------------------------------------------------\n\nfunction CampaignCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  const currentCampaign = {};\n\n  return (\n    <Page title=\"Campaign: Create a new campaign\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Create Campaign' : 'Edit Campaign'}\n          links={[\n            { name: 'Campaign', href: PATH_DASHBOARD.campaign.list.all },\n            { name: !isEdit ? 'Create Campaign' : name },\n          ]}\n        />\n        <CampaignNewForm isEdit={isEdit} currentCampaign={currentCampaign} />\n      </Container>\n    </Page>\n  );\n}\n\nexport default CampaignCreate;\n"],"sourceRoot":""}