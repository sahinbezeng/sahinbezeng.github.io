{"version":3,"sources":["components/HeaderBreadcrumbs.js","utils/constants/regexs.js","../node_modules/@iconify/icons-eva/plus-fill.js","components/survey/SurveyNewForm.js","pages/SurveyCreate.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","spacing","direction","alignItems","flexGrow","variant","gutterBottom","flexShrink","isString","href","target","map","noWrap","display","phoneRegExp","addressRegExp","nameRegExp","exports","__esModule","default","initialQuestion","title","options","SurveyNewForm","isEdit","currentSurvey","navigate","useNavigate","enqueueSnackbar","useSnackbar","NewSurveySchema","Yup","shape","matches","required","description","percentageColor","starPerUser","startDate","endDate","when","schema","min","questions","of","formik","useFormik","enableReinitialize","initialValues","Date","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","PATH_DASHBOARD","survey","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","log","value","noValidate","autoComplete","Grid","container","item","xs","md","Card","p","Stack","sm","TextField","fullWidth","size","label","Boolean","helperText","multiline","rows","type","DateTimePicker","inputFormat","onChange","date","isValidDate","renderInput","params","name","render","questionArrayHelpers","CardHeader","Button","startIcon","icon","plusFill","onClick","push","CardContent","question","questionIndex","titleTypographyProps","getIn","optArrayHelpers","option","optionIndex","optionFieldName","IconButton","color","remove","Delete","Add","Box","mt","justifyContent","mr","LoadingButton","loading","SurveyCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth"],"mappings":"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","file":"static/js/11.00112a28.chunk.js","sourcesContent":["import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@material-ui/core';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","var data = {\n\t\"body\": \"<path fill=\\\"currentColor\\\" d=\\\"M19 11h-6V5a1 1 0 0 0-2 0v6H5a1 1 0 0 0 0 2h6v6a1 1 0 0 0 2 0v-6h6a1 1 0 0 0 0-2z\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { FieldArray, Form, FormikProvider, getIn, useFormik } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n\nimport { Icon } from '@iconify/react';\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@material-ui/icons';\nimport { LoadingButton, DateTimePicker } from '@material-ui/lab';\nimport { Box, Button, Card, CardContent, CardHeader, Grid, IconButton, Stack, TextField } from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\nimport { nameRegExp } from '../../utils/constants/regexs';\n\n// ----------------------------------------------------------------------\n\nconst initialQuestion = {\n  title: '',\n  options: [''],\n};\n\nSurveyNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentSurvey: PropTypes.object,\n};\n\nexport default function SurveyNewForm({ isEdit, currentSurvey }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewSurveySchema = Yup.object().shape({\n    title: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Title is required'),\n    description: Yup.string(),\n    percentageColor: Yup.string(),\n    starPerUser: Yup.number().required('This field is required.'),\n    startDate: Yup.date(),\n    endDate: Yup.date().when(\n      'startDate',\n      (startDate, schema) => startDate && schema.min(startDate, 'End date must be later than start date')\n    ),\n    questions: Yup.array().of(Yup.object().shape({ title: Yup.string(), options: Yup.array().of(Yup.string()) })),\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      title: currentSurvey?.title || '',\n      description: currentSurvey?.description || '',\n      percentageColor: currentSurvey?.percentageColor || '',\n      starPerUser: currentSurvey?.starPerUser || null,\n      startDate: currentSurvey?.startDate ? new Date(currentSurvey.startDate) : null,\n      endDate: currentSurvey?.endDate ? new Date(currentSurvey.endDate) : null,\n      questions: currentSurvey?.questions || [initialQuestion],\n    },\n    validationSchema: NewSurveySchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.survey.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Title\"\n                    {...getFieldProps('title')}\n                    error={Boolean(touched.title && errors.title)}\n                    helperText={touched.title && errors.title}\n                  />\n                  {/* <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Contact Person Name\"\n                    {...getFieldProps('contactPersonName')}\n                    error={Boolean(touched.contactPersonName && errors.contactPersonName)}\n                    helperText={touched.contactPersonName && errors.contactPersonName}\n                  /> */}\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={3}\n                    size=\"small\"\n                    label=\"Description\"\n                    {...getFieldProps('description')}\n                    error={Boolean(touched.description && errors.description)}\n                    helperText={touched.description && errors.description}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Percentage Color\"\n                    {...getFieldProps('percentageColor')}\n                    error={Boolean(touched.percentageColor && errors.percentageColor)}\n                    helperText={touched.percentageColor && errors.percentageColor}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <DateTimePicker\n                    label=\"Start date\"\n                    value={values.startDate}\n                    inputFormat=\"dd/MM/yyyy hh:mm a\"\n                    onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        size=\"small\"\n                        fullWidth\n                        error={Boolean(touched.startDate && errors.startDate)}\n                        helperText={touched.startDate && errors.startDate}\n                        sx={{ mb: 3 }}\n                      />\n                    )}\n                  />\n                  <DateTimePicker\n                    label=\"End date\"\n                    value={values.endDate}\n                    inputFormat=\"dd/MM/yyyy hh:mm a\"\n                    onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        size=\"small\"\n                        fullWidth\n                        error={Boolean(touched.endDate && errors.endDate)}\n                        helperText={touched.endDate && errors.endDate}\n                        sx={{ mb: 3 }}\n                      />\n                    )}\n                  />\n                </Stack>\n\n                <FieldArray\n                  name=\"questions\"\n                  render={(questionArrayHelpers) => (\n                    <Card>\n                      <CardHeader\n                        title=\"Questions\"\n                        action={\n                          <Button\n                            variant=\"contained\"\n                            startIcon={<Icon icon={plusFill} />}\n                            onClick={() => questionArrayHelpers.push(initialQuestion)}\n                          >\n                            Add New\n                          </Button>\n                        }\n                      />\n                      <CardContent>\n                        <Stack spacing={2}>\n                          {values.questions.map((question, questionIndex) => {\n                            console.log('question index: ', questionIndex);\n                            return (\n                              <Card key={questionIndex}>\n                                <CardHeader\n                                  title={`Question ${questionIndex + 1}`}\n                                  titleTypographyProps={{ variant: 'h8' }}\n                                />\n                                <CardContent>\n                                  <Stack spacing={1}>\n                                    <TextField\n                                      fullWidth\n                                      size=\"small\"\n                                      label=\"Title\"\n                                      {...getFieldProps(`questions.${questionIndex}.title`)}\n                                      error={Boolean(\n                                        getIn(touched, `questions.${questionIndex}.title`) &&\n                                          getIn(errors, `questions.${questionIndex}.title`)\n                                      )}\n                                      helperText={\n                                        getIn(touched, `questions.${questionIndex}.title`) &&\n                                        getIn(errors, `questions.${questionIndex}.title`)\n                                      }\n                                    />\n                                    <FieldArray\n                                      name={`questions.${questionIndex}.options`}\n                                      render={(optArrayHelpers) => (\n                                        <>\n                                          {values.questions[questionIndex].options.map((option, optionIndex) => {\n                                            const optionFieldName = `questions.${questionIndex}.options.${optionIndex}`;\n                                            return (\n                                              <Stack key={optionIndex} direction=\"row\" spacing={1}>\n                                                <TextField\n                                                  fullWidth\n                                                  size=\"small\"\n                                                  label={`Option ${optionIndex + 1}`}\n                                                  {...getFieldProps(optionFieldName)}\n                                                  error={Boolean(\n                                                    getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                                  )}\n                                                  helperText={\n                                                    getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                                  }\n                                                />\n                                                <IconButton\n                                                  color=\"error\"\n                                                  aria-label=\"delete\"\n                                                  onClick={() => optArrayHelpers.remove(optionIndex)}\n                                                >\n                                                  <DeleteIcon />\n                                                </IconButton>\n                                              </Stack>\n                                            );\n                                          })}\n                                          <IconButton\n                                            color=\"primary\"\n                                            aria-label=\"plus\"\n                                            onClick={() => optArrayHelpers.push('')}\n                                          >\n                                            <AddIcon />\n                                          </IconButton>\n                                        </>\n                                      )}\n                                    />\n                                  </Stack>\n                                </CardContent>\n                              </Card>\n                            );\n                          })}\n                        </Stack>\n                      </CardContent>\n                    </Card>\n                  )}\n                />\n\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                  <Button sx={{ mr: 2 }} variant=\"outlined\" onClick={() => console.log('Draft Clicked')}>\n                    Draft\n                  </Button>\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                    Publish\n                  </LoadingButton>\n                </Box>\n              </Stack>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={4}>\n            <Card sx={{ p: 3 }}>Later Phase</Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@material-ui/core';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport SurveyNewForm from '../components/survey/SurveyNewForm';\n\n// ----------------------------------------------------------------------\n\nexport default function SurveyCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { title } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  const currentSurvey = {};\n\n  return (\n    <Page title=\"Survey: Create a new survey\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Create Survey' : 'Edit Survey'}\n          links={[{ name: 'Survey', href: PATH_DASHBOARD.survey.list }, { name: !isEdit ? 'Create Survey' : title }]}\n        />\n        <SurveyNewForm isEdit={isEdit} currentSurvey={currentSurvey} />\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}