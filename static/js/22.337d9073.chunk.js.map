{"version":3,"sources":["utils/constants/regexs.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","components/campaign/UserPostNewForm.js","pages/UserPostNew.js"],"names":["phoneRegExp","addressRegExp","nameRegExp","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","CardContent","React","inProps","ref","useThemeProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","as","clsx","NewUserSchema","Yup","shape","postImage","required","username","matches","question","description","UserPostNewForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","formik","useFormik","enableReinitialize","initialValues","hashtags","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","variant","PATH_DASHBOARD","brand","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","log","handleCoverDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","value","noValidate","autoComplete","Grid","container","spacing","item","xs","md","Card","Box","Typography","sx","display","textAlign","color","accept","maxSize","onDrop","Boolean","mt","mx","fData","FormHelperText","px","p","Stack","TextField","select","fullWidth","label","placeholder","SelectProps","native","helperText","map","option","index","Autocomplete","multiple","freeSolo","onChange","event","newValue","options","renderTags","getTagProps","Chip","size","renderInput","params","defaultValue","undefined","multiline","rows","justifyContent","LoadingButton","type","loading","UserPostNew","themeStretch","useSettings","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","campaign","all"],"mappings":"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","file":"static/js/22.337d9073.chunk.js","sourcesContent":["export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardContent;","import * as Yup from 'yup';\nimport React, { useCallback } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { LoadingButton } from '@mui/lab';\nimport {\n  Box,\n  Card,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n  FormHelperText,\n  CardContent,\n  Chip,\n  Autocomplete,\n} from '@mui/material';\n// utils\nimport { fData } from '../../utils/formatNumber';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// utils\nimport { nameRegExp } from '../../utils/constants/regexs';\n// components\nimport { UploadSingleFile } from '../upload';\n\n// ----------------------------------------------------------------------\n\nconst NewUserSchema = Yup.object().shape({\n  postImage: Yup.mixed().required('Post image is required'),\n  username: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('username is required'),\n  question: Yup.string(),\n  description: Yup.string(),\n});\n\nexport default function UserPostNewForm() {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      postImage: null,\n      username: 'johndoe',\n      hashtags: [],\n      question: 'Question One',\n      description: '',\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar('Create success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.brand.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  console.log('*** ', values, errors);\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('postImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card>\n              <Box>\n                <CardContent>\n                  <Typography\n                    // variant=\"caption\"\n                    sx={{\n                      display: 'block',\n                      textAlign: 'center',\n                      color: 'text.secondary',\n                    }}\n                  >\n                    Upload Image/Video/Audio\n                  </Typography>\n                  <UploadSingleFile\n                    accept=\"image/*, video/*, audio/*\"\n                    file={values.postImage}\n                    maxSize={3145728}\n                    onDrop={handleCoverDrop}\n                    error={Boolean(touched.postImage && errors.postImage)}\n                  />\n                  <Typography\n                    variant=\"caption\"\n                    sx={{\n                      mt: 2,\n                      mx: 'auto',\n                      display: 'block',\n                      textAlign: 'center',\n                      color: 'text.secondary',\n                    }}\n                  >\n                    Allowed *.jpeg, *.jpg, *.png, *.gif\n                    <br /> max size of {fData(3145728)}\n                  </Typography>\n                  <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                    {touched.postImage && errors.postImage}\n                  </FormHelperText>\n                </CardContent>\n              </Box>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <CardContent>\n                <Stack spacing={3}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        select\n                        fullWidth\n                        label=\"Select Username\"\n                        placeholder=\"Username\"\n                        {...getFieldProps('username')}\n                        SelectProps={{ native: true }}\n                        error={Boolean(touched.username && errors.username)}\n                        helperText={touched.username && errors.username}\n                      >\n                        {['johndoe', 'evedoe'].map((option, index) => (\n                          <option key={option + index} value={option}>\n                            {option}\n                          </option>\n                        ))}\n                      </TextField>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Autocomplete\n                        multiple\n                        freeSolo\n                        value={values.hashtags}\n                        onChange={(event, newValue) => {\n                          setFieldValue('hashtags', newValue);\n                        }}\n                        options={[]}\n                        renderTags={(value, getTagProps) =>\n                          value.map((option, index) => (\n                            <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n                          ))\n                        }\n                        renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n                      />\n                    </Grid>\n                  </Grid>\n\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Select Question\"\n                    placeholder=\"Question\"\n                    defaultValue={undefined}\n                    {...getFieldProps('question')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.question && errors.question)}\n                    helperText={touched.question && errors.question}\n                  >\n                    {['Question One', 'Question Two'].map((option, index) => (\n                      <option key={option + index} value={option}>\n                        {option}\n                      </option>\n                    ))}\n                  </TextField>\n\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={3}\n                    label=\"Description\"\n                    {...getFieldProps('description')}\n                    error={Boolean(touched.description && errors.description)}\n                    helperText={touched.description && errors.description}\n                  />\n\n                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                    <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                      Save Post\n                    </LoadingButton>\n                  </Box>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n","// material\nimport { Container } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport UserPostNewForm from '../components/campaign/UserPostNewForm';\n\n// ----------------------------------------------------------------------\n\nfunction UserPostNew() {\n  const { themeStretch } = useSettings();\n\n  return (\n    <Page title=\"Campaign: Create a new campaign\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Add User Post\"\n          links={[{ name: 'Campaign', href: PATH_DASHBOARD.campaign.list.all }, { name: 'Add User Post' }]}\n        />\n        <UserPostNewForm />\n      </Container>\n    </Page>\n  );\n}\n\nexport default UserPostNew;\n"],"sourceRoot":""}