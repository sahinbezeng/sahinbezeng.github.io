{"version":3,"sources":["utils/mockImages.js","components/reward/RewardListTable.js","components/reward/RewardSettings.js","pages/RewardList.js"],"names":["mockImgProduct","index","TABLE_HEAD","id","label","alignRight","RewardListTable","rewardList","theme","useTheme","Grid","container","spacing","sx","mt","item","xs","Typography","variant","Scrollbar","TableContainer","minWidth","Table","TableHead","TableRow","map","headCell","TableCell","align","TableBody","row","name","type","weeklyDispensed","dispensedWeeklyTokenValue","averageTokenValue","weeklyEarners","FormControlLabel","labelPlacement","control","Switch","mx","width","justifyContent","location","SettingsSchema","Yup","shape","tokenValue","required","starValueInTokens","keyValueInTokens","boosterValueInTokens","RewardSettings","currentSettings","enqueueSnackbar","useSnackbar","formik","useFormik","enableReinitialize","initialValues","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","error","console","errors","touched","handleSubmit","getFieldProps","isSubmitting","value","noValidate","autoComplete","md","Card","CardHeader","title","CardContent","Stack","direction","sm","TextField","fullWidth","size","InputProps","endAdornment","InputAdornment","position","Boolean","helperText","Box","display","LoadingButton","loading","endIcon","Save","RewardList","themeStretch","useSettings","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","reward","list","action","Button","component","RouterLink","to","create","startIcon","icon","PlusFill","height","avatarUrl","active","contents","frequency","numberOfKeys","numberOfCoins","numberOfStars","numberOfBoosters"],"mappings":"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","file":"static/js/24.90f0387a.chunk.js","sourcesContent":["// ----------------------------------------------------------------------\n\nexport const mockImgCover = (index) => `/static/mock-images/covers/cover_${index}.jpg`;\nexport const mockImgFeed = (index) => `/static/mock-images/feeds/feed_${index}.jpg`;\nexport const mockImgProduct = (index) => `/static/mock-images/products/product_${index}.jpg`;\nexport const mockImgAvatar = (index) => `/static/mock-images/avatars/avatar_${index}.jpg`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useTheme } from '@mui/material/styles';\nimport {\n  FormControlLabel,\n  Grid,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'type', label: 'Type', alignRight: false },\n  { id: 'weeklyDispensed', label: 'Weekly Dispensed', alignRight: false },\n  { id: 'dispensedWeeklyTokenValue', label: 'Dispensed Weekly (TokenValue)', alignRight: false },\n  { id: 'averageTokenValue', label: 'Average Token Value', alignRight: false },\n  { id: 'weeklyEarners', label: 'Users Past 7 Days', alignRight: false },\n  { id: 'active', label: 'Active', alignRight: false },\n  { id: 'location', label: 'Location In App', alignRight: false },\n];\n\nRewardListTable.propTypes = {\n  rewardList: PropTypes.array,\n};\n\nfunction RewardListTable({ rewardList = [] }) {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Reward List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rewardList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.type}</TableCell>\n                    <TableCell>{row.weeklyDispensed}</TableCell>\n                    <TableCell>{row.dispensedWeeklyTokenValue}</TableCell>\n                    <TableCell>{row.averageTokenValue}</TableCell>\n                    <TableCell>{row.weeklyEarners}</TableCell>\n                    {/* <TableCell>{row.active ? 'Yes' : 'No'}</TableCell> */}\n                    <TableCell>\n                      <FormControlLabel\n                        labelPlacement=\"start\"\n                        control={<Switch />}\n                        label={<Typography variant=\"subtitle2\">Active</Typography>}\n                        sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                      />\n                    </TableCell>\n                    <TableCell>{row.location}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default RewardListTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport * as Yup from 'yup';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport { Box, Card, CardContent, CardHeader, Grid, InputAdornment, Stack, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Save as SaveIcon } from '@mui/icons-material';\n\nconst SettingsSchema = Yup.object().shape({\n  tokenValue: Yup.number().required('This field is required.'),\n  starValueInTokens: Yup.number().required('This field is required.'),\n  keyValueInTokens: Yup.number().required('This field is required.'),\n  boosterValueInTokens: Yup.number().required('This field is required.'),\n});\n\nconst RewardSettings = ({ currentSettings }) => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      tokenValue: currentSettings?.tokenValue || 5,\n      starValueInTokens: currentSettings?.starValueInTokens || 5,\n      keyValueInTokens: currentSettings?.keyValueInTokens || 5,\n      boosterValueInTokens: currentSettings?.boosterValueInTokens || 5,\n    },\n    validationSchema: SettingsSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar('Update success', { variant: 'success' });\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, touched, handleSubmit, getFieldProps, isSubmitting } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item md={12}>\n            <Card>\n              <CardHeader title=\"Reward Settings\" />\n              <CardContent>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Token Value in USD\"\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">USD</InputAdornment>,\n                    }}\n                    {...getFieldProps('tokenValue')}\n                    error={Boolean(touched.tokenValue && errors.tokenValue)}\n                    helperText={touched.tokenValue && errors.tokenValue}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Value in Tokens\"\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">tokens</InputAdornment>,\n                    }}\n                    {...getFieldProps('starValueInTokens')}\n                    error={Boolean(touched.starValueInTokens && errors.starValueInTokens)}\n                    helperText={touched.starValueInTokens && errors.starValueInTokens}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Key Value in Tokens\"\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">tokens</InputAdornment>,\n                    }}\n                    {...getFieldProps('keyValueInTokens')}\n                    error={Boolean(touched.keyValueInTokens && errors.keyValueInTokens)}\n                    helperText={touched.keyValueInTokens && errors.keyValueInTokens}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Booster Value in Tokens\"\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">tokens</InputAdornment>,\n                    }}\n                    {...getFieldProps('boosterValueInTokens')}\n                    error={Boolean(touched.boosterValueInTokens && errors.boosterValueInTokens)}\n                    helperText={touched.boosterValueInTokens && errors.boosterValueInTokens}\n                  />\n                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                    <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} endIcon={<SaveIcon />}>\n                      Save\n                    </LoadingButton>\n                  </Box>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n};\n\nRewardSettings.propTypes = {\n  currentSettings: PropTypes.object,\n};\n\nexport default RewardSettings;\n","import { Link as RouterLink } from 'react-router-dom';\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\n// material\nimport { useTheme } from '@mui/material/styles';\nimport { Box, Button, Card, CardContent, Container, Stack, Typography } from '@mui/material';\n\nimport useSettings from '../hooks/useSettings';\n\nimport { PATH_DASHBOARD } from '../routes/paths';\n\nimport { mockImgProduct } from '../utils/mockImages';\n\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport RewardListTable from '../components/reward/RewardListTable';\nimport RewardSettings from '../components/reward/RewardSettings';\n\n// ----------------------------------------------------------------------\n\nconst RewardList = () => {\n  const { themeStretch } = useSettings();\n  const theme = useTheme();\n\n  return (\n    <Page title=\"Reward: List\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Reward List\"\n          links={[{ name: 'Reward', href: PATH_DASHBOARD.reward.list }, { name: 'List' }]}\n          action={\n            <Button\n              variant=\"contained\"\n              component={RouterLink}\n              to={PATH_DASHBOARD.reward.create}\n              startIcon={<Icon icon={PlusFill} />}\n            >\n              New Reward\n            </Button>\n          }\n        />\n        <RewardSettings\n          currentSettings={{ tokenValue: 44, starValueInTokens: 2, keyValueInTokens: 10, boosterValueInTokens: 20 }}\n        />\n        <Card sx={{ mt: theme.spacing(4) }}>\n          <CardContent>\n            <Stack spacing={1}>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Easter Egg</Typography>\n                <Typography variant=\"body2\">1800 tokens</Typography>\n              </Stack>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Present</Typography>\n                <Typography variant=\"body2\">1750 tokens</Typography>\n              </Stack>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Chest</Typography>\n                <Typography variant=\"body2\">2021 tokens</Typography>\n              </Stack>\n              <Stack direction=\"row\" spacing={2}>\n                <Typography variant=\"subtitle2\">Lottery Wheels</Typography>\n                <Typography variant=\"body2\">1907 tokens</Typography>\n              </Stack>\n            </Stack>\n          </CardContent>\n        </Card>\n        <Box sx={{ height: 720 }}>\n          <RewardListTable\n            rewardList={[\n              {\n                avatarUrl: mockImgProduct(1),\n                name: 'Easter Egg 2',\n                type: 'Easter Egg',\n                weeklyDispensed: 2890,\n                dispensedWeeklyTokenValue: 2890,\n                averageTokenValue: 1000,\n                weeklyEarners: 652,\n                active: true,\n                location: 'Default',\n                contents: [\n                  {\n                    title: 'Basic',\n                    frequency: 30,\n                    numberOfKeys: 5,\n                    numberOfCoins: 5,\n                    numberOfStars: 5,\n                    numberOfBoosters: 5,\n                  },\n                  {\n                    title: 'Rare',\n                    frequency: 30,\n                    numberOfKeys: 10,\n                    numberOfCoins: 15,\n                    numberOfStars: 5,\n                    numberOfBoosters: 10,\n                  },\n                  {\n                    title: 'Epic',\n                    frequency: 20,\n                    numberOfKeys: 20,\n                    numberOfCoins: 30,\n                    numberOfStars: 20,\n                    numberOfBoosters: 25,\n                  },\n                ],\n              },\n            ]}\n          />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default RewardList;\n"],"sourceRoot":""}