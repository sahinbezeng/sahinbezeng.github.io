{"version":3,"sources":["components/campaign/validations.js","components/campaign/CampaignTypeForm.js","components/campaign/task/TaskAndRewardsForm.js","components/campaign/BonusAndBenefits.js","components/campaign/task/TaskDetailForm.js","components/campaign/contest/ContestAndRewardsForm.js","components/campaign/contest/ContestDetailForm.js","utils/constants/colors.js","components/campaign/survey/SurveyAndRewardsForm.js","components/campaign/watch-ad/WatchAdForm.js","components/campaign/watch-ad/WatchAdDetailForm.js","components/campaign/CampaignNewForm.js","pages/CampaignCreate.js","components/HeaderBreadcrumbs.js","utils/formatNumber.js","utils/constants/regexs.js","components/upload/UploadMultiFile.js","components/upload/UploadSingleFile.js","components/upload/UploadAvatar.js","components/DynamicFormItem.js","components/Steps.js"],"names":["CampaignTypeSchema","Yup","shape","brand","matches","nameRegExp","required","campaignType","TaskAndRewardsSchema","name","taskType","tier","associatedBonus","isPublic","energyPerUser","min","TaskDetailSchema","headerImage","description","totalBudget","perUser","starPerUser","continueAfterBudget","doList","of","dontList","igCaptionQuestions","noOfPhotoRequired","noOfVideoRequired","hashtags","mentions","startDate","nullable","endDate","when","schema","ContestAndRewardsSchema","contestType","ContestDetailSchema","winnerToken","contestStartDate","contestEndDate","votingStartDate","votingEndDate","winnerDate","SurveyAndRewardsSchema","percentageColor","surveyQuestions","title","options","WatchAdSchema","WatchAdDetailSchema","adVideo","adVideoThumbnail","CAMPAIGN_TYPES","CampaignTypeForm","formik","onCampaignTypeChange","theme","useTheme","errors","values","touched","getFieldProps","setFieldValue","Grid","container","spacing","item","md","Stack","xs","TextField","select","fullWidth","size","label","placeholder","error","Boolean","helperText","map","option","index","MenuItem","value","RadioGroup","onChange","e","console","log","target","direction","columns","type","isSelected","Card","variant","sx","border","palette","primary","main","CardMedia","height","image","CardContent","CardActions","FormControlLabel","control","Radio","display","top","margin","width","position","TaskAndRewardsForm","CardHeader","sm","alignItems","InputProps","inputProps","justifyContent","Typography","labelPlacement","Switch","checked","mx","BonusAndBenefits","titleTypographyProps","action","Button","startIcon","icon","PlusFill","component","RouterLink","to","PATH_DASHBOARD","bonus","create","bonusType","bonusSet","ticketsPerSubmission","bonusAfterTaskCompletion","bonusUponAcceptingTask","LabelStyle","styled","typography","subtitle2","color","text","secondary","marginBottom","TaskDetailForm","handleCoverDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","maxSize","accept","coverUrl","onDrop","FormHelperText","px","Number","isNaN","multiline","rows","render","arrHelper","fieldName","DynamicFormItem","fieldProps","getIn","isLastItem","length","onAddClick","push","onRemoveClick","remove","Autocomplete","multiple","freeSolo","event","newValue","renderTags","getTagProps","Chip","renderInput","params","DateTimePicker","inputFormat","date","isValidDate","mb","p","ContestAndRewardsForm","ContestDetailForm","colors","initialQuestion","SurveyAndRewardsForm","questionArrayHelpers","onClick","question","questionIndex","optArrayHelpers","optionIndex","optionFieldName","IconButton","Delete","Add","WatchAdForm","WatchAdDetailForm","handleVideoDrop","handleThumbnailDrop","caption","mt","textAlign","fData","STEPS","initialSurveyQuestion","CampaignNewForm","isEdit","currentCampaign","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","activeStep","setActiveStep","setCampaignType","VALIDATION_SCHEMAS","Task","Contest","Survey","Campaign","isLastStep","useFormik","enableReinitialize","initialValues","undefined","Date","validationSchema","onSubmit","a","setSubmitting","resetForm","setErrors","alert","JSON","stringify","campaign","list","all","prev","handleSubmit","isSubmitting","noValidate","autoComplete","Steps","steps","val","Box","mr","LoadingButton","loading","CampaignCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","moreLink","other","flexGrow","gutterBottom","flexShrink","isString","noWrap","fShortenNumber","number","replace","numeral","format","phoneRegExp","addressRegExp","DropZoneStyle","outline","flexDirection","padding","borderRadius","backgroundColor","background","neutral","grey","opacity","cursor","breakpoints","up","UploadMultiFile","showPreview","files","onRemove","onRemoveAll","hasFile","useDropzone","getRootProps","getInputProps","isDragActive","isDragReject","fileRejections","ShowRejectionItems","Paper","py","borderColor","bgcolor","alpha","path","my","message","code","ml","textDecoration","List","disablePadding","AnimatePresence","key","ListItem","motion","div","varFadeInRight","m","overflow","src","objectFit","right","closeFill","divider","ListItemIcon","fileFill","ListItemText","primaryTypographyProps","secondaryTypographyProps","ListItemSecondaryAction","edge","transition","transitions","UploadSingleFile","alt","RootStyle","zIndex","PlaceholderStyle","easing","easeInOut","duration","shorter","UploadAvatar","className","Icon","roundAddAPhoto","QontoConnector","withStyles","alternativeLabel","left","active","completed","line","borderTopWidth","StepConnector","QontoStepIcon","CheckmarkFill","connector","StepIconComponent"],"mappings":"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","file":"static/js/23.6b840ff0.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { nameRegExp } from '../../utils/constants/regexs';\n\nexport const CampaignTypeSchema = Yup.object().shape({\n  brand: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Brand is required'),\n  campaignType: Yup.string(),\n});\n\nexport const TaskAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  taskType: Yup.string(),\n  tier: Yup.string(),\n  associatedBonus: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n  energyPerUser: Yup.number().min(0),\n});\n\nexport const TaskDetailSchema = Yup.object().shape({\n  headerImage: Yup.mixed(),\n  description: Yup.string(),\n  totalBudget: Yup.number(),\n  perUser: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  doList: Yup.array().of(Yup.string()),\n  dontList: Yup.array().of(Yup.string()),\n  igCaptionQuestions: Yup.array().of(Yup.string()),\n  noOfPhotoRequired: Yup.number(),\n  noOfVideoRequired: Yup.number(),\n  hashtags: Yup.array().of(Yup.string()),\n  mentions: Yup.array().of(Yup.string()),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n});\n\nexport const ContestAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  contestType: Yup.string(),\n  tier: Yup.string(),\n  associatedBonus: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const ContestDetailSchema = Yup.object().shape({\n  headerImage: Yup.mixed(),\n  description: Yup.string(),\n  totalBudget: Yup.number(),\n  winnerToken: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  doList: Yup.array().of(Yup.string()),\n  dontList: Yup.array().of(Yup.string()),\n  igCaptionQuestions: Yup.array().of(Yup.string()),\n  noOfPhotoRequired: Yup.number(),\n  noOfVideoRequired: Yup.number(),\n  hashtags: Yup.array().of(Yup.string()),\n  mentions: Yup.array().of(Yup.string()),\n  contestStartDate: Yup.date().nullable(true),\n  contestEndDate: Yup.date().when('contestStartDate', (contestStartDate, schema) =>\n    contestStartDate ? schema.min(contestStartDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  votingStartDate: Yup.date().nullable(true),\n  votingEndDate: Yup.date().when('votingStartDate', (votingStartDate, schema) =>\n    votingStartDate ? schema.min(votingStartDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  winnerDate: Yup.date().nullable(true),\n});\n\nexport const SurveyAndRewardsSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  description: Yup.string(),\n  percentageColor: Yup.string(),\n  starPerUser: Yup.number(),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n  surveyQuestions: Yup.array().of(Yup.object().shape({ title: Yup.string(), options: Yup.array().of(Yup.string()) })),\n});\n\nexport const WatchAdSchema = Yup.object().shape({\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  taskType: Yup.string(),\n  totalBudget: Yup.number(),\n  perUser: Yup.string(),\n  starPerUser: Yup.number(),\n  continueAfterBudget: Yup.string(),\n  tier: Yup.string(),\n  associatedBonus: Yup.string(),\n  isPublic: Yup.boolean().required('Status is required'),\n});\n\nexport const WatchAdDetailSchema = Yup.object().shape({\n  adVideo: Yup.mixed().required('Ad Video is required'),\n  adVideoThumbnail: Yup.mixed().required('Thumbnail is required'),\n  startDate: Yup.date().nullable(true),\n  endDate: Yup.date().when('startDate', (startDate, schema) =>\n    startDate ? schema.min(startDate, 'End date must be later than start date') : schema.nullable(true)\n  ),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  FormControlLabel,\n  Grid,\n  MenuItem,\n  Radio,\n  RadioGroup,\n  Stack,\n  TextField,\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst CAMPAIGN_TYPES = ['Task', 'Contest', 'Survey', 'Watch Ad', 'Campaign'];\n\nconst CampaignTypeForm = ({ formik, onCampaignTypeChange }) => {\n  const theme = useTheme();\n  const { errors, values, touched, getFieldProps, setFieldValue } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Grid container>\n            <Grid item xs={12} md={4}>\n              <TextField\n                select\n                fullWidth\n                size=\"small\"\n                label=\"Select Brand\"\n                placeholder=\"Brand\"\n                {...getFieldProps('brand')}\n                error={Boolean(touched.brand && errors.brand)}\n                helperText={touched.brand && errors.brand}\n              >\n                {['Adidas', 'Nike'].map((option, index) => (\n                  <MenuItem key={option + index} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n          </Grid>\n\n          <RadioGroup\n            {...getFieldProps('campaignType')}\n            value={values.campaignType}\n            onChange={(e) => {\n              console.log(e.target.value);\n              setFieldValue('campaignType', e.target.value);\n              onCampaignTypeChange(e.target.value);\n            }}\n          >\n            <Grid container spacing={1.5} direction=\"row\" columns={10}>\n              {CAMPAIGN_TYPES.map((type) => {\n                const isSelected = values.campaignType === type;\n                return (\n                  <Grid item xs={5} md={2} key={type}>\n                    <Card\n                      variant={isSelected ? 'elevation' : 'outlined'}\n                      sx={{\n                        ...(isSelected && {\n                          border: `solid 2px ${theme.palette.primary.main}`,\n                        }),\n                      }}\n                    >\n                      <CardMedia\n                        sx={{ height: 140 }}\n                        image=\"/static/mock-images/products/product_1.jpg\"\n                        title=\"Contemplative Reptile\"\n                      />\n                      <CardContent>{type}</CardContent>\n                      <CardActions>\n                        <FormControlLabel\n                          label=\"\"\n                          value={type}\n                          control={<Radio sx={{ display: 'none' }} />}\n                          sx={{\n                            top: 0,\n                            margin: 0,\n                            width: '100%',\n                            height: '100%',\n                            position: 'absolute',\n                          }}\n                        />\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </RadioGroup>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nCampaignTypeForm.propTypes = {\n  formik: PropTypes.object,\n  onCampaignTypeChange: PropTypes.func,\n};\n\nexport default CampaignTypeForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  MenuItem,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nconst TaskAndRewardsForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Task Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Type\"\n                  {...getFieldProps(`taskType`)}\n                  error={Boolean(touched.taskType && errors.taskType)}\n                  helperText={touched.taskType && errors.taskType}\n                >\n                  {['Video', 'Video With Sound', 'Photo'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Stack>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader title=\"User Requirements\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Energy Costs Per User\"\n                  type=\"number\"\n                  InputProps={{ inputProps: { min: 0 } }}\n                  {...getFieldProps('energyPerUser')}\n                  error={Boolean(touched.energyPerUser && errors.energyPerUser)}\n                  helperText={touched.energyPerUser && errors.energyPerUser}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps(`tier`)}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                >\n                  {['Public', 'Specific Group', 'Level2', 'Level3', 'Bonus Winner Task'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                {values.tier === 'Bonus Winner Task' && (\n                  <TextField\n                    select\n                    fullWidth\n                    size=\"small\"\n                    label=\"Associated Bonus\"\n                    {...getFieldProps(`associatedBonus`)}\n                    error={Boolean(touched.associatedBonus && errors.associatedBonus)}\n                    helperText={touched.associatedBonus && errors.associatedBonus}\n                  >\n                    {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                      <MenuItem key={option} value={option}>\n                        {option}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                )}\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of public, the task goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nTaskAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default TaskAndRewardsForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  MenuItem,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { PATH_DASHBOARD } from '../../routes/paths';\n\nconst BonusAndBenefits = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Card>\n      <CardHeader\n        title=\"Bonus & Benefits\"\n        titleTypographyProps={{ variant: 'subtitle2' }}\n        action={\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n            startIcon={<Icon icon={PlusFill} />}\n            component={RouterLink}\n            to={PATH_DASHBOARD.bonus.create}\n          >\n            Add New Bonus\n          </Button>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={12} md={6}>\n            <TextField\n              select\n              fullWidth\n              size=\"small\"\n              label=\"Select Bonus Type\"\n              {...getFieldProps(`bonusType`)}\n              error={Boolean(touched.bonusType && errors.bonusType)}\n              helperText={touched.bonusType && errors.bonusType}\n            >\n              {['Bonus Set', 'Single Bonus', 'No Bonuses'].map((option) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </TextField>\n          </Grid>\n          {values.bonusType === 'Bonus Set' && (\n            <Grid item sm={12} md={12}>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Bonus Set\"\n                  {...getFieldProps(`bonusSet`)}\n                  error={Boolean(touched.bonusSet && errors.bonusSet)}\n                  helperText={touched.bonusSet && errors.bonusSet}\n                >\n                  {['Bonus Set 1', 'Bonus Set 2', 'Bonus Set 3'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Tickets Per Submission\"\n                  type=\"number\"\n                  {...getFieldProps('ticketsPerSubmission')}\n                  error={Boolean(touched.ticketsPerSubmission && errors.ticketsPerSubmission)}\n                  helperText={touched.ticketsPerSubmission && errors.ticketsPerSubmission}\n                />\n              </Stack>\n            </Grid>\n          )}\n          {values.bonusType === 'Single Bonus' && (\n            <Grid item sm={12} md={12}>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Single Bonus\"\n                  {...getFieldProps(`bonus`)}\n                  error={Boolean(touched.bonus && errors.bonus)}\n                  helperText={touched.bonus && errors.bonus}\n                >\n                  {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Tickets Per Submission\"\n                  type=\"number\"\n                  {...getFieldProps('ticketsPerSubmission')}\n                  error={Boolean(touched.ticketsPerSubmission && errors.ticketsPerSubmission)}\n                  helperText={touched.ticketsPerSubmission && errors.ticketsPerSubmission}\n                />\n                <FormControlLabel\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch {...getFieldProps('bonusAfterTaskCompletion')} checked={values.bonusAfterTaskCompletion} />\n                  }\n                  label={<Typography variant=\"subtitle2\">After Task Completion</Typography>}\n                  sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                />\n                <FormControlLabel\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch {...getFieldProps('bonusUponAcceptingTask')} checked={values.bonusUponAcceptingTask} />\n                  }\n                  label={<Typography variant=\"subtitle2\">Upon Accepting Task</Typography>}\n                  sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                />\n              </Stack>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nBonusAndBenefits.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default BonusAndBenefits;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@mui/material/styles';\nimport { DateTimePicker } from '@mui/lab';\nimport {\n  Autocomplete,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  FormHelperText,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material';\n// components\nimport { UploadSingleFile } from '../../upload';\nimport DynamicFormItem from '../../DynamicFormItem';\nimport BonusAndBenefits from '../BonusAndBenefits';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst TaskDetailForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps, setFieldValue } = formik;\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('headerImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Header Image</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"image/*\"\n              file={values.coverUrl}\n              onDrop={handleCoverDrop}\n              error={Boolean(touched.coverUrl && errors.coverUrl)}\n            />\n            {touched.coverUrl && errors.coverUrl && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.coverUrl && errors.coverUrl}\n              </FormHelperText>\n            )}\n          </Stack>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Total Budget\"\n                    type=\"number\"\n                    {...getFieldProps('totalBudget')}\n                    error={Boolean(touched.totalBudget && errors.totalBudget)}\n                    helperText={(touched.totalBudget && errors.totalBudget) || '50000 tokens available - View Detail'}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Per User\"\n                    {...getFieldProps('perUser')}\n                    error={Boolean(touched.perUser && errors.perUser)}\n                    helperText={\n                      (touched.perUser && errors.perUser) ||\n                      `Estimated user number: budget/tokenPerUser = ${\n                        Number.isNaN(values.totalBudget / values.perUser) ? 0 : values.totalBudget / values.perUser\n                      } users`\n                    }\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Continue After Budget\"\n                    {...getFieldProps('continueAfterBudget')}\n                    error={Boolean(touched.continueAfterBudget && errors.continueAfterBudget)}\n                    helperText={touched.continueAfterBudget && errors.continueAfterBudget}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <BonusAndBenefits formik={formik} />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"doList\"\n            render={(arrHelper) => {\n              const value = values.doList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `doList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Do ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"dontList\"\n            render={(arrHelper) => {\n              const value = values.dontList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `dontList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Don't ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"igCaptionQuestions\"\n            render={(arrHelper) => {\n              const value = values.igCaptionQuestions;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `igCaptionQuestions.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Instagram Caption Question ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of photo required\"\n              type=\"number\"\n              {...getFieldProps('noOfPhotoRequired')}\n              error={Boolean(touched.noOfPhotoRequired && errors.noOfPhotoRequired)}\n              helperText={touched.noOfPhotoRequired && errors.noOfPhotoRequired}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of video required\"\n              type=\"number\"\n              {...getFieldProps('noOfVideoRequired')}\n              error={Boolean(touched.noOfVideoRequired && errors.noOfVideoRequired)}\n              helperText={touched.noOfVideoRequired && errors.noOfVideoRequired}\n            />\n          </Stack>\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.hashtags}\n            onChange={(event, newValue) => {\n              setFieldValue('hashtags', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n          />\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.mentions}\n            onChange={(event, newValue) => {\n              setFieldValue('mentions', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Mentions\" />}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nTaskDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default TaskDetailForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  MenuItem,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nconst ContestAndRewardsForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Contest Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  fullWidth\n                  size=\"small\"\n                  label=\"Contest Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Task Type\"\n                  {...getFieldProps(`taskType`)}\n                  error={Boolean(touched.taskType && errors.taskType)}\n                  helperText={touched.taskType && errors.taskType}\n                >\n                  {['Video', 'Video With Sound', 'Photo'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps(`tier`)}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                >\n                  {['Public', 'Specific Group', 'Level2', 'Level3', 'Bonus Winner Task'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                {values.tier === 'Bonus Winner Task' && (\n                  <TextField\n                    select\n                    fullWidth\n                    size=\"small\"\n                    label=\"Associated Bonus\"\n                    {...getFieldProps(`associatedBonus`)}\n                    error={Boolean(touched.associatedBonus && errors.associatedBonus)}\n                    helperText={touched.associatedBonus && errors.associatedBonus}\n                  >\n                    {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                      <MenuItem key={option} value={option}>\n                        {option}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                )}\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of Public, the contest goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nContestAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default ContestAndRewardsForm;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@mui/material/styles';\nimport { DateTimePicker } from '@mui/lab';\nimport {\n  Autocomplete,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n  FormHelperText,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material';\n// components\nimport { UploadSingleFile } from '../../upload';\nimport DynamicFormItem from '../../DynamicFormItem';\nimport BonusAndBenefits from '../BonusAndBenefits';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst ContestDetailForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps, setFieldValue } = formik;\n\n  const handleCoverDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('headerImage', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Header Image</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"image/*\"\n              file={values.headerImage}\n              onDrop={handleCoverDrop}\n              error={Boolean(touched.headerImage && errors.headerImage)}\n            />\n            {touched.headerImage && errors.headerImage && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.headerImage && errors.headerImage}\n              </FormHelperText>\n            )}\n          </Stack>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Total Budget\"\n                    type=\"number\"\n                    {...getFieldProps('totalBudget')}\n                    error={Boolean(touched.totalBudget && errors.totalBudget)}\n                    helperText={touched.totalBudget && errors.totalBudget}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Winner Token\"\n                    {...getFieldProps('winnerToken')}\n                    error={Boolean(touched.winnerToken && errors.winnerToken)}\n                    helperText={(touched.winnerToken && errors.winnerToken) || '50000 tokens available - View Detail'}\n                  />\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Star Per User\"\n                    type=\"number\"\n                    {...getFieldProps('starPerUser')}\n                    error={Boolean(touched.starPerUser && errors.starPerUser)}\n                    helperText={touched.starPerUser && errors.starPerUser}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <Grid container>\n                    <Grid item xs={12} md={4}>\n                      <TextField\n                        fullWidth\n                        size=\"small\"\n                        label=\"Continue After Budget\"\n                        {...getFieldProps('continueAfterBudget')}\n                        error={Boolean(touched.continueAfterBudget && errors.continueAfterBudget)}\n                        helperText={touched.continueAfterBudget && errors.continueAfterBudget}\n                      />\n                    </Grid>\n                  </Grid>\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <BonusAndBenefits formik={formik} />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"doList\"\n            render={(arrHelper) => {\n              const value = values.doList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `doList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Do ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"dontList\"\n            render={(arrHelper) => {\n              const value = values.dontList;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `dontList.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Don't ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <FieldArray\n            name=\"igCaptionQuestions\"\n            render={(arrHelper) => {\n              const value = values.igCaptionQuestions;\n              return (\n                <>\n                  {value.map((item, index) => {\n                    const fieldName = `igCaptionQuestions.${index}`;\n                    return (\n                      <DynamicFormItem\n                        key={index}\n                        label={`Instagram Caption Question ${index + 1}`}\n                        fieldProps={{ ...getFieldProps(fieldName) }}\n                        error={Boolean(getIn(touched, fieldName) && getIn(errors, fieldName))}\n                        helperText={getIn(touched, fieldName) && getIn(errors, fieldName)}\n                        isLastItem={index === value.length - 1}\n                        onAddClick={() => arrHelper.push('')}\n                        onRemoveClick={() => arrHelper.remove(index)}\n                      />\n                    );\n                  })}\n                </>\n              );\n            }}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of photo required\"\n              type=\"number\"\n              {...getFieldProps('noOfPhotoRequired')}\n              error={Boolean(touched.noOfPhotoRequired && errors.noOfPhotoRequired)}\n              helperText={touched.noOfPhotoRequired && errors.noOfPhotoRequired}\n            />\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Number of video required\"\n              type=\"number\"\n              {...getFieldProps('noOfVideoRequired')}\n              error={Boolean(touched.noOfVideoRequired && errors.noOfVideoRequired)}\n              helperText={touched.noOfVideoRequired && errors.noOfVideoRequired}\n            />\n          </Stack>\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.hashtags}\n            onChange={(event, newValue) => {\n              setFieldValue('hashtags', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Hashtags\" />}\n          />\n\n          <Autocomplete\n            multiple\n            freeSolo\n            value={values.mentions}\n            onChange={(event, newValue) => {\n              setFieldValue('mentions', newValue);\n            }}\n            options={[]}\n            renderTags={(value, getTagProps) =>\n              value.map((option, index) => (\n                <Chip key={option} size=\"small\" label={option} {...getTagProps({ index })} />\n              ))\n            }\n            renderInput={(params) => <TextField {...params} label=\"Mentions\" />}\n          />\n\n          <Card>\n            <CardHeader title=\"Contest Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Start date\"\n                  value={values.contestStartDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('contestStartDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.contestStartDate && errors.contestStartDate)}\n                      helperText={touched.contestStartDate && errors.contestStartDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.contestEndDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('contestEndDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.contestEndDate && errors.contestEndDate)}\n                      helperText={touched.contestEndDate && errors.contestEndDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Voting Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Start date\"\n                  value={values.votingStartDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('votingStartDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.votingStartDate && errors.votingStartDate)}\n                      helperText={touched.votingStartDate && errors.votingStartDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n                <DateTimePicker\n                  label=\"End date\"\n                  value={values.votingEndDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('votingEndDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.votingEndDate && errors.votingEndDate)}\n                      helperText={touched.votingEndDate && errors.votingEndDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Winner Dates\" titleTypographyProps={{ variant: 'subtitle2' }} />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <DateTimePicker\n                  label=\"Winner date\"\n                  value={values.winnerDate}\n                  inputFormat=\"dd/MM/yyyy hh:mm a\"\n                  onChange={(date) => (isValidDate(date) ? setFieldValue('winnerDate', date) : null)}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                      error={Boolean(touched.winnerDate && errors.winnerDate)}\n                      helperText={touched.winnerDate && errors.winnerDate}\n                      sx={{ mb: 3 }}\n                    />\n                  )}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nContestDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default ContestDetailForm;\n","const colors = [\n  { value: 'blue', label: 'Blue' },\n  { value: 'red', label: 'Red' },\n  { value: 'green', label: 'Green' },\n  { value: 'purple', label: 'Purple' },\n];\n\nexport default colors;\n","import PropTypes from 'prop-types';\nimport { FieldArray, getIn } from 'formik';\nimport { isValid as isValidDate } from 'date-fns';\n\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport { DateTimePicker } from '@mui/lab';\nimport { Button, Card, CardContent, CardHeader, Grid, IconButton, MenuItem, Stack, TextField } from '@mui/material';\n\n// utils\nimport colors from '../../../utils/constants/colors';\n// ----------------------------------------------------------------------\n\nconst initialQuestion = {\n  title: '',\n  options: [''],\n};\n\nconst SurveyAndRewardsForm = ({ formik }) => {\n  const { errors, values, touched, setFieldValue, getFieldProps } = formik;\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Name\"\n              {...getFieldProps('name')}\n              error={Boolean(touched.name && errors.name)}\n              helperText={touched.name && errors.name}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              label=\"Description\"\n              {...getFieldProps('description')}\n              error={Boolean(touched.description && errors.description)}\n              helperText={touched.description && errors.description}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <TextField\n              fullWidth\n              select\n              size=\"small\"\n              label=\"Percentage Color\"\n              {...getFieldProps('percentageColor')}\n              error={Boolean(touched.percentageColor && errors.percentageColor)}\n              helperText={touched.percentageColor && errors.percentageColor}\n            >\n              {colors.map((color) => (\n                <MenuItem value={color.value} key={color.value}>\n                  {color.label}\n                </MenuItem>\n              ))}\n            </TextField>\n            <TextField\n              fullWidth\n              size=\"small\"\n              label=\"Star Per User\"\n              type=\"number\"\n              {...getFieldProps('starPerUser')}\n              error={Boolean(touched.starPerUser && errors.starPerUser)}\n              helperText={touched.starPerUser && errors.starPerUser}\n            />\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n\n          <FieldArray\n            name=\"surveyQuestions\"\n            render={(questionArrayHelpers) => (\n              <Card>\n                <CardHeader\n                  title=\"Questions\"\n                  action={\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<Icon icon={PlusFill} />}\n                      onClick={() => questionArrayHelpers.push(initialQuestion)}\n                    >\n                      Add New\n                    </Button>\n                  }\n                />\n                <CardContent>\n                  <Stack spacing={2}>\n                    {values.surveyQuestions.map((question, questionIndex) => {\n                      console.log('question index: ', questionIndex);\n                      return (\n                        <Card key={questionIndex}>\n                          <CardHeader\n                            title={`Question ${questionIndex + 1}`}\n                            titleTypographyProps={{ variant: 'h8' }}\n                          />\n                          <CardContent>\n                            <Stack spacing={1}>\n                              <TextField\n                                fullWidth\n                                size=\"small\"\n                                label=\"Title\"\n                                {...getFieldProps(`surveyQuestions.${questionIndex}.title`)}\n                                error={Boolean(\n                                  getIn(touched, `surveyQuestions.${questionIndex}.title`) &&\n                                    getIn(errors, `surveyQuestions.${questionIndex}.title`)\n                                )}\n                                helperText={\n                                  getIn(touched, `surveyQuestions.${questionIndex}.title`) &&\n                                  getIn(errors, `surveyQuestions.${questionIndex}.title`)\n                                }\n                              />\n                              <FieldArray\n                                name={`surveyQuestions.${questionIndex}.options`}\n                                render={(optArrayHelpers) => (\n                                  <>\n                                    {values.surveyQuestions[questionIndex].options.map((option, optionIndex) => {\n                                      const optionFieldName = `surveyQuestions.${questionIndex}.options.${optionIndex}`;\n                                      return (\n                                        <Stack key={optionIndex} direction=\"row\" spacing={1}>\n                                          <TextField\n                                            fullWidth\n                                            size=\"small\"\n                                            label={`Option ${optionIndex + 1}`}\n                                            {...getFieldProps(optionFieldName)}\n                                            error={Boolean(\n                                              getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                            )}\n                                            helperText={\n                                              getIn(touched, optionFieldName) && getIn(errors, optionFieldName)\n                                            }\n                                          />\n                                          <IconButton\n                                            color=\"error\"\n                                            aria-label=\"delete\"\n                                            onClick={() => optArrayHelpers.remove(optionIndex)}\n                                          >\n                                            <DeleteIcon />\n                                          </IconButton>\n                                        </Stack>\n                                      );\n                                    })}\n                                    <IconButton\n                                      color=\"primary\"\n                                      aria-label=\"plus\"\n                                      onClick={() => optArrayHelpers.push('')}\n                                    >\n                                      <AddIcon />\n                                    </IconButton>\n                                  </>\n                                )}\n                              />\n                            </Stack>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </Stack>\n                </CardContent>\n              </Card>\n            )}\n          />\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nSurveyAndRewardsForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default SurveyAndRewardsForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Grid,\n  MenuItem,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\n\nconst WatchAdForm = ({ formik }) => {\n  const { values, errors, touched, getFieldProps } = formik;\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={12}>\n        <Stack spacing={3}>\n          <Card>\n            <CardHeader title=\"Task Detail\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  // fullWidth\n                  size=\"small\"\n                  label=\"Task Name\"\n                  {...getFieldProps('name')}\n                  error={Boolean(touched.name && errors.name)}\n                  helperText={touched.name && errors.name}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Rewards\" />\n            <CardContent>\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  size=\"small\"\n                  label=\"Total Budget\"\n                  type=\"number\"\n                  {...getFieldProps('totalBudget')}\n                  error={Boolean(touched.totalBudget && errors.totalBudget)}\n                  helperText={(touched.totalBudget && errors.totalBudget) || '50000 tokens available - View Detail'}\n                />\n                <TextField\n                  size=\"small\"\n                  label=\"Per User\"\n                  {...getFieldProps('perUser')}\n                  error={Boolean(touched.perUser && errors.perUser)}\n                  helperText={\n                    (touched.perUser && errors.perUser) ||\n                    `Estimated user number: budget/tokenPerUser = ${\n                      Number.isNaN(values.totalBudget / values.perUser) ? 0 : values.totalBudget / values.perUser\n                    } users`\n                  }\n                />\n                <TextField\n                  size=\"small\"\n                  label=\"Star Per User\"\n                  type=\"number\"\n                  {...getFieldProps('starPerUser')}\n                  error={Boolean(touched.starPerUser && errors.starPerUser)}\n                  helperText={touched.starPerUser && errors.starPerUser}\n                />\n              </Stack>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader title=\"Audience\" />\n            <CardContent>\n              <Stack alignItems=\"center\" direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                <TextField\n                  select\n                  fullWidth\n                  size=\"small\"\n                  label=\"Select Tier\"\n                  {...getFieldProps(`tier`)}\n                  error={Boolean(touched.tier && errors.tier)}\n                  helperText={touched.tier && errors.tier}\n                >\n                  {['Public', 'Specific Group', 'Level2', 'Level3', 'Bonus Winner Task'].map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                {values.tier === 'Bonus Winner Task' && (\n                  <TextField\n                    select\n                    fullWidth\n                    size=\"small\"\n                    label=\"Associated Bonus\"\n                    {...getFieldProps(`associatedBonus`)}\n                    error={Boolean(touched.associatedBonus && errors.associatedBonus)}\n                    helperText={touched.associatedBonus && errors.associatedBonus}\n                  >\n                    {['Bonus 1', 'Bonus 2', 'Bonus 3'].map((option) => (\n                      <MenuItem key={option} value={option}>\n                        {option}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                )}\n                <Stack direction=\"row\" justifyContent=\"space-around\">\n                  <Typography variant=\"caption\">\n                    In case of public, the task goes to the activity feed and all users can see\n                  </Typography>\n                  <FormControlLabel\n                    labelPlacement=\"start\"\n                    control={<Switch {...getFieldProps('isPublic')} checked={values.isPublic} />}\n                    label={<Typography variant=\"subtitle2\">Public</Typography>}\n                    sx={{ mx: 0, width: 1, justifyContent: 'center' }}\n                  />\n                </Stack>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n};\n\nWatchAdForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default WatchAdForm;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { isValid as isValidDate } from 'date-fns';\n// material\nimport { styled } from '@mui/material/styles';\nimport { DateTimePicker } from '@mui/lab';\nimport { Card, FormHelperText, Grid, Stack, TextField, Typography } from '@mui/material';\n// components\nimport { UploadAvatar, UploadSingleFile } from '../../upload';\n\nimport { fData } from '../../../utils/formatNumber';\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.subtitle2,\n  color: theme.palette.text.secondary,\n  marginBottom: theme.spacing(1),\n}));\n\nconst WatchAdDetailForm = ({ formik }) => {\n  const { values, errors, touched, setFieldValue } = formik;\n\n  const handleVideoDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('adVideo', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  const handleThumbnailDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('adVideoThumbnail', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Stack>\n            <LabelStyle>Upload Ad Video</LabelStyle>\n            <UploadSingleFile\n              maxSize={3145728}\n              accept=\"video/*\"\n              file={values.adVideo}\n              onDrop={handleVideoDrop}\n              error={Boolean(touched.adVideo && errors.adVideo)}\n            />\n            {touched.adVideo && errors.adVideo && (\n              <FormHelperText error sx={{ px: 2 }}>\n                {touched.adVideo && errors.adVideo}\n              </FormHelperText>\n            )}\n          </Stack>\n          <Stack>\n            <LabelStyle>Video Thumbnail</LabelStyle>\n            <UploadAvatar\n              accept=\"image/*\"\n              file={values.adVideoThumbnail}\n              maxSize={3145728}\n              onDrop={handleThumbnailDrop}\n              error={Boolean(touched.adVideoThumbnail && errors.adVideoThumbnail)}\n              caption={\n                <Typography\n                  variant=\"caption\"\n                  sx={{\n                    mt: 2,\n                    mx: 'auto',\n                    display: 'block',\n                    textAlign: 'center',\n                    color: 'text.secondary',\n                  }}\n                >\n                  Allowed *.jpeg, *.jpg, *.png, *.gif\n                  <br /> max size of {fData(3145728)}\n                </Typography>\n              }\n            />\n            <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n              {touched.adVideoThumbnail && errors.adVideoThumbnail}\n            </FormHelperText>\n          </Stack>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n            <DateTimePicker\n              label=\"Start date\"\n              value={values.startDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('startDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.startDate && errors.startDate)}\n                  helperText={touched.startDate && errors.startDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n            <DateTimePicker\n              label=\"End date\"\n              value={values.endDate}\n              inputFormat=\"dd/MM/yyyy hh:mm a\"\n              onChange={(date) => (isValidDate(date) ? setFieldValue('endDate', date) : null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  size=\"small\"\n                  fullWidth\n                  error={Boolean(touched.endDate && errors.endDate)}\n                  helperText={touched.endDate && errors.endDate}\n                  sx={{ mb: 3 }}\n                />\n              )}\n            />\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4} sx={{ height: 'auto' }}>\n        <Card sx={{ p: 3, height: '100%' }}>Later Phase</Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nWatchAdDetailForm.propTypes = {\n  formik: PropTypes.object,\n};\n\nexport default WatchAdDetailForm;\n","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n\n// material\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Card, Grid, Stack, Button } from '@mui/material';\n// paths\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// validations\nimport {\n  CampaignTypeSchema,\n  TaskAndRewardsSchema,\n  TaskDetailSchema,\n  ContestAndRewardsSchema,\n  ContestDetailSchema,\n  SurveyAndRewardsSchema,\n  WatchAdSchema,\n  WatchAdDetailSchema,\n} from './validations';\n// components\nimport Steps from '../Steps';\nimport CampaignTypeForm from './CampaignTypeForm';\nimport TaskAndRewardsForm from './task/TaskAndRewardsForm';\nimport TaskDetailForm from './task/TaskDetailForm';\nimport ContestAndRewardsForm from './contest/ContestAndRewardsForm';\nimport ContestDetailForm from './contest/ContestDetailForm';\nimport SurveyAndRewardsForm from './survey/SurveyAndRewardsForm';\nimport WatchAdForm from './watch-ad/WatchAdForm';\nimport WatchAdDetailForm from './watch-ad/WatchAdDetailForm';\n\n// ----------------------------------------------------------------------\n\nconst STEPS = ['Campaign Type', 'Task & Rewards', 'Task Detail'];\nconst initialSurveyQuestion = {\n  title: '',\n  options: [''],\n};\n\nfunction CampaignNewForm({ isEdit, currentCampaign }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n  const [activeStep, setActiveStep] = useState(0);\n  const [campaignType, setCampaignType] = useState('Task');\n\n  // const VALIDATION_SCHEMAS = [CampaignTypeSchema, TaskAndRewardsSchema, TaskDetailSchema];\n\n  const VALIDATION_SCHEMAS = {\n    0: {\n      Task: CampaignTypeSchema,\n      Contest: CampaignTypeSchema,\n      Survey: CampaignTypeSchema,\n      'Watch Ad': CampaignTypeSchema,\n      Campaign: CampaignTypeSchema,\n    },\n    1: {\n      Task: TaskAndRewardsSchema,\n      Contest: ContestAndRewardsSchema,\n      Survey: SurveyAndRewardsSchema,\n      'Watch Ad': WatchAdSchema,\n      Campaign: Yup.object(),\n    },\n    2: {\n      Task: TaskDetailSchema,\n      Contest: ContestDetailSchema,\n      Survey: Yup.object(),\n      'Watch Ad': WatchAdDetailSchema,\n      Campaign: Yup.object(),\n    },\n  };\n\n  const isLastStep = () => activeStep === STEPS.length - 1;\n\n  const handlePrevStep = () => setActiveStep((prev) => prev - 1);\n\n  const handleNextStep = () => setActiveStep((prev) => prev + 1);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      brand: currentCampaign?.brand || '',\n      campaignType: currentCampaign?.campaignType || 'Task',\n      name: currentCampaign?.name || '',\n      taskType: currentCampaign?.taskType || 'Video',\n      totalBudget: currentCampaign?.totalBudget || undefined,\n      perUser: currentCampaign?.perUser || '',\n      starPerUser: currentCampaign?.starPerUser || undefined,\n      continueAfterBudget: currentCampaign?.continueAfterBudget || '',\n      tier: currentCampaign?.tier || 'Public',\n      associatedBonus: currentCampaign?.associatedBonus || 'Bonus 1',\n      bonusType: currentCampaign?.bonusType || null,\n      bonusSet: currentCampaign?.bonusSet || undefined,\n      bonus: currentCampaign?.bonus || undefined,\n      ticketsPerSubmission: currentCampaign?.ticketsPerSubmission || undefined,\n      bonusAfterTaskCompletion: currentCampaign?.bonus || false,\n      bonusUponAcceptingTask: currentCampaign?.bonus || false,\n      isPublic: currentCampaign?.isPublic || false,\n      headerImage: currentCampaign?.headerImage || undefined,\n      doList: currentCampaign?.doList || [''],\n      dontList: currentCampaign?.dontList || [''],\n      igCaptionQuestions: currentCampaign?.igCaptionQuestions || [''],\n      noOfPhotoRequired: currentCampaign?.noOfPhotoRequired || undefined,\n      noOfVideoRequired: currentCampaign?.noOfVideoRequired || undefined,\n      hashtags: currentCampaign?.hashtags || [],\n      mentions: currentCampaign?.mentions || [],\n      startDate: currentCampaign?.startDate ? new Date(currentCampaign.startDate) : null,\n      endDate: currentCampaign?.endDate ? new Date(currentCampaign.endDate) : null,\n      surveyQuestions: currentCampaign?.surveyQuestions || [initialSurveyQuestion],\n      percentageColor: currentCampaign?.percentageColor || undefined,\n      adVideo: currentCampaign?.adVideo || null,\n      adVideoThumbnail: currentCampaign?.adVideoThumbnail || null,\n      energyPerUser: currentCampaign?.starPerUser || undefined,\n    },\n    validationSchema: VALIDATION_SCHEMAS[activeStep][campaignType],\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      if (isLastStep()) {\n        try {\n          alert(JSON.stringify(values));\n          resetForm();\n          setSubmitting(false);\n          enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n          navigate(PATH_DASHBOARD.campaign.list.all);\n        } catch (error) {\n          console.error(error);\n          setSubmitting(false);\n          setErrors(error);\n        }\n      } else {\n        handleNextStep();\n      }\n    },\n  });\n\n  const { errors, values, handleSubmit, isSubmitting } = formik;\n\n  const renderForm = () => {\n    const forms = {\n      0: {\n        Task: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Contest: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Survey: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        'Watch Ad': <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n        Campaign: <CampaignTypeForm formik={formik} onCampaignTypeChange={(val) => setCampaignType(val)} />,\n      },\n      1: {\n        Task: <TaskAndRewardsForm formik={formik} />,\n        Contest: <ContestAndRewardsForm formik={formik} />,\n        Survey: <SurveyAndRewardsForm formik={formik} />,\n        'Watch Ad': <WatchAdForm formik={formik} />,\n        Campaign: <div>Campaign Form</div>,\n      },\n      2: {\n        Task: <TaskDetailForm formik={formik} />,\n        Contest: <ContestDetailForm formik={formik} />,\n        Survey: <div>Survey Detail Form</div>,\n        'Watch Ad': <WatchAdDetailForm formik={formik} />,\n        Campaign: <div>Campaign Form</div>,\n      },\n    };\n    return forms[activeStep][campaignType];\n  };\n\n  console.log('Active Step: ', activeStep);\n  console.log('*** ', values, errors);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container justifyContent=\"center\">\n          <Grid item xs={12} md={8} sx={{ mb: 5 }}>\n            <Steps steps={STEPS} activeStep={activeStep} />\n          </Grid>\n        </Grid>\n\n        <Card sx={{ p: 3 }}>\n          <Stack spacing={3}>\n            {renderForm()}\n            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n              {activeStep !== 0 && (\n                <Button\n                  sx={{ mr: 2 }}\n                  variant=\"outlined\"\n                  onClick={isLastStep() ? () => console.log('Draft Clicked') : handlePrevStep}\n                >\n                  {isLastStep() ? 'Draft' : 'Back'}\n                </Button>\n              )}\n              <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                {isLastStep() ? 'Setup Complete' : 'Next'}\n              </LoadingButton>\n            </Box>\n          </Stack>\n        </Card>\n      </Form>\n    </FormikProvider>\n  );\n}\n\nCampaignNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentCampaign: PropTypes.object,\n};\n\nexport default CampaignNewForm;\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport CampaignNewForm from '../components/campaign/CampaignNewForm';\n\n// ----------------------------------------------------------------------\n\nfunction CampaignCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  const currentCampaign = {};\n\n  return (\n    <Page title=\"Campaign: Create a new campaign\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Create Campaign' : 'Edit Campaign'}\n          links={[\n            { name: 'Campaign', href: PATH_DASHBOARD.campaign.list.all },\n            { name: !isEdit ? 'Create Campaign' : name },\n          ]}\n        />\n        <CampaignNewForm isEdit={isEdit} currentCampaign={currentCampaign} />\n      </Container>\n    </Page>\n  );\n}\n\nexport default CampaignCreate;\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link, Stack } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Stack sx={sx} mb={5} spacing={2}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Stack>\n\n      {isString(moreLink) ? (\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n          {moreLink}\n        </Link>\n      ) : (\n        moreLink.map((href) => (\n          <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'flex' }}>\n            {href}\n          </Link>\n        ))\n      )}\n    </Stack>\n  );\n}\n","import { replace } from 'lodash';\nimport numeral from 'numeral';\n\n// ----------------------------------------------------------------------\n\nexport function fCurrency(number) {\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\n}\n\nexport function fPercent(number) {\n  return numeral(number / 100).format('0.0%');\n}\n\nexport function fNumber(number) {\n  return numeral(number).format();\n}\n\nexport function fShortenNumber(number) {\n  return replace(numeral(number).format('0.00a'), '.00', '');\n}\n\nexport function fData(number) {\n  return numeral(number).format('0.0 b');\n}\n","export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { useDropzone } from 'react-dropzone';\nimport fileFill from '@iconify/icons-eva/file-fill';\nimport closeFill from '@iconify/icons-eva/close-fill';\nimport { motion, AnimatePresence } from 'framer-motion';\n// material\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n  Box,\n  List,\n  Stack,\n  Paper,\n  Button,\n  ListItem,\n  Typography,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n} from '@mui/material';\n// utils\nimport { fData } from '../../utils/formatNumber';\n//\nimport { MIconButton } from '../@material-extend';\nimport { varFadeInRight } from '../animate';\nimport { UploadIllustration } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst DropZoneStyle = styled('div')(({ theme }) => ({\n  outline: 'none',\n  display: 'flex',\n  textAlign: 'center',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(5, 1),\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: theme.palette.background.neutral,\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\n  '&:hover': { opacity: 0.72, cursor: 'pointer' },\n  [theme.breakpoints.up('md')]: { textAlign: 'left', flexDirection: 'row' },\n}));\n\n// ----------------------------------------------------------------------\n\nUploadMultiFile.propTypes = {\n  error: PropTypes.bool,\n  showPreview: PropTypes.bool,\n  files: PropTypes.array,\n  onRemove: PropTypes.func,\n  onRemoveAll: PropTypes.func,\n  sx: PropTypes.object,\n};\n\nexport default function UploadMultiFile({ error, showPreview = false, files, onRemove, onRemoveAll, sx, ...other }) {\n  const hasFile = files.length > 0;\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    ...other,\n  });\n\n  const ShowRejectionItems = () => (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        py: 1,\n        px: 2,\n        mt: 3,\n        borderColor: 'error.light',\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n      }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = file;\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {fData(size)}\n            </Typography>\n            {errors.map((e) => (\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\n                - {e.message}\n              </Typography>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <DropZoneStyle\n        {...getRootProps()}\n        sx={{\n          ...(isDragActive && { opacity: 0.72 }),\n          ...((isDragReject || error) && {\n            color: 'error.main',\n            borderColor: 'error.light',\n            bgcolor: 'error.lighter',\n          }),\n        }}\n      >\n        <input {...getInputProps()} />\n\n        <UploadIllustration sx={{ width: 220 }} />\n\n        <Box sx={{ p: 3, ml: { md: 2 } }}>\n          <Typography gutterBottom variant=\"h5\">\n            Drop or Select file\n          </Typography>\n\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n            Drop files here or click&nbsp;\n            <Typography variant=\"body2\" component=\"span\" sx={{ color: 'primary.main', textDecoration: 'underline' }}>\n              browse\n            </Typography>\n            &nbsp;thorough your machine\n          </Typography>\n        </Box>\n      </DropZoneStyle>\n\n      {fileRejections.length > 0 && <ShowRejectionItems />}\n\n      <List disablePadding sx={{ ...(hasFile && { my: 3 }) }}>\n        <AnimatePresence>\n          {files.map((file, index) => {\n            const { name, size, preview } = file;\n            const key = isString(file) ? file + index : name + index;\n\n            if (showPreview) {\n              return (\n                <ListItem\n                  key={key}\n                  component={motion.div}\n                  {...varFadeInRight}\n                  sx={{\n                    p: 0,\n                    m: 0.5,\n                    width: 80,\n                    height: 80,\n                    borderRadius: 1.5,\n                    overflow: 'hidden',\n                    position: 'relative',\n                    display: 'inline-flex',\n                  }}\n                >\n                  <Paper\n                    variant=\"outlined\"\n                    component=\"img\"\n                    src={isString(file) ? file : preview}\n                    sx={{ width: '100%', height: '100%', objectFit: 'cover', position: 'absolute' }}\n                  />\n                  <Box sx={{ top: 6, right: 6, position: 'absolute' }}>\n                    <MIconButton\n                      size=\"small\"\n                      onClick={() => onRemove(file)}\n                      sx={{\n                        p: '2px',\n                        color: 'common.white',\n                        bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72),\n                        '&:hover': {\n                          bgcolor: (theme) => alpha(theme.palette.grey[900], 0.48),\n                        },\n                      }}\n                    >\n                      <Icon icon={closeFill} />\n                    </MIconButton>\n                  </Box>\n                </ListItem>\n              );\n            }\n\n            return (\n              <ListItem\n                key={key}\n                component={motion.div}\n                {...varFadeInRight}\n                sx={{\n                  my: 1,\n                  py: 0.75,\n                  px: 2,\n                  borderRadius: 1,\n                  border: (theme) => `solid 1px ${theme.palette.divider}`,\n                  bgcolor: 'background.paper',\n                }}\n              >\n                <ListItemIcon>\n                  <Icon icon={fileFill} width={28} height={28} />\n                </ListItemIcon>\n                <ListItemText\n                  primary={isString(file) ? file : name}\n                  secondary={isString(file) ? '' : fData(size)}\n                  primaryTypographyProps={{ variant: 'subtitle2' }}\n                  secondaryTypographyProps={{ variant: 'caption' }}\n                />\n                <ListItemSecondaryAction>\n                  <MIconButton edge=\"end\" size=\"small\" onClick={() => onRemove(file)}>\n                    <Icon icon={closeFill} />\n                  </MIconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            );\n          })}\n        </AnimatePresence>\n      </List>\n\n      {hasFile && (\n        <Stack direction=\"row\" justifyContent=\"flex-end\">\n          <Button onClick={onRemoveAll} sx={{ mr: 1.5 }}>\n            Remove all\n          </Button>\n          {/* <Button variant=\"contained\">Upload files</Button> */}\n        </Stack>\n      )}\n    </Box>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\n// material\nimport { alpha, styled } from '@mui/material/styles';\nimport { Paper, Box, Typography } from '@mui/material';\n// utils\nimport { fData } from '../../utils/formatNumber';\n//\nimport { UploadIllustration } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst DropZoneStyle = styled('div')(({ theme }) => ({\n  outline: 'none',\n  display: 'flex',\n  overflow: 'hidden',\n  textAlign: 'center',\n  position: 'relative',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(5, 0),\n  borderRadius: theme.shape.borderRadius,\n  transition: theme.transitions.create('padding'),\n  backgroundColor: theme.palette.background.neutral,\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\n  '&:hover': {\n    opacity: 0.72,\n    cursor: 'pointer',\n  },\n  [theme.breakpoints.up('md')]: { textAlign: 'left', flexDirection: 'row' },\n}));\n\n// ----------------------------------------------------------------------\n\nUploadSingleFile.propTypes = {\n  error: PropTypes.bool,\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  sx: PropTypes.object,\n};\n\nexport default function UploadSingleFile({ error, file, sx, ...other }) {\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    multiple: false,\n    ...other,\n  });\n\n  const ShowRejectionItems = () => (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        py: 1,\n        px: 2,\n        mt: 3,\n        borderColor: 'error.light',\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n      }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = file;\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {fData(size)}\n            </Typography>\n            {errors.map((e) => (\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\n                - {e.message}\n              </Typography>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <DropZoneStyle\n        {...getRootProps()}\n        sx={{\n          ...(isDragActive && { opacity: 0.72 }),\n          ...((isDragReject || error) && {\n            color: 'error.main',\n            borderColor: 'error.light',\n            bgcolor: 'error.lighter',\n          }),\n          ...(file && { padding: '12% 0' }),\n        }}\n      >\n        <input {...getInputProps()} />\n\n        <UploadIllustration sx={{ width: 220 }} />\n\n        <Box sx={{ p: 3, ml: { md: 2 } }}>\n          <Typography gutterBottom variant=\"h5\">\n            Drop or Select file\n          </Typography>\n\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n            Drop files here or click&nbsp;\n            <Typography variant=\"body2\" component=\"span\" sx={{ color: 'primary.main', textDecoration: 'underline' }}>\n              browse\n            </Typography>\n            &nbsp;thorough your machine\n          </Typography>\n        </Box>\n\n        {file && (\n          <Box\n            component=\"img\"\n            alt=\"file preview\"\n            src={isString(file) ? file : file.preview}\n            sx={{\n              top: 8,\n              borderRadius: 1,\n              objectFit: 'cover',\n              position: 'absolute',\n              width: 'calc(100% - 16px)',\n              height: 'calc(100% - 16px)',\n            }}\n          />\n        )}\n      </DropZoneStyle>\n\n      {fileRejections.length > 0 && <ShowRejectionItems />}\n    </Box>\n  );\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { useDropzone } from 'react-dropzone';\nimport roundAddAPhoto from '@iconify/icons-ic/round-add-a-photo';\n// material\nimport { alpha, styled } from '@mui/material/styles';\nimport { Box, Typography, Paper } from '@mui/material';\n// utils\nimport { fData } from '../../utils/formatNumber';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  width: 144,\n  height: 144,\n  margin: 'auto',\n  borderRadius: '50%',\n  padding: theme.spacing(1),\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\n}));\n\nconst DropZoneStyle = styled('div')({\n  zIndex: 0,\n  width: '100%',\n  height: '100%',\n  outline: 'none',\n  display: 'flex',\n  overflow: 'hidden',\n  borderRadius: '50%',\n  position: 'relative',\n  alignItems: 'center',\n  justifyContent: 'center',\n  '& > *': { width: '100%', height: '100%' },\n  '&:hover': {\n    cursor: 'pointer',\n    '& .placeholder': {\n      zIndex: 9,\n    },\n  },\n});\n\nconst PlaceholderStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  position: 'absolute',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  color: theme.palette.text.secondary,\n  backgroundColor: theme.palette.background.neutral,\n  transition: theme.transitions.create('opacity', {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter,\n  }),\n  '&:hover': { opacity: 0.72 },\n}));\n\n// ----------------------------------------------------------------------\n\nUploadAvatar.propTypes = {\n  error: PropTypes.bool,\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  caption: PropTypes.node,\n  sx: PropTypes.object,\n};\n\nexport default function UploadAvatar({ error, file, caption, sx, ...other }) {\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    multiple: false,\n    ...other,\n  });\n\n  const ShowRejectionItems = () => (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        py: 1,\n        px: 2,\n        my: 2,\n        borderColor: 'error.light',\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n      }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = file;\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {fData(size)}\n            </Typography>\n            {errors.map((e) => (\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\n                - {e.message}\n              </Typography>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n\n  return (\n    <>\n      <RootStyle sx={sx}>\n        <DropZoneStyle\n          {...getRootProps()}\n          sx={{\n            ...(isDragActive && { opacity: 0.72 }),\n            ...((isDragReject || error) && {\n              color: 'error.main',\n              borderColor: 'error.light',\n              bgcolor: 'error.lighter',\n            }),\n          }}\n        >\n          <input {...getInputProps()} />\n\n          {file && (\n            <Box\n              component=\"img\"\n              alt=\"avatar\"\n              src={isString(file) ? file : file.preview}\n              sx={{ zIndex: 8, objectFit: 'cover' }}\n            />\n          )}\n\n          <PlaceholderStyle\n            className=\"placeholder\"\n            sx={{\n              ...(file && {\n                opacity: 0,\n                color: 'common.white',\n                bgcolor: 'grey.900',\n                '&:hover': { opacity: 0.72 },\n              }),\n            }}\n          >\n            <Box component={Icon} icon={roundAddAPhoto} sx={{ width: 24, height: 24, mb: 1 }} />\n            <Typography variant=\"caption\">{file ? 'Update photo' : 'Upload photo'}</Typography>\n          </PlaceholderStyle>\n        </DropZoneStyle>\n      </RootStyle>\n\n      {caption}\n\n      {fileRejections.length > 0 && <ShowRejectionItems />}\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { Add as AddIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport { IconButton, Stack, TextField } from '@mui/material';\n\nconst DynamicFormItem = ({ label, fieldProps, error, helperText, isLastItem, onAddClick, onRemoveClick }) => (\n  <Stack direction=\"row\" spacing={1}>\n    <TextField fullWidth size=\"small\" label={label} {...fieldProps} error={error} helperText={helperText} />\n    {isLastItem ? (\n      <IconButton color=\"primary\" onClick={onAddClick}>\n        <AddIcon />\n      </IconButton>\n    ) : (\n      <IconButton color=\"error\" onClick={onRemoveClick}>\n        <DeleteIcon />\n      </IconButton>\n    )}\n  </Stack>\n);\n\nDynamicFormItem.propTypes = {\n  label: PropTypes.string,\n  fieldProps: PropTypes.object,\n  error: PropTypes.bool,\n  helperText: PropTypes.string,\n  isLastItem: PropTypes.bool,\n  onAddClick: PropTypes.func,\n  onRemoveClick: PropTypes.func,\n};\n\nexport default DynamicFormItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport CheckmarkFill from '@iconify/icons-eva/checkmark-fill';\nimport { withStyles } from '@mui/styles';\nimport { Box, Step, StepConnector, StepLabel, Stepper } from '@mui/material';\n\nconst QontoConnector = withStyles((theme) => ({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 20px)',\n    right: 'calc(50% + 20px)',\n  },\n  active: {\n    '& $line': { borderColor: theme.palette.primary.main },\n  },\n  completed: {\n    '& $line': { borderColor: theme.palette.primary.main },\n  },\n  line: {\n    borderTopWidth: 2,\n    borderColor: theme.palette.divider,\n  },\n}))(StepConnector);\n\nfunction QontoStepIcon({ active, completed }) {\n  return (\n    <Box\n      sx={{\n        zIndex: 9,\n        width: 24,\n        height: 24,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: active ? 'primary.main' : 'divider',\n        bgcolor: 'background.default',\n      }}\n    >\n      {completed ? (\n        <Box component={Icon} icon={CheckmarkFill} sx={{ zIndex: 1, width: 20, height: 20, color: 'primary.main' }} />\n      ) : (\n        <Box\n          sx={{\n            width: 8,\n            height: 8,\n            borderRadius: '50%',\n            backgroundColor: 'currentColor',\n          }}\n        />\n      )}\n    </Box>\n  );\n}\n\nQontoStepIcon.propTypes = {\n  active: PropTypes.bool,\n  completed: PropTypes.bool,\n};\n\nconst Steps = ({ steps, activeStep }) => (\n  <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\n    {steps.map((label) => (\n      <Step key={label}>\n        <StepLabel\n          StepIconComponent={QontoStepIcon}\n          sx={{\n            '& .MuiStepLabel-label': {\n              typography: 'subtitle2',\n              color: 'text.disabled',\n            },\n          }}\n        >\n          {label}\n        </StepLabel>\n      </Step>\n    ))}\n  </Stepper>\n);\n\nSteps.propTypes = {\n  steps: PropTypes.array,\n  activeStep: PropTypes.number,\n};\n\nexport default Steps;\n"],"sourceRoot":""}