{"version":3,"sources":["components/bonus/BonusWinnersTable.js","components/bonus/BonusListTable.js","components/bonus/BonusSetListTable.js","components/bonus/BonusParticipantsTable.js","pages/BonusSetView.js"],"names":["TABLE_HEAD","id","label","alignRight","winnerList","Array","map","_","index","userId","name","faker","internet","userName","tickets","datatype","number","min","max","precision","brand","bonusName","acceptanceState","sample","BonusWinnersTable","theme","useTheme","container","spacing","sx","mt","item","xs","variant","minWidth","headCell","align","row","BonusListTable","bonusList","availableQuantity","value","BonusSetListTable","endDate","bonuses","length","averageValueOfSingleBonus","valueOfAllBonuses","winnerNumber","bonusTasksCompleted","numberOfParticipants","numberOfTickets","averageNumberOfUserTickets","bonusWon","Grid","Typography","Scrollbar","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","BonusSetView","themeStretch","useSettings","useParams","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","bonus","listBonusSet","Date","toDateString","ticketRules","sm","md","lg","Card","CardHeader","titleTypographyProps","textAlign","CardContent","Stack","direction","justifyContent","Box","height","mb","BonusParticipantsTable"],"mappings":"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","file":"static/js/20.a451c39c.chunk.js","sourcesContent":["import faker from 'faker';\nimport { sample } from 'lodash';\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'userId', label: 'User Id', alignRight: false },\n  { id: 'tickets', label: '# of tickets', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'bonusName', label: 'Bonus Name', alignRight: false },\n  { id: 'acceptanceState', label: 'Acceptance State', alignRight: false },\n];\n\nconst winnerList = [...Array(3)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    userId: `id ${setIndex}`,\n    name: faker.internet.userName(),\n    tickets: faker.datatype.number({ min: 1000, max: 10000, precision: 1 }),\n    brand: 'Brand 1',\n    bonusName: '100 shoes',\n    acceptanceState: sample([\n      'accepted bonus ',\n      'not accepted bonus',\n      'accepted task not completed',\n      'accepted task completed',\n    ]),\n  };\n});\n\nconst BonusWinnersTable = () => {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Winner List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {winnerList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.userId}</TableCell>\n                    <TableCell>{row.tickets}</TableCell>\n                    <TableCell>{row.brand}</TableCell>\n                    <TableCell>{row.bonusName}</TableCell>\n                    <TableCell>{row.acceptanceState}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BonusWinnersTable;\n","import PropTypes from 'prop-types';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'availableQuantity', label: 'Available Quantity', alignRight: false },\n  { id: 'value', label: 'Value ($)', alignRight: false },\n];\n\nBonusListTable.propTypes = {\n  bonusList: PropTypes.array,\n};\n\nfunction BonusListTable({ bonusList = [] }) {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800 }}>\n        <Table aria-label=\"bonus table\">\n          <TableHead>\n            <TableRow>\n              {TABLE_HEAD.map((headCell) => (\n                <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                  {headCell.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {bonusList.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.brand}</TableCell>\n                <TableCell>{row.availableQuantity}</TableCell>\n                <TableCell>{row.value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n\nexport default BonusListTable;\n","import PropTypes from 'prop-types';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'brand', label: 'Brand', alignRight: false },\n  { id: 'endDate', label: 'End Date', alignRight: false },\n  { id: 'numberOfBonuses', label: 'Number of bonuses', alignRight: false },\n  { id: 'averageValueOfSingleBonus', label: 'Average $ of a single bonus', alignRight: false },\n  { id: 'valueOfAllBonuses', label: 'Value of all bonuses', alignRight: false },\n  { id: 'winnerNumber', label: 'Winner Number', alignRight: false },\n  { id: 'bonusTasksCompleted', label: 'Bonus Tasks Completed (%)', alignRight: false },\n  { id: 'numberOfParticipants', label: '# of participants', alignRight: false },\n  { id: 'numberOfTickets', label: '# of tickets', alignRight: false },\n  { id: 'averageNumberOfUserTickets', label: 'Average # of user tickets', alignRight: false },\n];\n\nBonusSetListTable.propTypes = {\n  bonusList: PropTypes.array,\n};\n\nfunction BonusSetListTable({ bonusList = [] }) {\n  return (\n    <Scrollbar>\n      <TableContainer sx={{ minWidth: 800 }}>\n        <Table aria-label=\"bonus table\">\n          <TableHead>\n            <TableRow>\n              {TABLE_HEAD.map((headCell) => (\n                <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                  {headCell.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {bonusList.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.brand}</TableCell>\n                <TableCell>{row.endDate}</TableCell>\n                <TableCell>{row.bonuses.length}</TableCell>\n                <TableCell>{row.averageValueOfSingleBonus}</TableCell>\n                <TableCell>{row.valueOfAllBonuses}</TableCell>\n                <TableCell>{row.winnerNumber}</TableCell>\n                <TableCell>{row.bonusTasksCompleted}</TableCell>\n                <TableCell>{row.numberOfParticipants}</TableCell>\n                <TableCell>{row.numberOfTickets}</TableCell>\n                <TableCell>{row.averageNumberOfUserTickets}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Scrollbar>\n  );\n}\n\nexport default BonusSetListTable;\n","import faker from 'faker';\nimport { sample } from 'lodash';\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\n\nimport Scrollbar from '../Scrollbar';\n\nconst TABLE_HEAD = [\n  { id: 'name', label: 'Name', alignRight: false },\n  { id: 'userId', label: 'User Id', alignRight: false },\n  { id: 'tickets', label: '# of tickets', alignRight: false },\n  { id: 'bonusWon', label: 'Bonus Won', alignRight: false },\n  { id: 'acceptanceState', label: 'Acceptance State', alignRight: false },\n];\n\nconst winnerList = [...Array(10)].map((_, index) => {\n  const setIndex = index + 1;\n  return {\n    userId: `id ${setIndex}`,\n    name: faker.internet.userName(),\n    tickets: faker.datatype.number({ min: 1000, max: 10000, precision: 1 }),\n    bonusWon: '100 shoes',\n    acceptanceState: sample([\n      'accepted bonus ',\n      'not accepted bonus',\n      'accepted task not completed',\n      'accepted task completed',\n    ]),\n  };\n});\n\nconst BonusWinnersTable = () => {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2} sx={{ mt: theme.spacing(8) }}>\n      <Grid item xs={12}>\n        <Typography variant=\"h5\">Participant List</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table aria-label=\"reward table\">\n              <TableHead>\n                <TableRow>\n                  {TABLE_HEAD.map((headCell) => (\n                    <TableCell key={headCell.id} align={headCell.alignRight ? 'right' : 'left'}>\n                      {headCell.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {winnerList.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell>{row.userId}</TableCell>\n                    <TableCell>{row.tickets}</TableCell>\n                    <TableCell>{row.bonusWon}</TableCell>\n                    <TableCell>{row.acceptanceState}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BonusWinnersTable;\n","import { useParams } from 'react-router-dom';\n// material\nimport { Box, Card, CardContent, CardHeader, Container, Grid, Stack, Typography } from '@mui/material';\n\nimport { PATH_DASHBOARD } from '../routes/paths';\n\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport BonusSetListTable from '../components/bonus/BonusSetListTable';\nimport BonusWinnersTable from '../components/bonus/BonusWinnersTable';\nimport BonusParticipantsTable from '../components/bonus/BonusParticipantsTable';\nimport BonusListTable from '../components/bonus/BonusListTable';\n\nexport default function BonusSetView() {\n  const { themeStretch } = useSettings();\n  const { name } = useParams();\n\n  // TODO: will be updated with bonusSet\n  // const currentBonusSet = {};\n\n  return (\n    <Page title=\"Bonus Set: View Bonus Set\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={name}\n          links={[{ name: 'Bonus Set', href: PATH_DASHBOARD.bonus.listBonusSet }, { name }]}\n        />\n\n        <BonusSetListTable\n          bonusList={[\n            {\n              name: 'Set 1',\n              brand: 'Riddim',\n              bonuses: ['Bonus 1', 'Bonus 2', 'Bonus 3'],\n              endDate: new Date().toDateString(),\n              ticketRules: ['Default Historical Data', 'Default Followers'],\n              averageValueOfSingleBonus: 200,\n              valueOfAllBonuses: 2000,\n              winnerNumber: 10,\n              bonusTasksCompleted: 60,\n              numberOfParticipants: 200,\n              numberOfTickets: 2000,\n              averageNumberOfUserTickets: 150,\n            },\n          ]}\n        />\n\n        {/* ticket rules */}\n        <Grid container spacing={2}>\n          <Grid item sm={12} md={4} lg={3}>\n            <Card>\n              <CardHeader title=\"Followers on Riddim\" titleTypographyProps={{ textAlign: 'center' }} />\n              <CardContent>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>100-5k</Typography>\n                  <Typography>x1 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>5k-50k</Typography>\n                  <Typography>x2 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>50k-500k</Typography>\n                  <Typography>x3 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>500k-2mil</Typography>\n                  <Typography>x4 tickets</Typography>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item sm={12} md={4} lg={3}>\n            <Card>\n              <CardHeader title=\"App Level\" titleTypographyProps={{ textAlign: 'center' }} />\n              <CardContent>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 0-5</Typography>\n                  <Typography>x1 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 6-10</Typography>\n                  <Typography>x2 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 11-20</Typography>\n                  <Typography>x3 tickets</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"center\" spacing={2}>\n                  <Typography>Level 21-25</Typography>\n                  <Typography>x4 tickets</Typography>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ height: 720, mt: (theme) => theme.spacing(8) }}>\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>\n            Bonuses of this set\n          </Typography>\n          <BonusListTable\n            bonusList={[\n              {\n                name: 'Bonus 1',\n                availableQuantity: 200,\n                brand: 'Riddim',\n                value: '100',\n              },\n              {\n                name: 'Bonus 2',\n                availableQuantity: 15,\n                brand: 'Riddim',\n                value: '250',\n              },\n              {\n                name: 'Bonus 3',\n                availableQuantity: 100,\n                brand: 'Riddim',\n                value: '75',\n              },\n            ]}\n          />\n        </Box>\n\n        <Box sx={{ height: 720, mt: (theme) => theme.spacing(8) }}>\n          <BonusParticipantsTable />\n        </Box>\n\n        <Box sx={{ height: 720, mt: (theme) => theme.spacing(8) }}>\n          <BonusWinnersTable />\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}