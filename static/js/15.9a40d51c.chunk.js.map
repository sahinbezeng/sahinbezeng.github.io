{"version":3,"sources":["../node_modules/@iconify/icons-eva/plus-fill.js","utils/constants/regexs.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/material/CardHeader/cardHeaderClasses.js","../node_modules/@mui/material/CardHeader/CardHeader.js","utils/mockImages.js","../node_modules/@mui/icons-material/esm/Delete.js","components/reward/RewardNewForm.js","pages/RewardCreate.js"],"names":["exports","__esModule","default","phoneRegExp","addressRegExp","nameRegExp","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","name","overridesResolver","props","styles","root","padding","paddingBottom","CardContent","React","inProps","ref","useThemeProps","className","component","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","as","clsx","getCardHeaderUtilityClass","cardHeaderClasses","CardHeaderRoot","title","subheader","display","alignItems","CardHeaderAvatar","avatar","flex","marginRight","CardHeaderAction","action","alignSelf","marginTop","marginBottom","CardHeaderContent","content","CardHeader","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","titleTypographyProps","type","Typography","variant","children","color","_jsxs","mockImgProduct","index","createSvgIcon","d","REWARD_TYPES","tokenValues","initialFirstContent","frequency","numberOfKeys","numberOfCoins","numberOfStars","numberOfBoosters","initialNewContent","NewRewardSchema","Yup","shape","avatarUrl","required","matches","location","contents","of","min","max","test","this","options","context","reduce","acc","RewardNewForm","isEdit","currentReward","navigate","useNavigate","enqueueSnackbar","useSnackbar","formik","useFormik","enableReinitialize","initialValues","validate","values","a","validateYupSchema","yupToFormErrors","onSubmit","setSubmitting","resetForm","setErrors","alert","JSON","stringify","PATH_DASHBOARD","reward","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","handleAvatarDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","value","noValidate","autoComplete","Grid","container","spacing","item","md","xs","Card","sx","height","Box","accept","maxSize","onDrop","Boolean","caption","mt","mx","textAlign","fData","FormHelperText","px","Stack","TextField","fullWidth","size","label","helperText","direction","select","placeholder","SelectProps","native","map","option","Autocomplete","freeSolo","onChange","event","newValue","renderInput","params","totalValue","render","contentsArrayHelpers","Button","startIcon","icon","PlusFill","onClick","length","push","contentIndex","fieldNamePrefix","getIn","InputProps","endAdornment","InputAdornment","position","IconButton","remove","Delete","justifyContent","LoadingButton","loading","endIcon","Save","RewardCreate","themeStretch","useSettings","pathname","useLocation","useParams","includes","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href"],"mappings":"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","file":"static/js/15.9a40d51c.chunk.js","sourcesContent":["var data = {\n\t\"body\": \"<path fill=\\\"currentColor\\\" d=\\\"M19 11h-6V5a1 1 0 0 0-2 0v6H5a1 1 0 0 0 0 2h6v6a1 1 0 0 0 2 0v-6h6a1 1 0 0 0 0-2z\\\"/>\",\n\t\"width\": 24,\n\t\"height\": 24\n};\nexports.__esModule = true;\nexports.default = data;\n","export const phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nexport const addressRegExp = /^[a-zA-Z0-9 ]*$/;\nexport const nameRegExp = /^[a-zA-Z ]*$/;\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default CardContent;","import { generateUtilityClass, generateUtilityClasses } from '@mui/core';\nexport function getCardHeaderUtilityClass(slot) {\n  return generateUtilityClass('MuiCardHeader', slot);\n}\nconst cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);\nexport default cardHeaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\n\nconst CardHeaderRoot = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => _extends({\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root)\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Avatar',\n  overridesResolver: (props, styles) => styles.avatar\n})({\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})({\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n\n  const {\n    action,\n    avatar,\n    className,\n    component = 'div',\n    disableTypography = false,\n    subheader: subheaderProp,\n    subheaderTypographyProps,\n    title: titleProp,\n    titleTypographyProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component,\n    disableTypography\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  let title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n\n  let subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      ownerState: ownerState,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      ownerState: ownerState,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;","// ----------------------------------------------------------------------\n\nexport const mockImgCover = (index) => `/static/mock-images/covers/cover_${index}.jpg`;\nexport const mockImgFeed = (index) => `/static/mock-images/feeds/feed_${index}.jpg`;\nexport const mockImgProduct = (index) => `/static/mock-images/products/product_${index}.jpg`;\nexport const mockImgAvatar = (index) => `/static/mock-images/avatars/avatar_${index}.jpg`;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { FieldArray, Form, FormikProvider, getIn, useFormik, validateYupSchema, yupToFormErrors } from 'formik';\nimport { Icon } from '@iconify/react';\nimport PlusFill from '@iconify/icons-eva/plus-fill';\n// material\nimport { Delete as DeleteIcon, Save as SaveIcon } from '@mui/icons-material';\nimport { LoadingButton } from '@mui/lab';\nimport {\n  Box,\n  Card,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n  FormHelperText,\n  IconButton,\n  CardHeader,\n  CardContent,\n  Button,\n  Autocomplete,\n  InputAdornment,\n} from '@mui/material';\n// utils\nimport { fData } from '../../utils/formatNumber';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// utils\nimport { nameRegExp } from '../../utils/constants/regexs';\n// components\nimport { UploadAvatar } from '../upload';\n\n// ----------------------------------------------------------------------\n\nconst REWARD_TYPES = ['Easter Egg', 'Present', 'Chest', 'Lottery Wheel'];\nconst tokenValues = {\n  tokenValue: 44,\n  starValueInTokens: 2,\n  keyValueInTokens: 10,\n  boosterValueInTokens: 20,\n  coinValueInTokens: 1,\n};\n\nconst initialFirstContent = {\n  title: 'Basic',\n  frequency: 100,\n  numberOfKeys: 5,\n  numberOfCoins: 5,\n  numberOfStars: 5,\n  numberOfBoosters: 5,\n};\n\nconst initialNewContent = {\n  title: 'Basic',\n  frequency: 0,\n  numberOfKeys: 0,\n  numberOfCoins: 0,\n  numberOfStars: 0,\n  numberOfBoosters: 0,\n};\n\nconst NewRewardSchema = Yup.object().shape({\n  avatarUrl: Yup.mixed().required('Avatar is required'),\n  name: Yup.string().matches(nameRegExp, 'Cannot include special characters.').required('Name is required'),\n  type: Yup.string(),\n  location: Yup.string(),\n  contents: Yup.array().of(\n    Yup.object().shape({\n      title: Yup.string(),\n      frequency: Yup.number()\n        .min(1)\n        .max(100)\n        .test('total frequency test', 'total frequencies must be exactly 100%', function validateFrequency() {\n          const {\n            options: {\n              context: { contents },\n            },\n          } = this;\n          const total = contents.reduce((acc, content) => acc + content.frequency, 0);\n          return total === 100;\n        }),\n      numberOfKeys: Yup.number(),\n      numberOfCoins: Yup.number(),\n      numberOfStars: Yup.number(),\n      numberOfBoosters: Yup.number(),\n    })\n  ),\n});\n\nRewardNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentReward: PropTypes.object,\n};\n\nexport default function RewardNewForm({ isEdit, currentReward }) {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      avatarUrl: currentReward?.avatarUrl || null,\n      name: currentReward?.name || 'Reward Name',\n      type: currentReward?.type || 'Easter Egg',\n      location: currentReward?.location || 'Unassigned',\n      contents: currentReward?.contents || [{ ...initialFirstContent }],\n    },\n    // validationSchema: NewRewardSchema,\n    validate: async (values) => {\n      try {\n        await validateYupSchema(values, NewRewardSchema, true, values);\n      } catch (err) {\n        return yupToFormErrors(err);\n      }\n      return {};\n    },\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      alert(JSON.stringify(values));\n      try {\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.reward.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\n\n  const handleAvatarDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('avatarUrl', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  const calculateAverageValue = () =>\n    values.contents.reduce((acc, content) => {\n      const totalValue =\n        tokenValues.keyValueInTokens * content.numberOfKeys +\n        tokenValues.starValueInTokens * content.numberOfStars +\n        tokenValues.coinValueInTokens * content.numberOfCoins +\n        tokenValues.boosterValueInTokens * content.numberOfBoosters;\n\n      return acc + content.frequency * totalValue;\n    }, 0);\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item md={12}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <Card sx={{ height: '100%' }}>\n                  <CardHeader title=\"Reward Image/Icon\" titleTypographyProps={{ variant: 'subtitle2' }} />\n                  <CardContent>\n                    <Box>\n                      <UploadAvatar\n                        accept=\"image/*\"\n                        file={values.avatarUrl}\n                        maxSize={3145728}\n                        onDrop={handleAvatarDrop}\n                        error={Boolean(touched.avatarUrl && errors.avatarUrl)}\n                        caption={\n                          <Typography\n                            variant=\"caption\"\n                            sx={{\n                              mt: 2,\n                              mx: 'auto',\n                              display: 'block',\n                              textAlign: 'center',\n                              color: 'text.secondary',\n                            }}\n                          >\n                            Allowed *.jpeg, *.jpg, *.png, *.gif\n                            <br /> max size of {fData(3145728)}\n                          </Typography>\n                        }\n                      />\n                      <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                        {touched.avatarUrl && errors.avatarUrl}\n                      </FormHelperText>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={8}>\n                <Card sx={{ height: '100%' }}>\n                  <CardContent>\n                    <Stack spacing={2}>\n                      <TextField\n                        fullWidth\n                        size=\"small\"\n                        label=\"Name\"\n                        {...getFieldProps('name')}\n                        error={Boolean(touched.name && errors.name)}\n                        helperText={touched.name && errors.name}\n                      />\n\n                      <Stack direction=\"row\" spacing={2}>\n                        <TextField\n                          select\n                          fullWidth\n                          size=\"small\"\n                          label=\"Reward Type\"\n                          placeholder=\"Reward Type\"\n                          {...getFieldProps('type')}\n                          SelectProps={{ native: true }}\n                          error={Boolean(touched.type && errors.type)}\n                          helperText={touched.type && errors.type}\n                        >\n                          {REWARD_TYPES.map((option) => (\n                            <option key={option} value={option}>\n                              {option}\n                            </option>\n                          ))}\n                        </TextField>\n\n                        <Autocomplete\n                          fullWidth\n                          size=\"small\"\n                          freeSolo\n                          value={values.location}\n                          onChange={(event, newValue) => {\n                            setFieldValue('location', newValue);\n                          }}\n                          options={['Default', 'Referral', 'Unassigned']}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              label=\"Location\"\n                              error={Boolean(touched.location && errors.location)}\n                              helperText={\n                                (touched.location && errors.location) || 'Type and enter to add new location.'\n                              }\n                            />\n                          )}\n                        />\n\n                        {/* <TextField\n                          select\n                          fullWidth\n                          size=\"small\"\n                          label=\"Location\"\n                          placeholder=\"Location\"\n                          {...getFieldProps('location')}\n                          SelectProps={{ native: true }}\n                          error={Boolean(touched.location && errors.location)}\n                          helperText={touched.location && errors.location}\n                        >\n                          {['Default', 'Unassigned'].map((option) => (\n                            <option key={option} value={option}>\n                              {option}\n                            </option>\n                          ))}\n                        </TextField> */}\n                      </Stack>\n\n                      <Typography>\n                        Average value of single selection in this set = {calculateAverageValue()} tokens\n                      </Typography>\n                    </Stack>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item md={12}>\n            <FieldArray\n              name=\"contents\"\n              render={(contentsArrayHelpers) => (\n                <Card>\n                  <CardHeader\n                    title=\"Contents\"\n                    action={\n                      <Button\n                        variant=\"contained\"\n                        startIcon={<Icon icon={PlusFill} />}\n                        onClick={() => {\n                          const isFirst = values?.contents?.length === 0;\n                          if (isFirst) {\n                            contentsArrayHelpers.push(initialFirstContent);\n                          } else {\n                            contentsArrayHelpers.push(initialNewContent);\n                          }\n                        }}\n                      >\n                        Add Option\n                      </Button>\n                    }\n                  />\n                  <CardContent>\n                    <Grid container spacing={1}>\n                      {values.contents.map((content, contentIndex) => {\n                        const fieldNamePrefix = `contents.${contentIndex}`;\n                        const totalValue =\n                          tokenValues.keyValueInTokens * content.numberOfKeys +\n                          tokenValues.starValueInTokens * content.numberOfStars +\n                          tokenValues.coinValueInTokens * content.numberOfCoins +\n                          tokenValues.boosterValueInTokens * content.numberOfBoosters;\n                        return (\n                          <Grid key={contentIndex} item xs={12} md={3}>\n                            <Card>\n                              <CardContent>\n                                <Stack spacing={1}>\n                                  <TextField\n                                    fullWidth\n                                    variant=\"standard\"\n                                    size=\"small\"\n                                    label=\"Title\"\n                                    {...getFieldProps(`${fieldNamePrefix}.title`)}\n                                    error={Boolean(\n                                      getIn(touched, `${fieldNamePrefix}.title`) &&\n                                        getIn(errors, `${fieldNamePrefix}.title`)\n                                    )}\n                                    helperText={\n                                      getIn(touched, `${fieldNamePrefix}.title`) &&\n                                      getIn(errors, `${fieldNamePrefix}.title`)\n                                    }\n                                  />\n                                  <TextField\n                                    fullWidth\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    size=\"small\"\n                                    label=\"Frequency\"\n                                    {...getFieldProps(`${fieldNamePrefix}.frequency`)}\n                                    error={Boolean(\n                                      getIn(touched, `${fieldNamePrefix}.frequency`) &&\n                                        getIn(errors, `${fieldNamePrefix}.frequency`)\n                                    )}\n                                    helperText={\n                                      getIn(touched, `${fieldNamePrefix}.frequency`) &&\n                                      getIn(errors, `${fieldNamePrefix}.frequency`)\n                                    }\n                                  />\n                                  <TextField\n                                    fullWidth\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    size=\"small\"\n                                    label=\"Number of Keys\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          = {tokenValues.keyValueInTokens * content.numberOfKeys} tokens\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    {...getFieldProps(`${fieldNamePrefix}.numberOfKeys`)}\n                                    error={Boolean(\n                                      getIn(touched, `${fieldNamePrefix}.numberOfKeys`) &&\n                                        getIn(errors, `${fieldNamePrefix}.numberOfKeys`)\n                                    )}\n                                    helperText={\n                                      getIn(touched, `${fieldNamePrefix}.numberOfKeys`) &&\n                                      getIn(errors, `${fieldNamePrefix}.numberOfKeys`)\n                                    }\n                                  />\n                                  <TextField\n                                    fullWidth\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    size=\"small\"\n                                    label=\"Number of Stars\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          = {tokenValues.starValueInTokens * content.numberOfStars} tokens\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    {...getFieldProps(`${fieldNamePrefix}.numberOfStars`)}\n                                    error={Boolean(\n                                      getIn(touched, `${fieldNamePrefix}.numberOfStars`) &&\n                                        getIn(errors, `${fieldNamePrefix}.numberOfStars`)\n                                    )}\n                                    helperText={\n                                      getIn(touched, `${fieldNamePrefix}.numberOfStars`) &&\n                                      getIn(errors, `${fieldNamePrefix}.numberOfStars`)\n                                    }\n                                  />\n                                  <TextField\n                                    fullWidth\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    size=\"small\"\n                                    label=\"Number of Coins\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          = {tokenValues.coinValueInTokens * content.numberOfCoins} tokens\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    {...getFieldProps(`${fieldNamePrefix}.numberOfCoins`)}\n                                    error={Boolean(\n                                      getIn(touched, `${fieldNamePrefix}.numberOfCoins`) &&\n                                        getIn(errors, `${fieldNamePrefix}.numberOfCoins`)\n                                    )}\n                                    helperText={\n                                      getIn(touched, `${fieldNamePrefix}.numberOfCoins`) &&\n                                      getIn(errors, `${fieldNamePrefix}.numberOfCoins`)\n                                    }\n                                  />\n                                  <TextField\n                                    fullWidth\n                                    type=\"number\"\n                                    variant=\"standard\"\n                                    size=\"small\"\n                                    label=\"Number of Boosters\"\n                                    InputProps={{\n                                      endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                          = {tokenValues.boosterValueInTokens * content.numberOfBoosters} tokens\n                                        </InputAdornment>\n                                      ),\n                                    }}\n                                    {...getFieldProps(`${fieldNamePrefix}.numberOfBoosters`)}\n                                    error={Boolean(\n                                      getIn(touched, `${fieldNamePrefix}.numberOfBoosters`) &&\n                                        getIn(errors, `${fieldNamePrefix}.numberOfBoosters`)\n                                    )}\n                                    helperText={\n                                      getIn(touched, `${fieldNamePrefix}.numberOfBoosters`) &&\n                                      getIn(errors, `${fieldNamePrefix}.numberOfBoosters`)\n                                    }\n                                  />\n                                  <IconButton\n                                    color=\"error\"\n                                    aria-label=\"delete\"\n                                    onClick={() => contentsArrayHelpers.remove(contentIndex)}\n                                  >\n                                    <DeleteIcon />\n                                  </IconButton>\n                                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                                    <Typography>Token value: </Typography>\n                                    <Typography>{totalValue} tokens</Typography>\n                                  </Stack>\n                                </Stack>\n                              </CardContent>\n                            </Card>\n                          </Grid>\n                        );\n                      })}\n                    </Grid>\n                  </CardContent>\n                </Card>\n              )}\n            />\n            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n              <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting} endIcon={<SaveIcon />}>\n                Save\n              </LoadingButton>\n            </Box>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useParams, useLocation } from 'react-router-dom';\n// material\nimport { Container } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../routes/paths';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport RewardNewForm from '../components/reward/RewardNewForm';\nimport { mockImgProduct } from '../utils/mockImages';\n\n// ----------------------------------------------------------------------\n\nexport default function RewardCreate() {\n  const { themeStretch } = useSettings();\n  const { pathname } = useLocation();\n  const { name } = useParams();\n  const isEdit = pathname.includes('edit');\n\n  // TODO: will be updated with reward info\n  const currentReward = isEdit\n    ? {\n        avatarUrl: mockImgProduct(1),\n        name: 'Easter Egg',\n        location: 'Turkey',\n        contents: [\n          {\n            title: 'Basic',\n            frequency: 30,\n            numberOfKeys: 5,\n            numberOfCoins: 5,\n            numberOfStars: 5,\n            numberOfBoosters: 5,\n          },\n          {\n            title: 'Rare',\n            frequency: 30,\n            numberOfKeys: 10,\n            numberOfCoins: 15,\n            numberOfStars: 5,\n            numberOfBoosters: 10,\n          },\n          {\n            title: 'Epic',\n            frequency: 20,\n            numberOfKeys: 20,\n            numberOfCoins: 30,\n            numberOfStars: 20,\n            numberOfBoosters: 25,\n          },\n        ],\n      }\n    : {};\n\n  return (\n    <Page title=\"Reward: Create a new reward\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading={!isEdit ? 'Add Reward' : 'Edit Reward'}\n          links={[{ name: 'Reward', href: PATH_DASHBOARD.root }, { name: !isEdit ? 'Add Reward' : name }]}\n        />\n        <RewardNewForm isEdit={isEdit} currentReward={currentReward} />\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}